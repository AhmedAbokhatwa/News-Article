[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-04-18 09:26:59.876836",
  "module": null,
  "name": "test",
  "script": "// frappe.ui.form.on('Customer', {\n//     custom_test(frm) {\n//         frappe.call({\n//             method: 'frappe.client.get_value',\n//             args: {\n//                 doctype: 'Committee',\n//                 filters: { name: \"\u0644\u062c\u0646\u0629 \u0628\u0637\u0627\u0637\u0633\" },\n//                 fieldname: 'products_associated_with_this_comission'\n//             },\n//             callback: function (r) {\n//                 if (r.message) {\n//                     let x = r.message.products_associated_with_this_comission ;\n//                     console.log(x[1]);\n//                 } else {\n//                     console.log(\"No matching committee found.\");\n//                 }\n//             }\n//         });\n//     }\n// });\n\n\nfrappe.ui.form.on('Customer', {\n    custom_test(frm) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Committee',\n                filters: { name: \"\u0644\u062c\u0646\u0629 \u0628\u0637\u0627\u0637\u0633\" },\n            },\n            callback: (r) => {\n                if (!r.exc && r.message !== null) {\n                    const memo = r.message.products_associated_with_this_comission;\n                // const memo = [\n                //     { product: \"ahmed\", product_english_name: \"saleh\" },\n                //     { product: \"Mohamed\", product_english_name: \"Essam\" }\n                // ];\n\n                    console.log(memo);\n\n                    if (!frm.doc.custom_crops_that_the_company_packs_at_the_station) {\n                        console.log(\"Child table does not exist\");\n                        return;\n                    }\n\n                    frm.clear_table('custom_crops_that_the_company_packs_at_the_station');\n\n                    memo.forEach(i => {\n                        let row = frm.add_child('custom_crops_that_the_company_packs_at_the_station');\n                        row.item_name = i.product_english_name;\n                        row.item = i.product;\n                    });\n\n                    frm.refresh_field('custom_crops_that_the_company_packs_at_the_station');\n                    frm.refresh_fields(); // Refresh all fields, including the child table\n\n                    let a = frm.doc.custom_crops_that_the_company_packs_at_the_station;\n                    console.log(a);\n                } else {\n                    frappe.msgprint(__('Error: ') + r.exc);\n                }\n            }\n        });\n    }\n});\n\n\n\n\n\n\n\n// frappe.ui.form.on('Customer', {\n//     custom_test (frm) {\n//             frappe.call({\n//                 method: 'frappe.client.get',\n//                 args: {\n//                     doctype: 'Committee',\n//                     filters: { name: \"\u0644\u062c\u0646\u0629 \u0628\u0637\u0627\u0637\u0633\"}, \n//                     // fieldname: ['products_associated_with_this_comission']\n//                 },\n//                 callback: function (r) {\n//                     if (r.message) {\n//                         let tableData = r.message.products_associated_with_this_comission;\n//                         console.log(tableData);\n//                             frm.doc.custom_crops_that_the_company_packs_at_the_station.forEach(item => {\n//                         // Assuming you want to update each item in the table\n//                         // if (tableData.length > 0) {\n//                             // let productData = tableData[0]; \n//                             console.log(productData);\n//                             item.item = productData.product;\n//                             item.item_name = productData.product_english_name;\n//                             // You can update other fields as needed\n//                         // }\n//                             });\n\n//                     frm.refresh_field('custom_crops_that_the_company_packs_at_the_station');\n//                     }\n//                 }\n//             });\n//     }\n// });\n\n\n\n\n\n\n\n\n// frappe.ui.form.on('Customer', {\n//     custom_test(frm) {\n//         frappe.call({\n//             method: 'frappe.client.get_list',\n//             args: {\n//                 doctype: 'Committee',\n//                 filters: { name: \"\u0644\u062c\u0646\u0629 \u0628\u0637\u0627\u0637\u0633\" },\n//                 fields: ['products_associated_with_this_comission']\n//             },\n//             callback: function (r) {\n//                 if (r.message && r.message.length > 0) {\n//                     const committee = r.message[0];\n//                     const productsList = committee.products_associated_with_this_comission;\n                    \n//                     if (productsList && productsList.length > 0) {\n//                         for (const product of productsList) {\n//                             console.log(product.field_name); // Replace 'field_name' with the actual field name you want to access in the product table\n//                         }\n//                     } else {\n//                         console.log(\"No products associated with this committee.\");\n//                     }\n//                 } else {\n//                     console.log(\"No matching committee found.\");\n//                 }\n//             }\n//         });\n//     }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Check",
  "enabled": 0,
  "modified": "2024-03-14 14:44:29.492307",
  "module": null,
  "name": "Check-List",
  "script": "frappe.listview_settings['Check'] = {\n    onload: function(listview) {\n            listview.page.add_inner_button(__(\"Collect\"), () => selected_check_action(listview, 'Collected'),\n            \"Select Receive Action\");\n            listview.page.add_inner_button(__(\"Under Collection\"), () => selected_check_action(listview, 'Under Collection'),\n            \"Select Receive Action\");\n            listview.page.add_inner_button(__(\"Reject\"), () => selected_check_action(listview, 'Rejected'),\n            \"Select Receive Action\");\n            listview.page.add_inner_button(__(\"Return\"), () => selected_check_action(listview, 'Returned'),\n            \"Select Receive Action\");\n            listview.page.add_inner_button(__(\"Cash\"), () => selected_check_action(listview, 'Cash'),\n            \"Select Receive Action\");\n              listview.page.add_inner_button(__(\"reject_pay\"), () => selected_check_action(listview, 'reject_pay'),\n            \"Select Pay Action\");\n              listview.page.add_inner_button(__(\"collected_pay\"), () => selected_check_action(listview, 'collected_pay'),\n            \"Select Pay Action\");\n    }\n};\n\nfunction selected_check_action(listview, action) {\n        let checks = listview.get_checked_items();\n        checks.forEach(check_name => {\n            frappe.call({ // get check details\n              method: 'frappe.client.get',\n                args: {'doctype': 'Check', 'name': check_name.name},\n                callback: function(r) {\n                    let check = r.message;\n                    if(check.status == action)\n                        frappe.throw(`Your cheque already ${action}`);\n                    if(check.status == 'Collected')\n                        frappe.throw(`Can't make further actions on Collected Check ${check.name}`)\n                    // check if check is not collected first ===> later\n                    \n                    let payment = frappe.model.get_new_doc(\"Payment Entry\");\n                    payment.payment_type = 'Internal Transfer';\n                    payment.posting_date = get_today();\n                    payment.paid_amount = check.amount;\n\t\t            payment.received_amount = check.amount;\n\t\t            payment.base_paid_amount = check.amount;\n\t\t            payment.reference_no = check.check_no;\n\t\t          //  payment.mode_of_payment = check.affected_account;\n\t\t            payment.cheque_status = action\n\t\t            \n\t\t            frappe.call({\n\t\t                method: 'frappe.client.get',\n\t\t                args: {'doctype': 'Mode of Payment', name: '\u0627\u0648\u0631\u0627\u0642 \u0627\u0644\u0642\u0628\u0636'},\n\t\t                callback: function(r) {\n\t\t                    payment.paid_from =check.paid_from//// r.message.accounts[0].default_account;\n\t\t                    let company = r.message.accounts[0].company;\n\t\t                    frappe.call({\n\t\t                        method:'frappe.client.get', \n\t\t                        args:{'doctype': 'Account', 'name': r.message.accounts[0].default_account},\n\t\t                        callback: function(r) {\n\t\t                            payment.paid_from_account_currency = r.message.account_currency;\n\t\t                        }\n\t\t                    });\n\t\t                    frappe.call({\n\t\t                        method: 'frappe.client.get',\n\t\t                        args: {'doctype': 'Mode of Payment', name: '\u0627\u0648\u0631\u0627\u0642 \u0627\u0644\u0642\u0628\u0636'},\n\t\t                        callback: function(r) {\n\t\t                                                                                    \n                                                         switch(action) {\n                                                    case 'Collected':\n                                                            frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['collected_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.collected_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    break;\n                                                    case 'Under Collection':\n                                                         frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['under_collection_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.under_collection_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM2S0\");\n                                                    break;\n                                                    case 'Rejected':\n                                                                                                                 frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['rejected_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.rejected_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                     case 'Returned':\n                                                                                  frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['returned_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.returned_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                    case 'Cash':\n                                                             frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['cash_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.cash_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                 case 'collected_pay':\n                                                             frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['collected_pay'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_from= r.message.collected_pay;\n                                                             payment.paid_to=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                case 'reject_pay':\n                                                             frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['under_pay'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_from= r.message.under_pay;\n                                                             payment.paid_to=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                    }\n                                                        \n\t\t                          //  payment.paid_to = r.message.accounts[0].default_account;\n\t\t                            frappe.call({\n\t\t\t                            method:'frappe.client.get', \n\t\t\t                            args:{'doctype': 'Account', 'name': r.message.accounts[0].default_account},\n\t\t\t                            callback: function(r) {\n\t\t\t                                payment.paid_to_account_currency = r.message.account_currency;\n\t\t\t                                frappe.call({\n                                                method: 'erpnext.accounts.doctype.payment_entry.payment_entry.get_party_and_account_balance',\n                                                args: {\n                                                    company: company, \n                                                    date: get_today(), \n                                                    paid_from: payment.paid_from,\n                                                    paid_to: payment.paid_to\n                                                    \n                                                },\n                                                   \n                                                    callback: function(r) {\n\n                                                        \n                                                        \n                                                        \n                                                        \n                                                        \n                                                        \n                                                        payment.paid_from_account_balance = r.message.paid_from_account_balance;\n                                                        payment.paid_to_account_balance = r.message.paid_to_account_balance;\n\t\t\t                                            frappe.call({\n\t\t\t                                                method: 'frappe.client.insert',\n\t\t\t                                                type: 'POST',\n\t\t\t                                                args:{'doc': payment},\n\t\t\t                                                callback: function(r) {\n\t\t\t                                                    frappe.call({\n                                                                \"method\": \"frappe.client.set_value\",\n                                                                    \"args\": {\n                                                                        \"doctype\": 'Check',\n                                                                        \"name\":  check.name,\n                                                                        \"fieldname\": {\n                                                                            \"status\" : action,\n                                                                            \"originl_mode_of_payment\": check.affected_account,\n                                                                            \"affected_account\": \"\",\n                                                                            \"paid_from\":  payment.paid_to,\n                                                                    },\n                                                                }\n                                                            });\n\t\t\t                                                }\n\t\t\t                                            });\n                                                    }\n                                                });\n\t\t\t                            }\n\t\t                            });\n\t\t                        }\n\t\t                    });\n\t\t                }\n\t\t            })\n                }\n            });\n    })\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Check",
  "enabled": 0,
  "modified": "2023-10-11 16:58:29.379410",
  "module": null,
  "name": "Check-Form",
  "script": "frappe.ui.form.on('Check', {\n\ncollect_check:function(frm) {\n    //  product_setting = frappe.model.get_doc(\"CHecks_settings\")\n    // collect_account = product_setting.collected_account\n\n   //frappe.client.set_value(\"Check\", curfrm.doc.name, \"status\",\"Collected\")\n //   frappe.client.set_value(\"Check\", frm.doc.name, \"originl_mode_of_payment\",frm.doc.affected_account)\n                // if(!frm.doc.affected_account)\n                //     frappe.throw(\"Please select To Account\");\n                \n\n\n\n                \n                check_status(frm, 'Collected');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.check_date\n\t\t\t\tjobOrder.cheque_status='Collected'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t            jobOrder.reference_date= frm.doc.check_date\n\t           // jobOrder.mode_of_payment = frm.doc.affected_account;\n                            frappe.call({\n                            'method': 'frappe.client.get_value',\n                            'args': {\n                            'doctype': 'CHecks_settings',\n                            'fieldname': ['collected_account'],\n                            // 'filters': {'name': frm.doc.owner}\n                            },\n                            callback: function(r) {\n                            jobOrder.paid_to= r.message.collected_account;\n                            \n                            }\n                            })\n\t           // jobOrder.mode_of_payment = collect_account;//frappe.db.get_single_value(\"CHecks_settings\", 'collected_account');\n\t           // jobOrder.to_mode_of_payment = frm.doc.originl_mode_of_payment\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n                            frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Collected\",\n                            // \"paid_from\":frm.doc.affected_account\n                            \"originl_mode_of_payment\": frm.doc.affected_account,\n                            \"affected_account\": \"\"\n                            },\n                            }\n                            });\n        \n\t\t\t\n\t},\ncheck_under_collection:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'Under Collection');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'CHecks_settings',\n                                'fieldname': ['under_collection_account'],\n                                // 'filters': {'name': frm.doc.owner}\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_to= r.message.under_collection_account;\n                                \n                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Under Collection'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Under Collection\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t},\ncheck_rejected:function(frm) {\n                check_status(frm, 'Rejected');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t                            frappe.call({\n                            'method': 'frappe.client.get_value',\n                            'args': {\n                            'doctype': 'CHecks_settings',\n                            'fieldname': ['rejected_account'],\n                            // 'filters': {'name': frm.doc.owner}\n                            },\n                            callback: function(r) {\n                            jobOrder.paid_to= r.message.rejected_account;\n                            \n                            }\n                            })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Rejected'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t                          frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Rejected\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n                            \n\t\t\t\n\t},\ncheck_returned:function(frm) {\n                check_status(frm, 'Returned');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\t\t\t\t\t                            frappe.call({\n                            'method': 'frappe.client.get_value',\n                            'args': {\n                            'doctype': 'CHecks_settings',\n                            'fieldname': ['returned_account'],\n                            // 'filters': {'name': frm.doc.owner}\n                            },\n                            callback: function(r) {\n                            jobOrder.paid_to= r.message.returned_account;\n                            \n                            }\n                            })\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Returned'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t\t\t\t\t                          frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Returned\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n                            \n\t\t\t\n\t},\n\ncollect_cash:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'Under Collection');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'CHecks_settings',\n                                'fieldname': ['cash_account'],\n                                // 'filters': {'name': frm.doc.owner}\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_to= r.message.cash_account;\n                                \n                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Under Collection'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Cash\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t},\n\t\nunder_pay:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'under_pay');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_to=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'CHecks_settings',\n                                'fieldname': ['under_pay'],\n                                // 'filters': {'name': frm.doc.owner}\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_from= r.message.under_pay;\n                                \n                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='under_pay'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"under_pay\",\n                            \"paid_from\":jobOrder.paid_to\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t},\n\t\n\tcollected_pay:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'collected_pay');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_to=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'CHecks_settings',\n                                'fieldname': ['collected_pay'],\n                                // 'filters': {'name': frm.doc.owner}\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_from= r.message.collected_pay;\n                                                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='collected_pay'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"collected_pay\",\n                            \"paid_from\": jobOrder.paid_to\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t,\n\t\n\t\n\t\n\t\n\t\n\t\n\trefresh: function(frm) {\n      if(frm.doc.status === \"Returned\" || frm.doc.status === \"Rejected\" || frm.doc.status == \"Collected\") {\n          frm.set_df_property(\"collect_check\", \"hidden\", 1);\n          frm.set_df_property(\"check_rejected\", \"hidden\", 1);\n          frm.set_df_property(\"check_under_collection\", \"hidden\", 1);\n          frm.set_df_property(\"check_returned\", \"hidden\", 1);\n           frm.set_df_property(\"collect_cash\", \"hidden\", 1);\n      }\n  \n},\n\t\t\n})\n\nfunction check_status(frm, status) {\n    if(frm.doc.status === status)\n        frappe.throw(`The check is already ${status}`);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2023-10-08 14:50:29.034465",
  "module": null,
  "name": "Journal Entry-Form",
  "script": "frappe.ui.form.on('Journal Entry', {\nbefore_submit:function(frm) {\n\t\t// your code here\nvar doc = locals[frm.doc.doctype][frm.doc.name];\n// \t\t\tvar doc = locals[frm.doc.doctype][frm.doc.name];\n\t\t\tif (cur_frm.doc.voucher_type=='Bank Entry' && cur_frm.doc.cheque_no)\n\t\t\t{\n\t\t\t    \n\t\t\t   frm.doc.accounts.forEach(account => {\n\t\t        if(account.bank_account) {\n\t\t            \n                        var check = {\n                        'doctype': 'Check',\n                        'check_no': cur_frm.doc.cheque_no,\n                        'due_date': cur_frm.doc.cheque_date,\n                        // 'bank': account.bank_account,\n                        'amount': account.credit,\n                        'status': 'Open',\n                        'type': 'Pay',\n                        'originl_mode_of_payment': cur_frm.doc.mode_of_payment,\n                        // 'party_type': cur_frm.doc.party_type,\n                        // 'party': cur_frm.doc.party,\n                        'party_name': cur_frm.doc.comp_name,\n                        'paid_from':  account.account,\n                        // 'affected_account': cur_frm.doc.mode_of_payment\n                        }\n\t\t                                        console.log(check)\n                                    frappe.db.insert(check).then(doc => {\n                                    console.log(\"Inserted\");\n                                    // \tfrm.save_or_update();\n                                    //\tfrappe.set_route(\"Form\", \"Sales Invoice\", doc.name)\n                                    })\n       \n                    \n\t\t          //  frappe.throw(\"Check number required\");\n\t\t        }\n\t\t \n\t\t    })\n\n            }\n}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Generalization",
  "enabled": 0,
  "modified": "2023-12-18 11:48:00.074086",
  "module": "Selling",
  "name": "test2",
  "script": "// frappe.ui.form.on('Generalization', {\n//     refresh: function (frm) {\n//         frm.add_custom_button(__('Action'), function () {\n//             ayhaga(frm);\n//         });\n//     }\n// });\n\n// function createGeneralizationLogForCommittee(committee) {\n//     frappe.call({\n//         method: 'frappe.client.get_list',\n//         args: {\n//             doctype: 'Customer',\n//             fields: ['name', 'custom_committees_you_would_like_to_join'],\n//             filters: {\n//                 'custom_committees_you_would_like_to_join.committees': committee,\n//             },\n//         },\n//         callback: function (response) {\n//             if (response.message && response.message.length > 0) {\n//                 let log = frappe.model.get_new_doc(\"Generalization Log\");\n//                 log.committee = committee;\n//                 log.customers = [];\n\n//                 response.message.forEach(function (customer) {\n//                     let customer_name = customer.customer_name;\n//                     let custom_email = customer.custom_email;\n\n//                     if (customer_name && custom_email) {\n//                         addCustomerRowToGeneralizationLog(log, customer_name, custom_email);\n//                     }\n//                 });\n\n//                 frappe.db.insert(log);\n//                 frappe.msgprint(\"Created Generalization Log for Committee: \" + committee);\n//             }\n//         }\n//     });\n// }\n\n// function addCustomerRowToGeneralizationLog(log, customer_name, custom_email) {\n//     if (!log.customers) {\n//         log.customers = [];\n//     }\n\n//     log.customers.push({\n//         'customer_name': customer_name,\n//         'email': custom_email\n//     });\n// }\n\n// function ayhaga(frm) {\n//     const committees = frm.doc.committees;\n//     for (let i = 0; i < committees.length; i++) {\n//         const temp = committees[i];\n//         if (temp.select === 1) {\n//             createGeneralizationLogForCommittee(temp.the_commission);\n//         }\n//     }\n    \n// }\nfrappe.ui.form.on('Generalization', {\n    refresh: function (frm) {\n        frm.add_custom_button(__('Action'), function () {\n            displayCommission(frm);\n        });\n    }\n});\n\nfunction displayCommission(frm) {\n    var committeeData = frm.doc.committees || [];\n\n    if (committeeData.length > 0) {\n        var dialog = new frappe.ui.Dialog({\n            title: __('Committees'),\n            fields: [\n                {\n                    fieldtype: 'Table',\n                    label: 'Committees',\n                    options: 'Committees',\n                    fields: [\n                        'the_commission',\n                        // Add more fields as needed\n                    ],\n                    data: committeeData.map(function (row) {\n                        return {\n                            'the_commission': row.the_commission,\n                            \n                        };\n                    }),\n                },\n            ],\n        });\n        dialog.show();\n        console.log(committeeData);\n    } else {\n        frappe.msgprint(__('No committees found.'));\n    }\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bidding Session",
  "enabled": 1,
  "modified": "2023-10-15 13:51:32.012648",
  "module": null,
  "name": "Bidding",
  "script": "// frappe.ui.form.on('Bidding Session', {\n// \tdeadline_in_days(frm) {\n// \t\tlet temp = frm.doc.date +\"  \"+  frm.doc.deadline_in_days ;\n// \t\tfrm.set_value('bidding_key', temp);\n// \t\tfrm.refresh_field('bidding_key');\n\n\n\t\t\n// \t},\n// \tdate(frm) {\n// \t\tlet temp = frm.doc.date +\"  \"+  frm.doc.deadline_in_days ;\n// \t\tfrm.set_value('bidding_key', temp);\n// \t\tfrm.refresh_field('bidding_key');\n\n\n\t\t\n// \t}\n// })\nfrappe.ui.form.on('Bidding Session', {\n\tdeadline_in_days(frm) {\n\t\tupdateBiddingKey(frm);\n\t},\n\tdate(frm) {\n\t\tupdateBiddingKey(frm);\n\t}\n});\n\nfunction updateBiddingKey(frm) {\n\tlet selectedDate = frm.doc.date;\n\tlet daysToAdd = frm.doc.deadline_in_days;\n\tlet temp = selectedDate + ' ' + daysToAdd;\n\n\tif (isThursday(selectedDate)) {\n\t\tfrm.set_value('bidding_key', temp);\n\t\tfrm.refresh_field('bidding_key');\n\t} else {\n\t\tfrappe.msgprint(__('Bidding sessions can only occur on Thursdays.'));\n\t\tfrm.set_value('bidding_key', '');\n\t\tfrm.refresh_field('bidding_key');\n\t}\n}\n\nfunction isThursday(selectedDate) {\n\t// Convert the selected date to a JavaScript Date object\n\tconst jsDate = frappe.datetime.str_to_obj(selectedDate);\n\t\n\t// Check if the day of the week is Thursday (4 in JavaScript's Date object)\n\treturn jsDate.getDay() === 4;\n}\n\nfrappe.ui.form.on('Bidding Session', {\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) {\n            // Add a custom button to the toolbar\n            frm.add_custom_button(__('Create Purchase Order'), function() {\n                createPurchaseOrder(frm.doc);\n            }).addClass('btn-primary'); // Set the button color to blue\n        }\n    }\n});\n\nfunction createPurchaseOrder(bidding_session) {\n    frappe.model.with_doctype('Purchase Order', function() {\n        var new_purchase_order = frappe.model.get_new_doc('Purchase Order');\n        new_purchase_order.supplier = bidding_session.supplier; // Populate with relevant data\n\n        frappe.set_route('Form', 'Purchase Order', new_purchase_order.name);\n    });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-04-15 13:12:33.062647",
  "module": null,
  "name": "Payment Entry",
  "script": "frappe.ui.form.off('Payment Entry', 'onload')\nfrappe.ui.form.on('Payment Entry', {\n    \nbefore_submit:function(frm) {\n\t\t// your code here\n\t\t\n\t\t\tvar doc = locals[frm.doc.doctype][frm.doc.name];\n\t\t\tif (doc.custom_check_list)\n\t\t\t{\n\t\t   $.each(doc.custom_check_list, function(i, d) {\n\t\t       \n\t\t       \t\n\t\t       \n\t\t      var check = {\n                'doctype': 'Check',\n                'type': cur_frm.doc.payment_type,\n                'check_no': cur_frm.doc.custom_check_list[i].check_no,\n                'due_date': cur_frm.doc.custom_check_list[i].due_date,\n                'bank': cur_frm.doc.custom_check_list[i].bank,\n                'amount': cur_frm.doc.custom_check_list[i].amount,\n                'status': 'Open',\n                'originl_mode_of_payment': cur_frm.doc.custom_mode_of_payment_per_check,\n                'party_type': cur_frm.doc.party_type,\n                'party': cur_frm.doc.party,\n                'party_name': cur_frm.doc.party_name,\n                'paid_from': cur_frm.doc.paid_to,\n                'affected_account': cur_frm.doc.custom_check_list[i].originl_mode_of_payment\t\n            }\n            \n         \n              //      msgprint(cur_frm.doc.check_list[i].check_no);\n\n           \n            \n            frappe.db.insert(check).then(doc => {\n                console.log(\"Inserted\");\n           // \tfrm.save_or_update();\n            //\tfrappe.set_route(\"Form\", \"Sales Invoice\", doc.name)\n            })\n\t\t       \n         \n        });\n\n            }\n            \nif ( cur_frm.doc.cheque_)\n\n{\n //           msgprint(cur_frm.doc.cheque_status);\n // msgprint( cur_frm.doc.paid_to);\n  \n       \n    \n        frappe.call({\n        method: 'frappe.client.set_value',\n        'args': {\n          'doctype': 'Check',\n          'name': cur_frm.doc.cheque_,\n          fieldname: {\n            'status':cur_frm.doc.cheque_status,\n             'paid_from':cur_frm.doc.paid_to\n          },\n        }\n        });\n   // frappe.model.set_value(\"Check\", cur_frm.doc.cheque_, \"Status\", cur_frm.doc.cheque_status)\n   //frappe.model.set_value(\"Check\", cur_frm.doc.cheque_, \"paid_from\", cur_frm.doc.paid_to)\n\n\n}\n //     msgprint('Completed');\n\n   \n   \n   \n\n}\n\n});\n// difference_amount\nfrappe.ui.form.on('Payment Entry', {\n     apply_taxes_on_net_amount: function(frm) {\n      frm.toggle_display('tax_category', frm.doc.apply_taxes_on_net_amount === 1);  \n    },\n    tax_category : function(frm) {\n        if(frm.doc.apply_taxes_on_net_amount === 1 && frm.doc.tax_category) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: frm.doc.references[0].reference_doctype,\n                    name: frm.doc.references[0].reference_name\n                },\n                callback: function(r) {\n                    let net_total = r.message.net_total;\n                    frappe.call({\n                        method: 'frappe.client.get',\n                        args: {\n                            doctype: 'Tax Withholding Category',\n                            name: frm.doc.tax_category\n                        },\n                        callback: function(r) {\n                            let rate = r.message.rates[0].tax_withholding_rate;\n                            let account = r.message.accounts[0].account;\n                            console.log(account);\n                            let amount = (rate * net_total) / 100;\n                            frm.add_child('taxes', {\n                                charge_type: 'Actual',\n                                rate: rate\n                            });\n                            let child = frm.doc.taxes[frm.doc.taxes.length - 1];\n                            frappe.model.set_value(\"Advance Taxes and Charges\",child.name, 'account_head', account)\n                            .then(() => {\n                                frappe.model.set_value(\"Advance Taxes and Charges\",child.name, 'tax_amount', amount);\n                            });\n                        }\n                    });\n                }\n            });\n        }\n    },\n     mode_of_payment: function(frm) {\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Mode of Payment\",\n                name: frm.doc.mode_of_payment\n            },\n            callback: function(r) {\n                frm.doc.mode = r.message.type;\n            }\n        })\n    },\n    before_save: function(frm) {\n    let total_amount = 0;\n    try {\n        if(frm.doc.custom_check_list.length == 1) \n            total_amount = parseFloat(frm.doc.custom_check_list[0].amount);\n        else \n            total_amount = frm.doc.custom_check_list.reduce((a, b) => \n                                        parseFloat(a.amount) + parseFloat(b.amount));\n    } catch(e) {}\n    \n    if(frm.doc.mode != \"Cash\")\n                    if(frm.doc.cheque_status === \"Open\" && total_amount !== parseFloat(frm.doc.paid_amount))\n                        frappe.throw(\"Check the total cheque amount\");\n},\nafter_cancel: function(frm) {\n    try {\n        frm.doc.custom_check_list.map(check => frappe.db.delete_doc(\"Check\", check.check_no));\n    } catch(e) {}\n},\nonload: function(frm) {\n     frm.toggle_display(\"set_exchange_gain_loss\", \n            Math.round(frm.doc.difference_amount));\n    let invoice = '';\n    try {\n            invoice = frm.doc.references[0].reference_name;\n    }\n    catch(err) {}\n\n    if(frm.doc.to_mode_of_payment) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                'doctype': 'Mode of Payment',\n                'name': frm.doc.to_mode_of_payment\n            },\n            callback: function(r) {\n                frappe.model.set_value(\"Payment Entry\", frm.doc.name, \"paid_to\", r.message.accounts[0].default_account);\n            }\n        });\n    }\n        \n\n    \n    if(invoice){\n        if (frm.doc.custom_check_list  && frm.doc.custom_check_list.length === 0 &&\n            frm.doc.references[0].reference_doctype == 'Sales Invoice'){\n        frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                        'doctype': 'Sales Invoice',\n                        'name': invoice\n                },\n                 callback: function(r) {\n                    if (!r.exc) {\n                        frappe.model.set_value('Payment Entry Reference', \n                            frm.doc.references[0].name, 'glass_ref', r.message.glass_ref);\n                        let f = r.message.payment_schedule;\n                        try{\n                            if(r.message.payment_schedule_cur && r.message.payment_schedule_cur.length > 0)\n                                 f = r.message.payment_schedule_cur;\n                        } catch(e) {}\n                           \n                            \n                        frm.doc.custom_check_list = [];\n                        f.forEach((check) => {\n                            const entry = frm.add_child('custom_check_list');\n                            entry.due_date = check.due_date;\n                            entry.amount = check.payment_amount;\n                            refresh_field('custom_check_list');\n                        });\n\n\n                    }\n                }\n            });\n    }\n    }\n},\n    \n\n      difference_amount : function(frm) {\n          \n        frm.toggle_display(\"set_exchange_gain_loss\", \n            Math.round(frm.doc.difference_amount))\n     },\n     refresh: function(frm) {\n          frm.toggle_display(\"set_exchange_gain_loss\", \n            Math.round(frm.doc.difference_amount))\n     }\n     \n     \n});\n\n\n\nfrappe.ui.form.on('Payment Entry', {\n    custom_mode_of_payment_per_check: function(frm) {\n    if(frm.doc.custom_check_list) {\n          for(let check of frm.doc.custom_check_list) {\n              check.originl_mode_of_payment = frm.doc.custom_mode_of_payment_per_check;\n          }  \n    }\n      refresh_field('custom_check_list');\n    },\n    custom_check_date: function(frm) {\n      if(frm.doc.custom_check_date) {\n        let d = new Date(frm.doc.custom_check_date);\n        if(frm.doc.custom_check_list) {\n           for(let i of frm.doc.custom_check_list) {\n               d.setMonth(d.getMonth() + 1);\n               i.due_date = d.toISOString().split('T')[0];\n           }\n           refresh_field('custom_check_list');\n        }\n      }\n    },\n    custom_check_amount: function(frm) {\n      if(frm.doc.custom_check_amount && frm.doc.custom_check_list) {\n          for(let i of frm.doc.custom_check_list) {\n              i.amount = frm.doc.custom_check_amount;\n          }\n          refresh_field('custom_check_list');\n      }  \n    },\n    custom_number_of_checks: function(frm) {\n        for(let i= 0; i < parseInt(frm.doc.custom_number_of_checks); i++)\n            frm.add_child('custom_check_list');\n        refresh_field('custom_check_list');\n    },\n    mode_of_payment: function(frm) {\n      frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                'doctype': 'Mode of Payment',\n                'name': frm.doc.mode_of_payment\n            },\n            callback: function(r) {\n                let t = r.message.type;\n                if(t == \"Cash\") {\n                    frm.set_value(\"custom_check_list\", []);\n                    frm.set_df_property(\"checks_info\", \"hidden\", 1);\n                    cur_frm.set_df_property(\"transaction_references\", \"hidden\", 1);\n                    frm.set_value(\"custom_mode_of_payment_per_check\", frm.doc.mode_of_payment);\n                } else {\n                    frm.set_value(\"custom_mode_of_payment_per_check\", \"\");\n                }\n            }\n      }) \n    },\n    before_save: function(frm) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                'doctype': 'Account',\n                'name': frm.doc.paid_from\n            },\n            callback: function(r) {\n                if(r.message && r.message.account_type === 'Bank') {\n                    let total_amount = 0;\n                    try {\n                        if(frm.doc.custom_check_list.length == 1) \n                            total_amount = parseFloat(frm.doc.custom_check_list[0].amount);\n                        else \n                            total_amount = frm.doc.custom_check_list.reduce((a, b) => \n                                                parseFloat(a.amount) + parseFloat(b.amount));\n                    } catch(e) {}\n                \n                    if(frm.doc.cheque_status === \"Open\" && total_amount !== parseFloat(frm.doc.paid_amount))\n                        frappe.throw(\"Check the total cheque amount\");         \n                }\n            }\n        });\n    },\n    after_cancel: function(frm) {\n        try {\n            frm.doc.custom_check_list.map(check => frappe.db.delete_doc(\"Check\", check.check_no));\n        } catch(e) {}\n    },\n    onload: function(frm) {\n        let invoice = '';\n        try {\n                invoice = frm.doc.references[0].reference_name;\n        }\n        catch(err) {}\n\n        if(frm.doc.to_mode_of_payment) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    'doctype': 'Mode of Payment',\n                    'name': frm.doc.to_mode_of_payment\n                },\n                callback: function(r) {\n                    frappe.model.set_value(\"Payment Entry\", frm.doc.name, \"paid_to\", r.message.accounts[0].default_account);\n                }\n            });\n        }\n            \n\n        \n        if(invoice){\n            if (frm.doc.custom_check_list  && frm.doc.custom_check_list.length === 0 &&\n                frm.doc.references[0].reference_doctype == 'Sales Invoice'){\n            frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                            'doctype': 'Sales Invoice',\n                            'name': invoice\n                    },\n                     callback: function(r) {\n                        if (!r.exc) {\n                            if(r.message.payment_schedule_cur.length > 0)\n                                r = r.message.payment_schedule_cur;\n                            else \n                                r = r.message.payment_schedule;\n                                \n                            frm.doc.custom_check_list = [];\n                            get_mode_of_payment(frm.doc.mode_of_payment).then((resp) => {\n                                if(resp.message.type != \"Cash\") {\n                                    \n                                    r.forEach((check) => {\n                                        const entry = frm.add_child('custom_check_list');\n                                        entry.due_date = check.due_date;\n                                        entry.amount = check.invoice_amount;\n                                        refresh_field('custom_check_list');\n                                    });\n                                }\n                            });\n                        }\n                    }\n                });\n        }\n        }\n    },\n    custom_customer_bank: function(frm) {\n            const bank = frm.doc.custom_customer_bank;\n                    if(bank) {\n                            frm.doc.custom_check_list.forEach((check) => {\n                                    check.bank = bank;\n                            });\n                            refresh_field('custom_check_list');\n                    }\n    },\n        \n    custom_check_no: function(frm) {\n            let serial = parseInt(frm.doc.custom_check_no);\n            frm.doc.custom_check_list.forEach((check) => {\n                    if(serial) {\n                            check.check_no = serial;\n                            serial += 1;\n                    }\n                    else {\n                            check.check_no = '';\n                    }\n            });\n            refresh_field('custom_check_list');\n    },\n// before_submit:function(frm) {\n// \t\t// your code here\n// \t\t    frm.doc.custom_check_list.forEach(check => {\n// \t\t        if(!check.check_no) {\n// \t\t            frappe.throw(\"Check number required\");\n// \t\t        }\n// \t\t    })\n\t\t\n// \t\t\tvar doc = locals[frm.doc.doctype][frm.doc.name];\n// \t\t\tif (doc.custom_check_list)\n// \t\t\t{\n// \t\t   $.each(doc.custom_check_list, function(i, d) {\n\t\t       \n\t\t       \t\n\t\t       \n// \t\t     var check = {\n//                 'doctype': 'Check',\n//                 'check_no': cur_frm.doc.custom_check_list[i].check_no,\n//                 'due_date': cur_frm.doc.custom_check_list[i].due_date,\n//                 'bank': cur_frm.doc.custom_check_list[i].bank,\n//                 'amount': cur_frm.doc.custom_check_list[i].amount,\n//                 'status': 'Open',\n//                 'originl_mode_of_payment': cur_frm.doc.mode_of_payment,\n//                 'party_type': cur_frm.doc.party_type,\n//                 'party': cur_frm.doc.party,\n//                 'party_name': cur_frm.doc.party_name,\n//                 'paid_from': cur_frm.doc.paid_to,\n//                 'affected_account': cur_frm.doc.custom_check_list[i].originl_mode_of_payment\n//             }\n            \n         \n//               //      msgprint(cur_frm.doc.check_list[i].check_no);\n\n           \n//             console.log(check)\n//             frappe.db.insert(check).then(doc => {\n//                 console.log(\"Inserted\");\n//           // \tfrm.save_or_update();\n//             //\tfrappe.set_route(\"Form\", \"Sales Invoice\", doc.name)\n//             })\n\t\t       \n         \n//         });\n\n//             }\n// if ( cur_frm.doc.cheque_)\n\n// {\n//  //           msgprint(cur_frm.doc.cheque_status);\n//  // msgprint( cur_frm.doc.paid_to);\n  \n       \n    \n//         frappe.call({\n//         method: 'frappe.client.set_value',\n//         'args': {\n//           'doctype': 'Check',\n//           'name': cur_frm.doc.cheque_,\n//           fieldname: {\n//             'status':cur_frm.doc.cheque_status,\n//              'paid_from':cur_frm.doc.paid_to\n//           },\n//         }\n//         });\n//   // frappe.model.set_value(\"Check\", cur_frm.doc.cheque_, \"Status\", cur_frm.doc.cheque_status)\n//   //frappe.model.set_value(\"Check\", cur_frm.doc.cheque_, \"paid_from\", cur_frm.doc.paid_to)\n\n\n\n// }\n//  //     msgprint('Completed');\n\n   \n   \n   \n\n// }\n\n});\n\n\n\nfunction get_mode_of_payment(mode) {\n    return frappe.call({\n        method: 'frappe.client.get_value',\n        args: {\n            'doctype': 'Mode of Payment',\n            fieldname: ['type'],\n            filters: {'name': mode}\n        }\n    })\n}\n\n\n\nfrappe.ui.form.on('Payment Entry', {\n    get_glass_reference_ (frm) {\n    for(let i of frm.doc.references) {\n                        frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                        'doctype': 'Sales Invoice',\n                        'name': i.reference_name\n                },\n                 callback: function(r) {\n                    if (!r.exc) {\n                        i.glass_ref=r.message.glass_ref;\n                }\n            }\n                        });\n           cur_frm.refresh_field('references');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Check",
  "enabled": 0,
  "modified": "2024-03-14 14:45:42.363333",
  "module": null,
  "name": "Check app",
  "script": "frappe.ui.form.on('Check', {\ncollect_check:function(frm) {\n                check_status(frm, 'Collected');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.check_date\n\t\t\t\tjobOrder.cheque_status='Collected'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t            jobOrder.reference_date= frm.doc.check_date\n                            frappe.call({\n                            'method': 'frappe.client.get_value',\n                            'args': {\n                            'doctype': 'Bank',\n                            'filters': {'name': frm.doc.bank},\n                            'fieldname': ['custom_collect_account']\n                            \n                            },\n                            callback: function(r) {\n                            jobOrder.paid_to= r.message.custom_collect_account;\n                            \n                            }\n                            })\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n                            frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            \"doctype\": 'Check',\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \"status\" : \"Collected\",\n                            \"originl_mode_of_payment\": frm.doc.affected_account,\n                            \"affected_account\": \"\"\n                            },\n                            }\n                            });\n        \n\t\t\t\n\t},\ncheck_under_collection:function(frm) {\n                check_status(frm, 'Under Collection');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'Bank',\n                                'filters': {'name': frm.doc.bank},\n                                'fieldname': ['custom_under_collection_account']\n                                \n                                },\n                                callback: function(r) {\n                             jobOrder.paid_to= r.message.custom_under_collection_account;\n                                \n                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Under Collection'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Under Collection\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t},\ncheck_rejected:function(frm) {\n                check_status(frm, 'Rejected');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t                            frappe.call({\n                            'method': 'frappe.client.get_value',\n                            'args': {\n                            'doctype': 'Bank',\n                            'filters': {'name': frm.doc.bank},\n                            'fieldname': ['custom_reject_account']\n                            },\n                            callback: function(r) {\n                            jobOrder.paid_to= r.message.custom_reject_account;\n                            \n                            }\n                            })\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Rejected'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t                          frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Rejected\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n                            \n\t\t\t\n\t},\ncheck_returned:function(frm) {\n                check_status(frm, 'Returned');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\t\t\t\t\t                            frappe.call({\n                            'method': 'frappe.client.get_value',\n                            'args': {\n                            'doctype': 'Bank',\n                            'filters': {'name': frm.doc.bank},\n                            'fieldname': ['custom_returned_account']\n                        \n                            },\n                            callback: function(r) {\n                            jobOrder.paid_to= r.message.custom_returned_account;\n                            \n                            }\n                            })\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Returned'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t\t\t\t\t                          frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Returned\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n                            \n\t\t\t\n\t},\n\ncollect_cash:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'Under Collection');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'Bank',\n                                'filters': {'name': frm.doc.bank},\n                                'fieldname': ['custom_cach_account']\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_to= r.message.custom_cach_account;\n                                \n                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Under Collection'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Cash\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t},\n\t\nunder_pay:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'under_pay');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_to=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'Bank',\n                                'filters': {'name': frm.doc.bank},\n                                'fieldname': ['custom_reject_pay']\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_from= r.message.custom_reject_pay;\n                                \n                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='under_pay'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"under_pay\",\n                            \"paid_from\":jobOrder.paid_to\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t},\n\t\n\tcollected_pay:function(frm) {\n                check_status(frm, 'collected_pay');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_to=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'Bank',\n                                'filters': {'name': frm.doc.bank},\n                                'fieldname': ['custom_collected_pay']\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_from= r.message.custom_collected_pay;\n                                                                }\n                                })\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='collected_pay'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"collected_pay\",\n                            \"paid_from\": jobOrder.paid_to\n                            },\n                            }\n                            });\n\t}\n\t,\n\trefresh: function(frm) {\n      if(frm.doc.status === \"Returned\" || frm.doc.status === \"Rejected\" || frm.doc.status == \"Collected\") {\n          frm.set_df_property(\"collect_check\", \"hidden\", 1);\n          frm.set_df_property(\"check_rejected\", \"hidden\", 1);\n          frm.set_df_property(\"check_under_collection\", \"hidden\", 1);\n          frm.set_df_property(\"check_returned\", \"hidden\", 1);\n          frm.set_df_property(\"collect_cash\", \"hidden\", 1);\n      }\n  \n},\n})\n\nfunction check_status(frm, status) {\n    if(frm.doc.status === status)\n        frappe.throw(`The check is already ${status}`);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Generalization",
  "enabled": 0,
  "modified": "2023-12-18 11:48:00.208035",
  "module": null,
  "name": "generlization",
  "script": "frappe.ui.form.on('Generalization', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 0,
  "modified": "2024-02-27 11:21:00.198668",
  "module": null,
  "name": "Baio",
  "script": "frappe.ui.form.on('Material Request', {\n    material_request_type: function(frm) {\n        let material_request_type = frm.doc.material_request_type;\n\n        if (material_request_type === 'Trade Mission') {\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Item',\n                    filters: {\n                        custom_trade_mission: 1  // Filter items where 'custom_purchase' is active\n                    },\n                    fieldname: ['name', 'custom_trade_mission'] // Include both 'name' and 'custom_purchase'\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        var items = r.message;\n\n                        // Create a list of item names for filtering in the 'item_code' field\n                        var item_names = items.map(item => item.name);\n\n                        // Set options for the 'item_code' field in the child table\n                        frm.fields_dict['items'].grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\n                            return {\n                                filters: [\n                                    ['Item', 'name', 'in', item_names]\n                                ]\n                            };\n                        };\n                    }\n                }\n            });\n        }\n    }\n});\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-05-12 15:50:52.694091",
  "module": null,
  "name": "Customer Form",
  "script": "frappe.ui.form.on('Customer', {\n\tonload: function(frm) {\n\tvar customer_group = frm.doc.customer_group;\n\tconst committees_you_would_like_to_join  = frm.doc.custom_committees_you_would_like_to_join ;\n\tconst committees = committees_you_would_like_to_join.map(item => item.committees);\n\n// \tfrm.fields_dict[\"custom_crops_that_are_exported\"].grid.get_field(\"product\").get_query =\n//       function (doc, cdt, cdn) {\n//         var child = locals[cdt][cdn];\n//         var comitte = child.committees;\n//         return {\n//           filters: [\n//             [\"committe_code\", \"=\",comitte ],\n//           ],\n//         };\n//       }\n      \n\tif (customer_group === '\u062e\u062f\u0645\u064a'){\n// \t\tfrm.fields_dict[\"custom_committees_you_would_like_to_join\"].grid.get_field(\"committees\").get_query =\n    //   function (doc, cdt, cdn) {\n    //     var child = locals[cdt][cdn];\n    //     return {\n    //       filters: [\n    //         [\"type\", \"=\", customer_group ],\n    //       ],\n    //     };\n    //   };\n    //   frm.fields_dict[\"custom_crops_that_are_exported\"].grid.get_field(\"committees\").get_query =\n    //   function (doc, cdt, cdn) {\n    //     var child = locals[cdt][cdn];\n    //     return {\n    //       filters: [\n    //         [\"type\", \"=\", customer_group ],\n    //       ],\n    //     };\n    //   };\n    //   frm.fields_dict[\"custom_crops_that_the_company_packs_at_the_stations\"].grid.get_field(\"committee\").get_query =\n    //   function (doc, cdt, cdn) {\n    //     var child = locals[cdt][cdn];\n    //     return {\n    //       filters: [\n    //         [\"type\", \"=\", customer_group ],\n    //       ],\n    //     };\n    //   };\n      frm.fields_dict[\"custom_crops_that_the_company_packs_at_the_farm\"].grid.get_field(\"committee\").get_query =\n      function (doc, cdt, cdn) {\n        var child = locals[cdt][cdn];\n        return {\n          filters: [\n            [\"type\", \"=\", customer_group ],\n          ],\n        };\n      };\n\t\t}else {\n\t\t  //  frm.fields_dict[\"custom_committees_you_would_like_to_join\"].grid.get_field(\"committees\").get_query =\n    //   function (doc, cdt, cdn) {\n    //     var child = locals[cdt][cdn];\n    //     return {\n    //       filters: [\n    //         [\"type\", \"!=\", '\u062e\u062f\u0645\u064a' ],\n    //       ],\n    //     };\n    //   };\n    //      frm.fields_dict[\"custom_crops_that_are_exported\"].grid.get_field(\"committees\").get_query =\n    //   function (doc, cdt, cdn) {\n    //     var child = locals[cdt][cdn];\n    //     return {\n    //       filters: [\n    //          [\"name\", \"IN\", committees],\n    //       ],\n    //     };\n    //   };\n    //   frm.fields_dict[\"custom_crops_that_the_company_packs_at_the_stations\"].grid.get_field(\"committee\").get_query =\n    //   function (doc, cdt, cdn) {\n    //     var child = locals[cdt][cdn];\n    //     return {\n    //       filters: [\n    //          [\"name\", \"IN\", committees],\n    //       ],\n    //     };\n    //   };\n    //   frm.fields_dict[\"custom_farm_packing_products\"].grid.get_field(\"committee\").get_query =\n    //   function (doc, cdt, cdn) {\n    //     var child = locals[cdt][cdn];\n    //     return {\n    //       filters: [\n    //          [\"name\", \"IN\", committees],\n    //       ],\n    //     };\n    //   };\n\t\t\n\t\t}\n\t}\n    \n})\n\t\n\nfrappe.ui.form.on('Customer', {\n    onload: function(frm, cdt, cdn) {\n        \n        frm.fields_dict[\"custom_crops_that_are_exported\"].grid.get_field(\"item\").get_query =\n      function (doc, cdt, cdn) {\n        var child = locals[cdt][cdn];\n        var committees = child.committees;\n        \n        console.log(committees);\n        \n        return {\n          filters: [\n            [\"custom_committee\", \"=\", committees],\n          \n          ],\n        };\n      };\n      \n      \n      \n      frm.fields_dict[\"custom_crops_that_the_company_packs_at_the_stations\"].grid.get_field(\"item\").get_query =\n      function (doc, cdt, cdn) {\n        var child = locals[cdt][cdn];\n        var comitte = child.committee;\n        \n        console.log(comitte);\n        \n        return {\n          filters: [\n            [\"committe_code\", \"=\", comitte],\n          \n          ],\n        };\n      };\n      \n      frm.fields_dict[\"custom_farm_packing_products\"].grid.get_field(\"item\").get_query =\n      function (doc, cdt, cdn) {\n        var child = locals[cdt][cdn];\n        var committees = child.committee;\n        \n        console.log(committees);\n        \n        return {\n          filters: [\n            [\"committe_code\", \"=\", committees],\n          \n          ],\n        };\n      };\n        \n    }\n});\n\n\n\t\t\n\n\t\t\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-07 13:05:01.077354",
  "module": null,
  "name": "Sales Invocie",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    customer: function(frm) {\n        \n        if(frm.doc.custom_customer_membership_status == 'Active'){\n            frm.set_value(\"custom_membership_status\", '\u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629');\n             refresh_field('custom_membership_status');\n        }else{\n            frm.set_value(\"custom_membership_status\", '\u063a\u064a\u0631 \u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629');\n             refresh_field('custom_membership_status');\n            \n        }\n        \n        // let customer = frm.doc.customer;\n        // let due_date = frm.doc.posting_date;\n        // let name = frm.doc.name;\n        // if(customer){\n        //     var mina = checking(customer , due_date , name);\n        //     if(mina == 1){\n        //         frm.set_value('custom_membership_status', '\u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629');\n        //         refresh_field('custom_membership_status');\n        //     }else{\n        //         frm.set_value('custom_membership_status', '\u063a\u064a\u0631 \u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629');\n        //         refresh_field('custom_membership_status');\n        //     }\n\n        // }\n        \n        let custom_fr3oon = frm.doc.custom_fr3oon ;\n        if(custom_fr3oon){\n            frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query =\n                function (doc, cdt, cdn) {\n                    var child = locals[cdt][cdn];\n                    return {\n                        filters: [\n                            [\"variant_of\", \"=\",custom_fr3oon ],\n                            ],\n                        };\n                    };\n            }else if(custom_fr3oon == '\u0625\u0639\u0627\u062f\u0629 \u0637\u0628\u0627\u0639\u0629 \u0627\u0633\u062a\u0645\u0627\u0631\u0629 \u0627\u0644\u0645\u0633\u0627\u0646\u062f\u0629'){\n                frm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query =\n                function (doc, cdt, cdn) {\n                    var child = locals[cdt][cdn];\n                    return {\n                        filters: [\n                            [\"variant_of\", \"=\",custom_fr3oon ],\n                            ],\n                        };\n                    };\n                \n            }\n        \n    }\n})\n\n// function checking (customer , due_date , name){\n//     let temp\n//     frappe.call({\n//         async:false,\n//         method: \"barcode_aec.barcode.getValidation\",\n//         args: {\n//             'customer': customer,\n//             'due_date': due_date,\n//             'name': name\n//         },\n//         callback: function(r) {\n//             temp = r.message;\n//         }\n//     })\n//     return temp ;\n// }\n\n\n//////Original Code//////////////\n\nfrappe.ui.form.on('Sales Invoice', {\n    customer: function(frm) {\n        let custom_service_group = frm.doc.custom_service_group ;\n        if (custom_service_group){\n            frm.set_value('custom_service_group_link', custom_service_group);\n            let custom_service_group_link = frm.doc.custom_service_group_link;\n            if(custom_service_group_link){\n            const fr3o = get_service_group_link(custom_service_group_link);\n            console.log(fr3o);\n            const item_price = get_service_group_link_item_price(custom_service_group_link);\n            console.log(item_price);\n            \n            // let inc = getIncome(custom_service_group);\n            // console.log(inc);\n\n            cur_frm.clear_table(\"items\"); \n\n            for(let i of fr3o){\n                frm.add_child('items', {\n            'item_name': i['item_code'],\n            'qty': i['qty'],\n            'item_code': i['item_code'],\n            'rate':item_price.price_list_rate ,\n            'amount': parseFloat(i['qty']) * parseFloat(item_price.price_list_rate),\n            'uom':i['uom'],\n            'description':i['description'],\n            'income_account': i['income_account'],\n\n                });\n            }\n            refresh_field('items');\n            }\n            \n        }\n        \n    }\n});\n\n\n//////////////////////////////End of Original Code///////////////////////////////////////\n\n// frappe.ui.form.on('Sales Invoice', {\n//     customer: function (frm) {\n//     let custom_service_group = frm.doc.custom_service_group;\n//     if (custom_service_group) {\n//         frm.set_value('custom_service_group_link', custom_service_group);\n//         let custom_service_group_link = frm.doc.custom_service_group_link;\n//         if (custom_service_group_link) {\n//             const fr3o = get_service_group_link(custom_service_group_link);\n//             console.log(fr3o);\n//             const item_price = get_service_group_link_item_price(custom_service_group_link);\n//             console.log(item_price);\n\n//             // Call getIncome with a callback function\n//             getIncome(custom_service_group, function (income) {\n//                 console.log(income); // Log the income here to ensure it's correct\n//                 cur_frm.clear_table(\"items\");\n\n//                 for (let i of fr3o) {\n//                     frm.add_child('items', {\n//                         'item_name': i['item_code'],\n//                         'qty': i['qty'],\n//                         'item_code': i['item_code'],\n//                         'rate': item_price.price_list_rate,\n//                         'amount': parseFloat(i['qty']) * parseFloat(item_price.price_list_rate),\n//                         'uom': i['uom'],\n//                         'description': i['description'],\n//                         'income_account': income,\n//                     });\n//                 }\n//                 refresh_field('items');\n//             });\n//         }\n//     }\n// }\n    \n// })\n\n\n\n\nfunction get_service_group_link(group_link) {\n    var fr3o = [];\n     frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Grouped Item',\n                filters: { name:  group_link},\n                fieldname: 'grouped_item' \n            },\n            callback: function(r) {\n                fr3o = r.message.grouped_item;\n            }\n        });\n    return fr3o;\n}\n\n\nfunction getincomeaccount(group_link) {\n    var mina = [];\n     frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Grouped Item',\n                filters: { name:  group_link},\n                fieldname: 'income_account' \n            },\n            callback: function(r) {\n                mina = r.message.income_account;\n            }\n        });\n    return mina;\n}\n\n\n\n\n\nfunction get_service_group_link_item_price(item) {\n    var fr3onn = [];\n     frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_name':  item},\n            },\n            callback: function(r) {\n                fr3onn = r.message;\n            }\n        });\n    return fr3onn;\n}\n\n\n\nfrappe.ui.form.on('Sales Invoice', {\n    on_submit: function(frm) {\n        var items = [];\n        var print_serial = 0 ;\n        items = frm.doc.items;\n        for(let i = 0 ; i < items.length ; i++){\n            let temp = items[i];\n            print_serial  = temp['custom_last_printed_serial_'] + temp['qty'];\n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Item\",\n                    name: temp['item_code'],\n                fieldname:{\n                    \"custom_last_printed_serial_\":print_serial\n                    }\n                },\n            callback: function(response) {\n                }\n            });\n        }\n        \n    }\n});\n\n\nfrappe.ui.form.on('Sales Invoice', {\n    after_save: function(frm) {\n        var isConditionMet = frm.doc.items[0].item_code === \"\u0628\u0637\u0627\u0642\u0629 \u0645\u0633\u062a\u0644\u0632\u0645\u0627\u062a \u0623\u0646\u062a\u0627\u062c\";\n\n            var fieldName = 'custom_registration_number_in_commercial_register_attachment';\n            var fieldName1 = 'custom_registration_number_in_exporter_register_attachment';\n            frm.toggle_display(fieldName, isConditionMet);\n            frm.toggle_display(fieldName1, isConditionMet);\n    }\n})\n\nfrappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        if (frm.doc.status === 'Paid') {\n            frm.add_custom_button(__('Print'), function() {\n                var items = frm.doc.items;\n                let temp = items[0]['qty'];\n                let print_format = items[0]['custom_print_format'];\n                \n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,          \n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\" \n                );\n            });\n            let productionItem = frm.doc.items.find(item => item.item_code === '\u0628\u0637\u0627\u0642\u0629 \u0645\u0633\u062a\u0644\u0632\u0645\u0627\u062a \u0623\u0646\u062a\u0627\u062c');\n            \n            // let attach_img1 = frm.doc.custom_registration_number_in_commercial_register_attachment ;\n\n            \n            // let attach_img2 = frm.doc.custom_registration_number_in_exporter_register_attachment ; \n            \n            \n            if (productionItem) {\n                // if(attach_img1 && attach_img2){\n                \n                frm.add_custom_button(__('\u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0628\u0637\u0627\u0642\u0629 \u0627\u0644\u0645\u0633\u062a\u0644\u0632\u0645\u0627\u062a'), function() {\n                    let print_format2 = '\u0637\u0644\u0628 \u062a\u062c\u062f\u064a\u062f \u0628\u0637\u0627\u0642\u0629 \u0627\u0644\u0627\u062d\u062a\u064a\u0627\u062c\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0629';\n                    frappe.utils.print(\n                        frm.doctype,                \n                        frm.docname,            \n                        '\u0637\u0644\u0628 \u062a\u062c\u062f\u064a\u062f \u0628\u0637\u0627\u0642\u0629 \u0627\u0644\u0627\u062d\u062a\u064a\u0627\u062c\u0627\u062a \u0627\u0644\u062e\u0627\u0635\u0629',\n                        frm.doc.letter_head,          \n                        \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    );\n                    frm.set_value('custom_is_printed' , 1);\n                    // frm.refresh_field('custom_is_printed');\n                    // frm.save();\n                });\n                \n                }\n            // }\n        }\n    }\n});\n\n// frappe.ui.form.on('Sales Invoice', {\n//     on_submit: function(frm) {\n//         if (frm.doc.custom_service_group == \"\u0628\u0637\u0627\u0642\u0629 \u0645\u0633\u062a\u0644\u0632\u0645\u0627\u062a \u0623\u0646\u062a\u0627\u062c\"){\n//             frappe.call({\n//                 method: \"barcode_aec.barcode.files\",\n//                 args: {\n//                     name: frm.doc.name\n//                 },\n//                 callback: function(r) {\n//                     msgprint(\"Done Attached\");\n//                 }\n//             })\n            \n//             frappe.call({\n//                 method: \"frappe.client.set_value\",\n//                 args: {\n//                     doctype: \"Customer\",\n//                     name: frm.doc.customer ,\n//                 fieldname:{\n//                     \"custom_registration_number_in_commercial_register_attachment\":frm.doc.custom_registration_number_in_commercial_register_attachment,\n//                     \"custom_date_of_registration\": frm.doc.custom_start_date ,\n//                     \"custom_even_valid\": frm.doc.custom_end_date ,\n                    \n//                     \"custom_registration_number_in_exporter_register_attachment\": frm.doc.custom_registration_number_in_exporter_register_attachment ,\n//                     \"custom_date_of_registration2\": frm.doc.custom_starte_datee ,\n//                     \"custom_even_valid2\": frm.doc.custom_end_datee ,\n                    \n//                     \"custom_tax_card_number_attachment\": frm.doc.custom_tax_id ,\n//                     \"custom_date_registration4\": frm.doc.custom_start_date_of_tax ,\n//                     \"custom_even_valid4\": frm.doc.custom_end_date_of_tax ,\n//                 }\n//             },\n//             callback: function(response) {\n//                 console.log('Updated ');\n//                 msgprint('Updated');\n//                 }\n//             });\n//         }\n//     }\n// })\n\nfrappe.ui.form.on('Sales Invoice', {\n    customer: function(frm) {\n        var custom_product_bundle = frm.doc.custom_bundle_ ;\n        if(custom_product_bundle && frm.doc.year){\n        var items = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Product Bundle',\n                filters: { name: custom_product_bundle },\n                fieldname: 'items' \n            },\n            callback: function(r) {\n                items = r.message.items;\n            }\n        });\n        \n        var customer = frm.doc.customer;\n        var count = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel = 0;\n        let counter_of_ra2es = 0;\n        let counter_of_customer = 0;\n        let counter_of_products = 0\n        for ( let i = 0 ; i < count.length ; i++){\n            const temp = count[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended']  == 0){\n                counter_of_wakeel = counter_of_wakeel+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] ==0){\n                counter_of_ra2es = counter_of_ra2es+1;\n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] == 0){\n                counter_of_products = counter_of_products+1;\n            }\n            // if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n            //     counter_of_customer = counter_of_customer+1;\n            // }\n        }\n        \n            for (let i = 0 ; i < items.length ; i++){\n            items[i]['qty'] = 0;\n        }\n            \n\n        \n        for (let i = 0 ; i < items.length ; i++){\n             if ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"  || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629\") {\n                 items[i]['qty'] = counter_of_customer;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                 items[i]['qty'] = counter_of_ra2es;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                items[i]['qty'] = counter_of_wakeel;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                items[i]['qty'] = counter_of_products;\n            }\n        }\n        \n        const packed_items = frm.doc.packed_items;\n        var amount_of_wakeel = 0;\n        var amount_of_ra2es = 0;\n        var amount_of_customer = 0;\n        \n        cur_frm.clear_table(\"items\"); \n        console.log(items);\n        var customer_group = getCustomerGroup(frm);\n        var price_rule;\n        // var ge_rat_item_price = getRateItemPrice(\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" );\n        var total;\n        var ge_rate_item_price_for_ra2es = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n        var ge_rate_item_price_for_wakel = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n        var prod_item_price = getRateItemPriceForProd (\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" );\n        \n        if (customer_group === '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0642\u0644 \u0645\u0646 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647'){\n            // total = ge_rat_item_price;\n        }else{\n            // price_rule = getPriceRule(customer_group);\n            // total = ge_rat_item_price + price_rule;\n        }\n        \n        /////mycode////\n        \n        \n    \n    //      let com = frappe.call({\n    //         async:false,\n    //         method: 'frappe.client.get',\n    //         args: {\n    //             doctype: 'Customer',\n    //             filters: { name: frm.doc.customer },\n    //             fieldname: 'custom_committees_you_would_like_to_join' \n    //         },\n    //         callback: function(r) {\n    //           var committees = r.message.custom_committees_you_would_like_to_join;\n    //             var count = 0;\n    //     // Check each item in the committees array\n        // for (var i = 0; i < committees.length; i++) {\n        //     // If the item matches \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\", increment count\n        //     if (committees[i].salutation === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\") {\n        //         count++;\n        //     }\n        // }\n    //     // Now count variable holds the number of occurrences\n    //     console.log(\"Number of \u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629: \" + count);\n        \n        \n    //     let group = frm.doc.custom_customer_group;\n    //  let price = getRateItemPrice2(group);\n    //  console.log(\"price\" + price);\n    //  console.log('count' + count);\n     \n    //  if(frm.doc.custom_customer_group == price.custom_member_categories){\n    //      console.log(price.item_name);\n    //      console.log(price.price_list_rate);\n    //      frm.add_child('items', {\n    //         'item_name': price.item_name,\n    //         'qty': count,\n    //         'item_code': price.item_code,\n    //         'rate':price.price_list_rate,\n    //         'amount': parseFloat(count) * price.price_list_rate,\n    //         'uom':'Nos',\n    //         'description':'test',\n    //         'income_account': \"4110 - Sales - AEC\",\n\n    //         });\n      \n        \n        \n        /////end/////\n        \n        \n\n        \n        for (let i = 0 ; i < items.length ; i++){\n        let item = items[i];\n        //  if (item['qty'] != 0 && ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code']) === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n        // frm.add_child('items', {\n        //     'item_name': item['item_code'],\n        //     'qty': item['qty'],\n        //     'item_code': item['item_code'],\n        //     'rate':total,\n        //     'amount': parseFloat(item['qty']) * total,\n        //     'uom':item['uom'],\n        //     'description':item['description'],\n        //     'income_account': \"4110 - Sales - AEC\",\n\n        //     });\n        //  }\n         if ( item['qty'] != 0 &&  ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            'rate':ge_rate_item_price_for_ra2es,\n            'amount': parseFloat(item['qty']) * ge_rate_item_price_for_ra2es,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"4113 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n         if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            'rate':ge_rate_item_price_for_wakel,\n            'amount': parseFloat(item['qty']) *ge_rate_item_price_for_wakel,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"\u0627\u0634\u062a\u0631\u0627\u0643 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n         ///New///\n        if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            'rate':prod_item_price,\n            'amount': parseFloat(item['qty']) * prod_item_price,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n        refresh_field('items');\n        }\n        \n       var committees = get_committees(frm.doc.customer);\n\n        var committees_you_would_like_to_join = committees.custom_committees_you_would_like_to_join;\n        var log = committees.volume_of_member_exports_for_three_years ; \n\n        cur_frm.clear_table('custom_committees_customer_joined_');\n        cur_frm.clear_table('custom_log');\n\n        for (let z of committees_you_would_like_to_join) {\n            var row = frappe.model.add_child(cur_frm.doc, 'custom_committees_customer_joined_');\n            row.committees = z.committees;\n            row.salutation = z.salutation;\n        }\n        \n        for (let m of log) {\n            var f = frappe.model.add_child(cur_frm.doc, 'custom_log');\n            f.season = m.season;\n            f.season_name = m.season_name;\n            f.value = m.value;\n            f.total_amount_in_usd = m.total_amount_in_usd ; \n            f.quantity_in_tons = m.quantity_in_tons ; \n        }\n        \n        cur_frm.refresh_field('custom_committees_customer_joined_');\n        cur_frm.refresh_field('custom_log');\n        }\n        \n    }\n});\n\n\n\nfunction get_committees(customer){\n    var temp;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                name: customer,\n            },\n            callback: function(r) {\n                temp = r.message;\n            }\n        });\n        return temp ;\n}\nfunction getCustomerGroup(frm){\n    var temp;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: frm.doc.customer },\n                fieldname: 'customer_group' \n            },\n            callback: function(r) {\n                temp = r.message.customer_group;\n            }\n        });\n        if(temp){\n            return temp;\n        } else {\n            console.log(\"HI\");\n        }\n}\n\nfunction getPriceRule(customer_group){\n    var temp1;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Pricing Rule',\n                filters: { 'customer_group': customer_group },\n                fieldname: 'margin_rate_or_amount' \n            },\n            callback: function(r) {\n                temp1 = r.message.margin_rate_or_amount;\n            }\n        });\n        return temp1;\n}\n\nfunction getRateItemPrice(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfunction getRateItemPriceForRa2es(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfunction getRateItemPriceForWakel(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\nfunction getRateItemPriceForProd(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n// frappe.ui.form.on('Sales Invoice', {\n//     before_save: function(frm) {\n//         let custom_product_bundle = frm.doc.custom_bundle_ ;\n//         if (custom_product_bundle){\n//             console.log(\"Continue\");\n//         }\n//         else\n//             {\n//             frappe.call({\n//                 method: \"barcode_aec.barcode.getValidation2\",\n//                 args: {\n//                     'customer': frm.doc.customer,\n//                     'due_date': frm.doc.due_date,\n//                 },\n//                 callback: function(r) {\n//                     const invoices = r.message ; \n//                     let had_bundle = 0\n//                     let printed_before = 0\n//                     for (let invoice of invoices){\n//                         if (invoice.custom_annual_fees === 1 && invoice.status == \"Paid\"){\n//                             had_bundle = 1 ;\n                            \n//                         }\n//                         if (invoice.item_code == '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a' && invoice.status == \"Paid\"){\n//                             printed_before = 1\n//                         }\n//                     }\n//                     if (had_bundle == 0){\n//                         msgprint(\"\u0628\u0631\u062c\u0627\u0621 \u062f\u0641\u0639 \u0627\u0644\u0627\u0634\u062a\u0631\u0627\u0643\");\n//                         frappe.validated = false ;\n//                     }\n//                     // if (printed_before == 1){\n//                     //     msgprint(\"\u062a\u0645\u062a \u0627\u0644\u0637\u0628\u0627\u0639\u0647 \u0645\u0624\u062e\u0631\u0622\");\n//                     //     frappe.validated = false ;\n//                     // }\n                \n//                 }\n//             })\n//         }\n//     }\n// })\n\nfunction getReason(customer){\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Customer',\n                name: customer,\n                fieldname: 'custom_reason_for_susbending' \n            },\n            callback: function(r) {\n                var message = r.message;\n            \n            }\n        });\n}\n\n\n\n\n// function getRateItemPrice2(group){\n//     var memo;\n//     frappe.call({\n//             async:false,\n//             method: 'frappe.client.get',\n//             args: {\n//                 doctype: 'Item Price',\n//                 filters: { \n//                     'custom_member_categories': group,\n//                 },\n//                 fieldname: 'price_list_rate' \n//             },\n//             callback: function(r) {\n//                 memo = r.message;\n//             }\n//         });\n//         return memo;\n// }\n\n\n\nfunction getIncome(group){\n        var income_data;\n      frappe.call({\n            method: 'frappe.client.get',\n            args: {\n            doctype: 'Item',\n            name: group,\n            fieldname: 'item_defaults'\n            \n    },\n    callback: function(r) {\n        console.log(r.message.item_defaults[0]['income_account']);\n        income_data = r.message.item_defaults[0]['income_account'];\n        \n        \n    }\n\n});\nreturn income_data;\n    \n    \n    \n    \n}\n\n// function getIncome(group, callback) {\n//     frappe.call({\n//         method: 'frappe.client.get',\n//         args: {\n//             doctype: 'Item',\n//             name: group,\n//             fieldname: 'item_defaults'\n//         },\n//         callback: function (r) {\n//             var income_data = r.message.item_defaults[0]['income_account'];\n//             callback(income_data); // Call the callback function with the income_data\n//         }\n//     });\n// }\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-05-08 08:26:07.673812",
  "module": null,
  "name": "Customer",
  "script": "frappe.listview_settings['Customer'] = {\n    refresh: function(listview) {\n        // listview.page.add_inner_button('Update Members ', function() {\n        //     // the_main_function();\n        //     frappe.call({\n        //         async:false,\n        //         method: 'barcode_aec.improved5.functiongdidaa',\n        //         args: {\n        //     },\n        //     callback: function(r) {\n        //             msgprint(\"Updated\");\n        //         }\n        //     });\n           \n        // });\n    }\n};\n\nfrappe.ui.form.on('Customer', {\n    onload: function (frm) {\n        frm.trigger('validate_event_dates');\n        if (!frm.doc.__islocal) {\n            frm.save();\n        }\n    },\n\n    validate_event_dates: function (frm) {\n        var today = new Date();\n        var year = today.getFullYear();\n        var month = today.getMonth() + 1; \n        var day = today.getDate();\n        var currentDate = year + '-' + (month < 10 ? '0' : '') + month + '-' + (day < 10 ? '0' : '') + day;\n        console.log('Today is: ' + currentDate);\n        var eventField1 = frm.doc.custom_even_valid;\n        var eventField2 = frm.doc.custom_even_valid2;\n        var eventField3 = frm.doc.custom_even_valid3;\n        var eventField4 = frm.doc.custom_even_valid4;\n        if (!eventField1 || !eventField2 || !eventField3 || !eventField4) {\n            return;\n        }\n     \n        \n        \n        if (eventField1 < currentDate && eventField2 < currentDate && eventField3 < currentDate && eventField4 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Commercial register and Exporter Register and Investment letter and Tax ID were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Commercial register and Exporter Register and Investment letter and Tax ID were not valid\");\n        } else if (eventField1 < currentDate && eventField2 < currentDate && eventField3 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Commercial register and Exporter Register and Investment letter  were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Commercial register and Exporter Register and Investment letter  were not valid\");\n        } else if (eventField1 < currentDate && eventField2 < currentDate && eventField4 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Commercial register and Exporter Register and Tax ID  were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Commercial register and Exporter Register and Tax ID  were not valid\");\n        } else if (eventField1 < currentDate && eventField3 < currentDate && eventField4 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Commercial register and  Investment letter and Tax ID  were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Commercial register and  Investment letter and Tax ID  were not valid\");\n        } else if (eventField2 < currentDate && eventField3 < currentDate && eventField4 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Exporter Register and Investment letter and Tax ID  were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Exporter Register and Investment letter and Tax ID  were not valid\");\n        } else if (eventField1 < currentDate && eventField2 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Commercial register and Exporter Register   were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Commercial register and Exporter Register   were not valid\");\n        } else if (eventField1 < currentDate && eventField3 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Commercial register and Investment letter  were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');  \n            msgprint(\"Commercial register and Investment letter  were not valid\");\n        } else if (eventField1 < currentDate && eventField4 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Commercial register and Tax ID  were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Commercial register and Tax ID  were not valid\");\n        } else if (eventField2 < currentDate && eventField3 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Exporter Register and Investment letter  were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Exporter Register and Investment letter  were not valid\");\n        } else if (eventField2 < currentDate && eventField4 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Exporter Register and Tax ID  were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Exporter Register and Tax ID  were not valid\");\n        } else if (eventField3 < currentDate && eventField4 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Investment letter and Tax ID were not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending'); \n            msgprint(\"Investment letter and Tax ID were not valid\");\n        } else if (eventField1 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Commercial register was not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Commercial register was not valid\");\n        } else if (eventField2 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Exporter Register was not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Exporter Register was not valid\");\n        } else if (eventField3 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Investment letter was not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Investment letter was not valid\");\n        } else if (eventField4 < currentDate) {\n            frm.set_value('custom_customer_status', 'Suspended');\n            frm.set_value('custom_reason_for_susbending', 'Tax ID was not valid');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending');\n            msgprint(\"Tax ID was not valid\");\n        } else {\n            frm.set_value('custom_customer_status', 'Active');\n            frm.set_value('custom_reason_for_susbending', '');\n            frm.refresh_field('custom_customer_status');\n            frm.refresh_field('custom_reason_for_susbending')\n            msgprint(__(\"All Membership Documents Are Valid\"))\n        }\n    }\n});\n\n\nfunction the_main_function() {\n    var volume_of_member_exports_last_year = get_hash(get_volume_of_member_exports_last_year());\n    var volume_of_member_exports_two_years = get_hash(get_volume_of_member_exports_last_two_years());\n    var volume_of_member_exports_three_years = get_hash(get_volume_of_member_exports_last_three_years());\n    var all_customer = get_all_customer();\n    var customer_group = get_customer_group();\n\n    var resultArrays = [volume_of_member_exports_last_year, volume_of_member_exports_two_years, volume_of_member_exports_three_years];\n\n    for (let i = 0; i < all_customer.length; i++) {\n        let memo = all_customer[i].tax_id;\n        let foundInResultArray = false;\n\n        for (let resultArray of resultArrays) {\n            let result = resultArray.find(item => item.tax__number === memo);\n\n            if (result) {\n                foundInResultArray = true;\n                updateCustomer(result, all_customer[i], customer_group);\n                break;\n            }\n        }\n    }\n    msgprint(\"Updated\");\n}\n\nfunction updateCustomer(result, customer, customer_group) {\n    for (let memo3 of customer_group) {\n        if (result['total_amount'] > memo3.custom_from && result['total_amount'] <= memo3.custom_to && memo3.customer_group_name != '\u062e\u062f\u0645\u064a') {\n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Customer\",\n                    name: customer.name,\n                    fieldname: {\n                        \"customer_group\": memo3.customer_group_name,\n                        \"custom_volume_of__exports\": result['total_amount']\n                    }\n                },\n                callback: function(response) {\n                    console.log('Updated');\n                }\n            });\n            break;\n        }\n    }\n}\n\n// function the_main_function() {\n    \n//     var volume_of_member_exports_last_year = [];\n//     var volume_of_member_exports_two_years = [];\n//     var volume_of_member_exports_three_years = [];\n//     var all_customer = [];\n//     var customer_group = [];\n//     volume_of_member_exports_last_year = get_volume_of_member_exports_last_year();\n//     volume_of_member_exports_two_years = get_volume_of_member_exports_last_two_years();\n//     volume_of_member_exports_three_years = get_volume_of_member_exports_last_three_years();\n//     all_customer = get_all_customer();\n//     customer_group = get_customer_group();\n//     const resultArray1 = get_hash(volume_of_member_exports_last_year);\n//     const resultArray2 = get_hash(volume_of_member_exports_two_years);\n//     const resultArray3 = get_hash(volume_of_member_exports_three_years);\n    \n\n    \n//     for (let i = 0 ; i<all_customer.length;i++){\n//         let memo = all_customer[i].tax_id;\n//         for( let j = 0 ; j<resultArray1.length;j++){\n//             let memo2 = resultArray1[j].tax__number;\n//             if(memo == memo2){\n//                 for(let z = 0 ; z < customer_group.length ; z++){\n//                     let memo3 = customer_group[z];\n//                     if(resultArray1[j]['total_amount'] > memo3.custom_from && resultArray1[j]['total_amount'] <= memo3.custom_to){\n//                         console.log(memo3.customer_group_name);\n//                         console.log(all_customer[i].name);\n//                         console.log(resultArray1[j]['total_amount']);\n//                         if (memo3.customer_group_name != '\u062e\u062f\u0645\u064a'){\n//                         frappe.call({\n//                             method: \"frappe.client.set_value\",\n//                             args: {\n//                                 doctype: \"Customer\",\n//                                 name: all_customer[i].name,\n//                                 fieldname:{\n//                                     \"customer_group\":memo3.customer_group_name,\n//                                     \"custom_volume_of__exports\":resultArray1[j]['total_amount']\n//                                 }\n//                             },\n//                             callback: function(response) {\n//                                 console.log('Updated ');\n                               \n                            \n//         }\n//     });\n//                         }\n//         }\n//             }\n            \n//         }\n//     }\n    \n// }\n// msgprint(\"Updated\");\n\n\n// }\n\n\n\n\n\n\nfunction get_hash(temp1){\n    const resultMap = new Map();\n\n    temp1.forEach(item => {\n        const taxNumber = item.tax__number;\n        const amount = item.total_amount_in_egp;\n        const amount_in_usd = item.total_amount_in_usd;\n\n         if (resultMap.has(taxNumber)) {\n            resultMap.set(taxNumber, resultMap.get(taxNumber) + amount);\n        } else {\n            resultMap.set(taxNumber, amount);\n        }\n    });\n    const resultArray = Array.from(resultMap.entries()).map(([taxNumber, totalAmount]) => ({\n        tax__number: taxNumber,\n        total_amount: totalAmount,\n    }));\n    return resultArray;\n}\n\n\nfunction get_customer_group(){\n    var new_arr = [];\n    frappe.call({\n        async: false,\n        method: \"frappe.client.get_list\",\n        args: {\n            doctype: 'Customer Group',\n            },\n            callback: function(r) {\n                temp = r.message;\n            },\n        });\n    for (let i = 0 ; i < temp.length ; i++){\n        frappe.call({\n            async: false,\n            method: \"frappe.client.get\",\n            args: {\n                doctype: 'Customer Group',\n                name:temp[i]['name'],\n\n            },\n            callback: function(r) {\n                arr = r.message;\n                new_arr.push(arr);\n            },\n        });\n        }\n        return new_arr;\n    \n    \n}\n\n\n\nfunction get_volume_of_member_exports_last_year() {\n    var temp ;\n    var arr ;\n    var new_arr = [];\n    const today = new Date();\n    const firstDate = new Date(today.getFullYear(), 0, 1); \n    const formatDate = (date) => {\n        const year = date.getFullYear()-1;\n       \n        return `${year}`;\n    };\n    \n    baio =  parseInt(formatDate(today));\n    console.log(baio);\n        frappe.call({\n            async: false,\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: 'Volume Of Member Exports',\n                'filters':{\n                    'season':baio\n                }\n            },\n            callback: function(r) {\n                temp = r.message;\n            },\n        });\n        for (let i = 0 ; i < temp.length ; i++){\n            frappe.call({\n            async: false,\n            method: \"frappe.client.get\",\n            args: {\n                doctype: 'Volume Of Member Exports',\n                name:temp[i]['name'],\n\n            },\n            callback: function(r) {\n                arr = r.message;\n                new_arr.push(arr);\n            },\n        });\n        }\n         console.log(new_arr);\n        return new_arr;\n        \n    }\n    \nfunction get_volume_of_member_exports_last_two_years() {\n    var temp ;\n    var arr ;\n    var new_arr = [];\n    const today = new Date();\n    const firstDate = new Date(today.getFullYear(), 0, 1); \n    const formatDate = (date) => {\n        const year = date.getFullYear()-2;\n       \n        return `${year}`;\n    };\n    \n    baio =  parseInt(formatDate(today));\n    console.log(baio);\n        frappe.call({\n            async: false,\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: 'Volume Of Member Exports',\n                'filters':{\n                    'season':baio\n                }\n            },\n            callback: function(r) {\n                temp = r.message;\n            },\n        });\n        for (let i = 0 ; i < temp.length ; i++){\n            frappe.call({\n            async: false,\n            method: \"frappe.client.get\",\n            args: {\n                doctype: 'Volume Of Member Exports',\n                name:temp[i]['name'],\n\n            },\n            callback: function(r) {\n                arr = r.message;\n                new_arr.push(arr);\n            },\n        });\n        }\n         console.log(new_arr);\n        return new_arr;\n        \n    }  \n\nfunction get_volume_of_member_exports_last_three_years() {\n    var temp ;\n    var arr ;\n    var new_arr = [];\n    const today = new Date();\n    const firstDate = new Date(today.getFullYear(), 0, 1); \n    const formatDate = (date) => {\n        const year = date.getFullYear()-3;\n       \n        return `${year}`;\n    };\n    \n    baio =  parseInt(formatDate(today));\n    console.log(baio);\n        frappe.call({\n            async: false,\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: 'Volume Of Member Exports',\n                'filters':{\n                    'season':baio\n                }\n            },\n            callback: function(r) {\n                temp = r.message;\n            },\n        });\n        for (let i = 0 ; i < temp.length ; i++){\n            frappe.call({\n            async: false,\n            method: \"frappe.client.get\",\n            args: {\n                doctype: 'Volume Of Member Exports',\n                name:temp[i]['name'],\n\n            },\n            callback: function(r) {\n                arr = r.message;\n                new_arr.push(arr);\n            },\n        });\n        }\n         console.log(new_arr);\n        return new_arr;\n        \n    }    \n    \n\nfunction get_all_customer() {\n    var temp = [];\n    frappe.call({\n        async:false,\n        method: \"barcode_aec.barcode.get_all_customer\",\n        args:{\n            \n        },\n        callback: function(r){\n            temp = r.message ; \n        }\n    })\n    return temp ; \n    // var temp ;\n    // var arr ;\n    // var new_arr = []; \n    // frappe.call({\n    //         async: false,\n    //         method: \"frappe.client.get_list\",\n    //         args: {\n    //             doctype: 'Customer',\n    //         },\n    //         callback: function(r) {\n    //             temp = r.message;\n    //         },\n    //     });\n    //     for (let i = 0 ; i < temp.length ; i++){\n    //         frappe.call({\n    //         async: false,\n    //         method: \"frappe.client.get\",\n    //         args: {\n    //             doctype: 'Customer',\n    //             name:temp[i]['name'],\n\n    //         },\n    //         callback: function(r) {\n    //             arr = r.message;\n    //             new_arr.push(arr);\n    //         },\n    //     });\n    //     }\n    //     return new_arr;\n        \n    }\n\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget",
  "enabled": 0,
  "modified": "2024-02-25 11:51:49.890571",
  "module": null,
  "name": "Budget New",
  "script": "frappe.ui.form.on('Budget', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('\u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u064a \u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0645\u0648\u0627\u0632\u0646\u0629 \u0627\u0644\u062a\u0642\u062f\u064a\u0631\u064a\u0629'), function() {\n            let fiscalyear = frm.doc.fiscal_year.split('-')[0];\n            frappe.call({\n                method: 'barcode_aec.barcode.get_material_request_data',\n                args: {\n                    cost_center: frm.doc.cost_center,\n                    transaction_year: fiscalyear,\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        const baio = r.message;\n                        console.log(baio);\n                        frm.clear_table('accounts');\n                        for (let i of baio) {\n                            frm.add_child('accounts', {\n                                'account': i.expense_account,\n                                'budget_amount': i.total_amount\n                            });\n                        }\n                        frm.refresh_field('accounts');\n                    }\n                }\n            });\n        });\n    }\n});\n// frappe.ui.form.on('Budget', {\n//     refresh: function(frm) {\n//         frm.add_custom_button(__('Get Material Request Data'), function() {\n//             frappe.call({\n//                 method: 'barcode_aec.barcode.get_material_request_data',\n//                 args: {\n//                     cost_center: frm.doc.cost_center,\n//                     fiscal_year_start_date: frm.doc.fiscal_year ? frm.doc.fiscal_year.start_date : null,\n//                     fiscal_year_end_date: frm.doc.fiscal_year ? frm.doc.fiscal_year.end_date : null,\n//                 },\n//                 callback: function(r) {\n//                     if (r.message) {\n//                         const baio = r.message;\n//                         console.log(baio);\n//                         frm.clear_table('accounts');\n                        \n//                         for (let i of baio) {\n//                             if (i.transaction_year >= frm.doc.fiscal_year.year_start_date && \n//                                 i.transaction_year <= frm.doc.fiscal_year.year_end_date) {\n\n//                                 frm.add_child('accounts', {\n//                                     'account': i.expense_account,\n//                                     'budget_amount': i.total_amount\n//                                 });\n//                             }\n//                         }\n\n//                     frm.refresh_field('accounts');\n//                     }\n//                 }\n//             });\n//         });\n//     }\n// });\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Treasury bills",
  "enabled": 0,
  "modified": "2024-03-18 14:50:12.951137",
  "module": null,
  "name": "Treasury bills",
  "script": "frappe.ui.form.on('Treasury bills', {\n    posting_date: function(frm) {\n            if (frm.doc.treasury_bills === 'New tender') {\n                var postingDate = frm.doc.posting_date;\n                if (!isThursdayOrSunday(postingDate)) {\n                    frappe.msgprint(__('Treasury can only occur on Thursdays or Sundays.'));\n                    frm.set_value('posting_date', '');\n                    frm.refresh_field('posting_date');\n                }\n            }\n        },\n\n    suggested_purchasing_value: function(frm) {\n            if (frm.doc.treasury_bills === 'New tender') {\n                var postingDate = frm.doc.posting_date;\n                if (isThursdayOrSunday(postingDate)) {\n                    calculate_treasury(frm);\n                } else {\n                    frappe.msgprint(__('Treasury can only occur on Thursdays or Sundays.'));\n                }\n            }\n        },\n        \n    suggested_purchase_price: function(frm) {\n           \n                \n            \n                    calculate_treasury(frm);\n                \n                    // frappe.msgprint(__('Treasury can only occur on Thursdays or Sundays.'));\n                \n            \n        },\n        \n        available_balance:function(frm){\n            \n            var available = frm.doc.available_balance;\n            var remaining = frm.doc.remaining_balance;\n            var purchase_value = frm.doc.purchasing_value;\n            \n            if(available){\n                \n                remaining = available - purchase_value;\n                \n                frm.set_value('remaining_balance', remaining);\n                \n            }\n            \n        },\n        \n        \n        purchase_date:function(frm){\n            \n            var duration = frm.doc.duration;\n            \n            if(frm.doc.purchase_date){\n                \n            var purchaseDate = new Date(frm.doc.purchase_date);\n\n        // Adding 182 days\n            purchaseDate.setDate(purchaseDate.getDate() + 182);\n\n        // Update the field in the form\n            frm.set_value('due_date', purchaseDate);\n                \n                \n                \n            }\n            \n        },\n\n    factories: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            var postingDate = frm.doc.posting_date;\n            if (isThursdayOrSunday(postingDate)) {\n                calculate_nominal_value(frm);\n            } else {\n                frappe.msgprint(__('Treasury can only occur on Thursdays or Sundays.'));\n            }\n        }\n    },\n\n    choice_nominal: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            var choiceNominal = frm.doc.choice_nominal;\n    \n            if (choiceNominal === 'Small') {\n                var smallNominalValue = frm.doc.small_nominal_value;\n                var factories = frm.doc.factories;\n                var purchaseValue = smallNominalValue / factories;\n    \n                frm.set_value('purchasing_value', purchaseValue);\n                frm.refresh_field('purchasing_value');\n            } else if (choiceNominal === 'Grand') {\n                var grandNominalValue = frm.doc.grand_nominal_value;\n                var factories = frm.doc.factories;\n                var purchaseValue = grandNominalValue / factories;\n    \n                frm.set_value('purchasing_value', purchaseValue);\n                frm.refresh_field('purchasing_value');\n            }\n            var nominalValue = frm.doc.nominal_value;\n            var currentPurchasingValue = frm.doc.purchasing_value;\n            var difference = nominalValue - currentPurchasingValue;\n            frm.set_value('return', difference);\n            var netProfit = difference * 0.8;\n            frm.set_value('net_profit', netProfit);\n            var availableBalance = frm.doc.available_balance;\n            var remainingBalance = availableBalance - currentPurchasingValue;\n            var tax = difference * 0.2;\n            frm.set_value('tax', tax);\n    \n            frm.set_value('remaining_balance', remainingBalance);\n    \n            frm.refresh_field('return');\n            frm.refresh_field('net_profit');\n            frm.refresh_field('remaining_balance');\n            frm.refresh_field('tax');\n        }\n    },\n\n    bidding_status: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            var biddingStatus = frm.doc.bidding_status;\n            var postingDate = frm.doc.posting_date;\n            if (biddingStatus === '\u0642\u064a\u062f \u0627\u0644\u062a\u0646\u0641\u064a\u0630') {\n                var postingDate = frm.doc.posting_date;\n                var firstTuesday = getFirstTuesday(postingDate);\n                frm.set_value('purchase_date', firstTuesday);\n                frm.refresh_field('purchase_date');\n            }\n            calculateDueDate(frm);\n        }\n    },\n    duration: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            calculateDueDate(frm);\n        }\n    },\n    bid_date: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            calculateDueDate1(frm);\n        }\n    },\n});\nfunction calculateDueDate(frm) {\n    if (frm.doc.treasury_bills === 'New tender') {\n        var purchaseDate = frm.doc.purchase_date;\n        var duration = frm.doc.duration;\n        \n        if (purchaseDate && duration) {\n            var dueDate = frappe.datetime.add_days(purchaseDate, duration);\n            frm.set_value('due_date', dueDate);\n            frm.refresh_field('due_date');\n        }\n    }\n}\n\nfunction calculateDueDate1(frm) {\n    if (frm.doc.treasury_bills === 'New tender') {\n        var bidDate = frm.doc.bid_date;\n        var duration = frm.doc.duration;\n        \n        if (bidDate && duration) {\n            var dueDate1 = frappe.datetime.add_days(bidDate, duration);\n            frm.set_value('due_date1', dueDate1);\n            frm.refresh_field('due_date1');\n        }\n    }\n}\n\n\nfunction getFirstTuesday(postingDate) {\n    var jsPostingDate = new Date(postingDate);\n    while (jsPostingDate.getDay() !== 2) {\n        jsPostingDate.setDate(jsPostingDate.getDate() + 1);\n    }\n    var resultDateString = jsPostingDate.toISOString().split('T')[0];\n    return resultDateString;\n}\n\nfunction calculate_treasury(frm) {\n    var suggested_purchasing_price = frm.doc.suggested_purchase_price / 100;\n    var duration = frm.doc.duration;\n    var factories = (suggested_purchasing_price * (duration / 365)) + 1;\n\n    frm.set_value('factories', factories);\n    frm.refresh_field('factories');\n    calculate_nominal_value(frm);\n}\n\nfunction calculate_nominal_value(frm) {\n    var suggested_purchasing_value = frm.doc.suggested_purchasing_value;\n    var factories = frm.doc.factories;\n    var small_nominal_value = 25000;\n    var grand_nominal_value = frm.doc.grand_nominal_value;\n\n    var nominal_value = suggested_purchasing_value * factories;\n\n    frm.set_value('nominal_value', nominal_value);\n    frm.refresh_field('nominal_value');\n\n    if (nominal_value <= 25000) {\n        small_nominal_value = 25000;\n        grand_nominal_value = 25000;\n    } else {\n        grand_nominal_value = Math.ceil(nominal_value / 25000) * 25000;\n    }\n\n    frm.set_value('small_nominal_value', small_nominal_value);\n    frm.refresh_field('small_nominal_value');\n\n    frm.set_value('grand_nominal_value', grand_nominal_value);\n    frm.refresh_field('grand_nominal_value');\n}\n\nfunction isThursdayOrSunday(postingDate) {\n    const jsDate = frappe.datetime.str_to_obj(postingDate);\n    return jsDate.getDay() === 4 || jsDate.getDay() === 0;\n}\n\n\nfrappe.ui.form.on('Treasury bills', {\n    on_submit: function (frm) {\n        if (frm.doc.docstatus === 1) {\n            Promise.all([\n                call_create_journal_entry(frm),\n                journalEntryDueDate1(frm),\n                journalEntryDueDate2(frm),\n                journalEntryDueDate3(frm),\n            ]).then(responses => {\n                const responseCreateEntry = responses[0];\n                const responseDueDate1 = responses[1];\n                const responseDueDate2 = responses[2];\n                const responseDueDate3 = responses[3];\n\n                frappe.msgprint(__('Response from create_journal_entry: {0}', [responseCreateEntry]));\n                frappe.msgprint(__('Response from journalEntryDueDate1: {0}', [responseDueDate1]));\n                frappe.msgprint(__('Response from journalEntryDueDate2: {0}', [responseDueDate2]));\n                frappe.msgprint(__('Response from journalEntryDueDate3: {0}', [responseDueDate3]));\n\n            });\n        }\n    }\n});\n\n\nfunction call_create_journal_entry(frm) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'barcode_aec.barcode.enqueue_create_journal_entry',\n            args: {\n                treasury_bills: frm.doc.name\n            },\n            callback: function (r) {\n                if (r.message) {\n                    frappe.msgprint(__('Journal Entry creation enqueued successfully.'));\n                    resolve(r.message);\n                } else if (r.exc) {\n                    frappe.msgprint(__('Error enqueuing Journal Entry creation.'));\n                    console.error(r.exc);\n                    reject(r.exc);\n                }\n            }\n        });\n    });\n}\n\nfunction journalEntryDueDate1(frm) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'barcode_aec.barcode.enqueue_journal_entry_due_date_1',\n            args: {\n                treasury_bills: frm.doc.name\n            },\n            callback: function (response) {\n                handleResponse(response, frm);\n                if (response.message) {\n                    resolve(response.message);\n                } else if (response.exc) {\n                    reject(response.exc);\n                }\n            }\n        });\n    });\n}\nfunction journalEntryDueDate2(frm) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'barcode_aec.barcode.enqueue_journal_entry_due_date_2',\n            args: {\n                treasury_bills: frm.doc.name\n            },\n            callback: function (response) {\n                handleResponse(response, frm);\n                if (response.message) {\n                    resolve(response.message);\n                } else if (response.exc) {\n                    reject(response.exc);\n                }\n            }\n        });\n    });\n}\nfunction journalEntryDueDate3(frm) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'barcode_aec.barcode.enqueue_journal_entry_due_date_3',\n            args: {\n                treasury_bills: frm.doc.name\n            },\n            callback: function (response) {\n                handleResponse(response, frm);\n                if (response.message) {\n                    resolve(response.message);\n                } else if (response.exc) {\n                    reject(response.exc);\n                }\n            }\n        });\n    });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-21 11:53:44.478330",
  "module": null,
  "name": "d",
  "script": "frappe.ui.form.on('Sales Invoice', {\n// \trefresh: function(frm) {\n// \t\tif(frm.doc.status === 'Paid' && frm.doc.items[0].item_code == \"\u0627\u0644\u0634\u0647\u0627\u062f\u0629 \u0627\u0644\u0632\u0631\u0627\u0639\u064a\u0629\"){\n// \t\t  //  let print_format = frm.doc.agriculture_certificatee;\n// \t\t  let print_format = '\u0627\u0644\u0634\u0647\u0627\u062f\u0629 \u0627\u0644\u0632\u0631\u0627\u0639\u064a\u0629 \u0625\u0646\u062c\u0644\u064a\u0632\u064a';\n// \t\t  //  if(print_format){\n// \t\t     frm.add_custom_button(__('\u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u0634\u0647\u0627\u062f\u0629 \u0627\u0644\u0632\u0631\u0627\u0639\u064a\u0629'), function() {\n//                 var items = frm.doc.items;\n//                 frappe.utils.print(\n//                     frm.doctype,                \n//                     frm.docname,            \n//                     print_format,  \n//                     frm.doc.letter_head\n                    \n//                 );\n// \t\t     });\n// \t\t  //  }\n\t\t   \n// \t\t}\n\n// \t}\n\t\n})\n\n\n\n\n\nfrappe.ui.form.on('Sales Invoice', {\n\trefresh: function(frm) {\n\t   // console.log(cur_frm.doc.docstatus);\n\t   // console.log(cur_frm.doc.status);\n\t\tif(frm.doc.docstatus === 0 && frm.doc.__islocal != 1){\n\t\t  //  let print_format = frm.doc.agriculture_certificatee;\n\t\t  \n\t\t  let print_format = '\u0637\u0644\u0628 \u0633\u062f\u0627\u062f \u0646\u0642\u062f\u064a';\n\t\t  //  if(print_format){\n\t\t     frm.add_custom_button(__('\u0637\u0644\u0628 \u0633\u062f\u0627\u062f \u0646\u0642\u062f\u064a'), function() {\n                // var items = frm.doc.items;\n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n                );\n\t\t     });\n\t\t  //  }\n\t\t   \n\t\t}\n\n\t}\n\t\n})\n\n\n\n\nfrappe.ui.form.on('Sales Invoice', {\n\trefresh: function(frm) {\n\t\tif(frm.doc.status === 'Paid'){\n\t\t  //  let print_format = frm.doc.agriculture_certificatee;\n\t\t  let print_format = frm.doc.items[0]['custom_print_format'];\n\t\t    if(frm.doc.items[0] === '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a'){\n\t\t     frm.add_custom_button(__('\u0637\u0628\u0627\u0639\u0629 \u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a'), function() {\n                var items = frm.doc.items;\n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n                );\n            console.log(\"before callback\");\n\t\t     frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Item',\n                        filters: { name: '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a' },\n                        fieldname: 'custom_khtab_lab_print_serial'\n                    },\n                    callback: function(response) {\n                        if (response && response.message) {\n                            var count = response.message.custom_khtab_lab_print_serial;\n                            console.log(count);\n                        }\n                    }\n                });\n\t\t     });\n\t\t     \n\t\t  //   console.log(\"before callback\");\n\t\t  //   frappe.call({\n    //                 method: 'frappe.client.get_value',\n    //                 args: {\n    //                     doctype: 'Item',\n    //                     filters: { name: '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a' },\n    //                     fieldname: 'custom_khtab_lab_print_serial'\n    //                 },\n    //                 callback: function(response) {\n    //                     if (response && response.message) {\n    //                         var count = response.message.custom_khtab_lab_print_serial;\n    //                         console.log(count);\n    //                     }\n    //                 }\n    //             });\n\t\t     \n\t\t     \n\t\t    }\n\t\t   \n\t\t}\n\n\t}\n\t\n})\n\n\n\n\n\n\n\nfrappe.ui.form.on('Sales Invoice', {\n\trefresh: function(frm) {\n\t\tif(frm.doc.status === 'Paid'){\n\t\t    let print_format = '\u0627\u064a\u0635\u0627\u0644 \u0627\u0633\u062a\u0644\u0627\u0645 \u0646\u0642\u062f\u0649';\n\t\t     frm.add_custom_button(__('\u0637\u0628\u0627\u0639\u0629 \u0625\u064a\u0635\u0627\u0644 \u0625\u0633\u062a\u0644\u0627\u0645 \u0646\u0642\u062f\u064a\u0629'), function() {\n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n                );\n\t\t     });\n\t\t    }\n\t\t   \n\n\t}\n\t\n});\n\n\n// frappe.ui.form.on('Sales Invoice', {\n// \trefresh: function(frm) {\n// \t\tif(frm.doc.status === 'Paid' && frm.doc.custom_service_group == '\u0628\u0637\u0627\u0642\u0629 \u0645\u0633\u062a\u0644\u0632\u0645\u0627\u062a \u0623\u0646\u062a\u0627\u062c'){\n// \t\t    let print_format = '\u062a\u0639\u0647\u062f \u0628\u0637\u0627\u0642\u0629 \u0627\u0644\u0627\u062d\u062a\u064a\u0627\u062c\u0627\u062a';\n// \t\t     frm.add_custom_button(__('\u0637\u0644\u0628 \u0628\u0637\u0627\u0642\u0629 \u0627\u0644\u0645\u0633\u062a\u0644\u0632\u0645\u0627\u062a'), function() {\n//                 frappe.utils.print(\n//                     frm.doctype,                \n//                     frm.docname,            \n//                     print_format,  \n//                     frm.doc.letter_head,\n//                     \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n//                 );\n// \t\t     });\n// \t\t    }\n\t\t   \n\n// \t}\n\t\n// })\n\n\nfrappe.ui.form.on('Sales Invoice', {\n    before_save: function(frm){\n        \n            // if(frm.doc.custom_customer_membership_status === 'Suspended'){\n            let reason = frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                name: frm.doc.customer,\n                fieldname: 'custom_reason_for_susbending' \n            },\n            callback: function(r) {\n                var message = r.message;\n                // console.log(message);\n                // console.log(r.message.custom_arabic);\n                // console.log(r.message.custom_is_allowed);\n                \n                if(frm.doc.custom_customer_membership_status == 'Suspended' && frm.doc.custom_service_group == '\u0628\u0637\u0627\u0642\u0629 \u0645\u0633\u062a\u0644\u0632\u0645\u0627\u062a \u0623\u0646\u062a\u0627\u062c'  && frm.doc.custom_membership_status == '\u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629' && r.message.custom_is_allowed == 1){\n                    console.log('\u064a\u0639\u0645 \u0639\u062f\u064a\u0647\u0627 \u0628\u0627\u0644\u0644\u0647 \u0639\u0644\u064a\u0643');\n                }\n                else if(frm.doc.custom_customer_membership_status == 'Active' || frm.doc.custom_customer_membership_status == 'Requested'  && frm.doc.custom_bundle_ !== null && frm.doc.custom_membership_status == '\u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629' || frm.doc.custom_bundle_ !== null && frm.doc.custom_membership_status == '\u063a\u064a\u0631 \u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629') {\n                    \n                    console.log('Done');\n                    \n                    \n                }\n                else{\n                     frappe.msgprint(r.message.custom_arabic, r.message.custom_reason_for_susbending);\n                    frappe.validated = false;  \n                }\n                //  msgprint(message.custom_reason_for_susbending);\n                // frappe.msgprint(r.message.custom_arabic);\n                // frappe.validated = false;\n\n\n            }\n        });\n        }\n        \n    // }\n\t\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-04-17 23:28:26.836331",
  "module": null,
  "name": "Meeting",
  "script": "frappe.ui.form.on('Meeting', {\n    committee: function(frm){\n        // var committee_member = frm.doc.committee_member;\n        if(frm.doc.committee){\n            \n     frappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getCustomers',\n    args: {\n        com: frm.doc.committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message);\n        frm.doc.committee_member = [];\n        \n        $.each(r.message, function(_i,e){\n            let child = frm.add_child(\"committee_member\");\n            child.member = e.customer_name;\n            child.status = e.customer_status;\n            child.email = e.custom_email;\n            child.name1 = e.ceo_name;\n        })\n        // frappe.msgprint(\"Selected\");\n        refresh_field(\"committee_member\");\n    }\n});\n\n\n//      frappe.call({\n//     async: false,\n//     method: 'frappe.client.get',\n//     args: {\n//         com: frm.doc.committee\n//     },\n//     callback: function (r) {\n        \n//         console.log(r.message);\n//         frm.doc.committee_member = [];\n        \n//         $.each(r.message, function(_i,e){\n//             let child = frm.add_child(\"committee_member\");\n//             child.member = e.customer_name;\n//             child.status = e.customer_status;\n//         })\n//         // frappe.msgprint(\"Selected\");\n//         refresh_field(\"committee_member\");\n//     }\n// });\n//             // var members = getMembers(frm.doc.committe);\n            // console.log(members);\n            \n            \n            \n        }\n        \n        \n        \n        \n    }\n\n\n\n\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-04-25 15:12:02.662644",
  "module": null,
  "name": "Meeting Buttons",
  "script": "frappe.ui.form.on('Meeting', {\n    refresh: function(frm) {\n        console.log(frm.doc.workflow_state)\n        \n        // var temp = 0;\n        // frappe.call({\n        //     method: 'frappe.client.get_list',\n        //     args: {\n        //         \"doctype\" : \"Minutes Of Meeting\",\n        //         \"filters\": {\n        //             'custom_meeting_reference': cur_frm.doc.name,\n        //         }\n                \n        //     },\n        //     callback: function(r) {\n               \n        //      console.log(r.message);\n        //      temp = r.message.length;\n        //     //  console.log(count);    \n        //     }\n        // });\n        \n        \n        \n        // console.log(\"temp\" + temp);\n        \n        \n        \n    var met;\n    get_count(frm.doc.name, function(result) {\n    met = result;\n    console.log(\"met\" + met);\n    });\n        \n    if ( frm.doc.workflow_state == \"Approved From Deputy\"){\n        frm.add_custom_button(__('Meeting Minutes'), function() {\n            \n           if(met === 0){ \n            frappe.call({\n                method: 'barcode_aec.barcode.create_fetch',\n                args: {\n                    doc_name: frm.doc.name \n                },\n                callback: function(response) {\n                    if (response.message) {\n                        frappe.msgprint('Minutes Of Meeting created successfully: ' + response.message);\n                        console.log(response.message);\n                        frm.remove_custom_button('Meeting Minutes');\n                        frappe.set_route('Form', 'Minutes Of Meeting', response.message);\n                    } else {\n                        frappe.msgprint('Error creating Minutes Of Meeting');\n                    }\n                }\n            });\n           }else{\n               \n               frappe.throw(\"There is Minutes Of Meeting has been created before for this Meeting\");\n               \n           } \n        });\n    }\n    }\n});\n\n// frappe.ui.form.on('Meeting', {\n//     location: function(frm) {\n//         frappe.call({\n//             method: 'barcode_aec.barcode.check_location_exists',\n//             args: {\n//                 location: frm.doc.location\n//             },\n//             callback: function(response) {\n//                 if (response.message && response.message.exists) {\n//                     frappe.msgprint(__('Location already exists in other documents. Please choose a different location.'));\n//                     frm.set_value('location', '');\n//                     frm.refresh_field('location');\n//                 }\n//             }\n//         });\n//     }\n// });\n\n// frappe.ui.form.on('Meeting', {\n//     validate: function(frm) {\n//         var location = frm.doc.location;\n//         var date = frm.doc.date;\n//         var from_time = frm.doc.from_time;\n//         var to_time = frm.doc.to_time;\n\n//         frappe.call({\n//             method: 'barcode_aec.barcode.check_date_exists', \n//             args: {\n//                 date: date,\n//                 location: location,\n//                 from_time: from_time,\n//                 to_time: to_time\n//             },\n//             callback: function(response) {\n//                 var exists = response.message.exists;\n//                 var message = response.message.message;\n//                 var conflicting_meetings = response.message.conflicting_meetings;\n\n//                 if (exists) {\n//                     frappe.msgprint(message);\n\n//                     if (conflicting_meetings) {\n//                         var details = \"Conflicting Meetings:\\n\";\n//                         for (var i = 0; i < conflicting_meetings.length; i++) {\n//                             details += `${conflicting_meetings[i].name}: ${conflicting_meetings[i].from_time} to ${conflicting_meetings[i].to_time}\\n`;\n//                         }\n//                         frappe.msgprint(details);\n//                     }\n\n//                     frappe.validated = false;\n//                 }\n//             }\n//         });\n//     }\n// });\n\n\n\n// function get_count(doc_name){\n//     var temp;\n//     frappe.call({\n//             method: 'frappe.client.get_list',\n//             args: {\n//                 \"doctype\" : \"Minutes Of Meeting\",\n//                 \"filters\": {\n//                     'custom_meeting_reference': doc_name\n//                 },\n//                 // 'fields': ['name']\n//             },\n//             callback: function(r) {\n               \n//              console.log(r.message.length);\n//              temp = r.message.length;\n//              console.log('temp' + temp);\n//             //  console.log(count);    \n//             }\n//         });\n    \n//     return temp;\n    \n    \n// }\n\n\n\n\n\nfunction get_count(doc_name, callback) {\n    frappe.call({\n        method: 'frappe.client.get_list',\n        args: {\n            \"doctype\": \"Minutes Of Meeting\",\n            \"filters\": {\n                'custom_meeting_reference': doc_name\n            },\n        },\n        callback: function(r) {\n            var count = r.message.length;\n            callback(count);\n        }\n    });\n}\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 0,
  "modified": "2024-04-24 13:32:36.561347",
  "module": null,
  "name": "Count",
  "script": "frappe.ui.form.on('Committee', {\n\tafter_save:function(frm){\n\tfrappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getActiveMembers',\n    args: {\n        com: frm.doc.name_of_committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message[0].total_count);\n        var Active = r.message[0].total_count;\n        frm.set_value('total_active_members', Active);\n        // frm.doc.total_active_members = r.message.total_count;\n        \n    }\n});\n\t    \n\tfrappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getTotalMembers',\n    args: {\n        com: frm.doc.name_of_committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message[0].total_count);\n        var total = r.message[0].total_count;\n        frm.set_value('total_members', total);\n        // frm.doc.total_active_members = r.message.total_count;\n        \n    }\n});\n\n\tfrappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getInactiveMembers',\n    args: {\n        com: frm.doc.name_of_committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message[0].total_count);\n        var total = r.message[0].total_count;\n        frm.set_value('total_inactive_members', total);\n        // frm.doc.total_active_members = r.message.total_count;\n        \n    }\n});\n        frappe.call({\n            async: false,\n            method: 'barcode_aec.barcode.get_meeting_plan_count',\n            args: {\n                committee: frm.doc.name\n            },\n            callback: function(r) {\n                if (!r.exc) {\n                    console.log(r.message.count_by_committee);\n                    var total = r.message.count_by_committee[frm.doc.name] || 0;\n                    frm.set_value('annual_meeting', total);\n                    // frappe.msgprint('Meeting count updated successfully.');\n                } else {\n                    frappe.msgprint('Error calculating meeting count.');\n                }\n            }\n        });\n        frappe.call({\n            async: false,\n            method: 'barcode_aec.barcode.get_meeting_count',\n            args: {\n                committee1: frm.doc.name\n            },\n            callback: function(response) {\n                if (!response.exc) {\n                    var count = response.message.count_by_committee[frm.doc.name] || 0;\n                    frm.set_value('annual_meeting_per_year', count);\n                    // frappe.msgprint('Another field updated successfully.');\n                } else {\n                    frappe.msgprint('Error calculating another field.');\n                }\n            }\n        });\n\n        frm.save();\n   \n\t}\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 1,
  "modified": "2024-04-24 15:23:34.946277",
  "module": null,
  "name": "Min of Meeting",
  "script": "frappe.ui.form.on('Minutes Of Meeting', {\n    after_save: function(frm){\n        \n        let agenda = [];\n        agenda = frm.doc.meeting_agenda;\n            var sum = 0;\n            var sum2 = 0;\n        for(let i = 0 ; i < agenda.length ; i++){\n            let temp = agenda[i];\n          \n            if(temp['status'] == 'Completed'){\n                sum = sum +1;\n            }\n            else if (temp['status'] == 'Not Completed'){\n                sum2 = sum2 + 1;\n            }\n            \n            \n        }\n        frm.set_value('total_completed', sum);\n        frm.set_value('total_not_completed', sum2);\n        \n        //////////////////////////////\n        let com = [];\n        com = frm.doc.committee_member;\n            var sum3 = 0;\n            var sum4 = 0;\n        for(let i = 0 ; i < com.length ; i++){\n            let temp = com[i];\n         \n            if(temp['meeting_status'] == 'Present'){\n                sum3 = sum3 +1;\n            }\n            else if (temp['meeting_status'] == 'Absent'){\n                sum4 = sum4 + 1;\n            }\n            \n            \n        }\n        frm.set_value('present', sum3);\n        frm.set_value('absent', sum4);\n        \n        \n        \n    ///////////////////////////////////////////////////////\n        \n        \n        \n        \n        let ext = [];\n        ext = frm.doc.external_authority;\n            var sum5 = 0;\n            var sum6 = 0;\n        for(let i = 0 ; i < ext.length ; i++){\n            let temp = ext[i];\n         \n            if(temp['status'] == 'Present'){\n                sum5 = sum5 +1;\n            }\n            else if (temp['status'] == 'Absent'){\n                sum6 = sum6 + 1;\n            }\n            \n            \n        }\n        frm.set_value('total_present', sum5);\n        frm.set_value('total_absent', sum6);\n        \n    }\n});\n\n\n\n\n// frappe.ui.form.on('Minutes Of Meeting', {\n//     refresh: function(frm){\n//         let com = [];\n//         com = frm.doc.committee_member;\n//             var sum3 = 0;\n//             var sum4 = 0;\n//         for(let i = 0 ; i < com.length ; i++){\n//             let temp = com[i];\n         \n//             if(temp['meeting_status'] == 'Present'){\n//                 sum3 = sum3 +1;\n//             }\n//             else if (temp['meeting_status'] == 'Absent'){\n//                 sum4 = sum4 + 1;\n//             }\n            \n            \n//         }\n//         frm.set_value('present', sum3);\n//         frm.set_value('absent', sum4);\n        \n        \n        \n        \n//     }\n// });\n\n\n\n\n// let committee_member = [];\n//         committee_member = frm.doc.committee_member;\n        \n//         for(let i = 0 ; i < committee_member.length ; i++){\n//             let temp = committee_member[i];\n//             var sum3 = 0;\n//             var sum4 = 0;\n//             if(temp['meeting_status'] == 'Present'){\n//                 sum3 = sum3 +1;\n//             }\n//             else if (temp['meeting_status'] == 'Absent'){\n//                 sum4 = sum4 + 1;\n//             }\n            \n            \n//         }\n//         frm.set_value('present', sum3);\n//         frm.set_value('absent', sum2);",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 0,
  "modified": "2023-12-15 23:30:04.963924",
  "module": null,
  "name": "min",
  "script": "frappe.ui.form.on('Minutes Of Meeting', {\n\tafter_save:function(frm){\n\t        let ext = [];\n        ext = frm.doc.external_authority;\n            var sum5 = 0;\n            var sum6 = 0;\n        for(let i = 0 ; i < ext.length ; i++){\n            let temp = ext[i];\n         \n            if(temp['status'] == 'Present'){\n                sum5 = sum5 +1;\n            }\n            else if (temp['status'] == 'Absent'){\n                sum4 = sum6 + 1;\n            }\n            \n            \n        }\n        frm.set_value('total_present', sum5);\n        frm.set_value('total_absent', sum6);\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Generalization",
  "enabled": 0,
  "modified": "2024-07-15 16:15:59.444409",
  "module": null,
  "name": "SC",
  "script": "frappe.ui.form.on('Generalization', {\r\n  refresh(frm) {\r\n    frm.add_custom_button(__('Action'), function(){\r\n      if(frm.doc.__unsaved) frappe.throw(\"save doc first\")\r\n        frappe.show_progress(\"Getting Contacts..\", 90, 100, \"Please wait\");\r\n\r\n      frappe.call({\r\n        \"method\": \"news_article.api.api.get_committee_mail\",\r\n        \"args\": {\"gen\": frm.doc.name, \"customer_status\": frm.doc.condition_of_members},\r\n        \"callback\": function(r) {\r\n          let emails = r.message\r\n          let customer_emails = []\r\n          \r\n          // for (let email of emails) {\r\n          //     customer_emails.push(frappe.get_doc({\r\n          //         \"doctype\": \"Newsletter Attachment\",\r\n          //         \"parentfield\": \"customer_email\",\r\n          //         \"parenttype\": \"Customer Newsletter\",\r\n          //         \"email\": email\r\n          //     }))\r\n          // }\r\n          frappe.new_doc(\"Customer Newsletter\", {\r\n            \r\n          }).then(() => {\r\n            for(let email of emails) {\r\n              cur_frm.add_child(\"customer_email\",{\r\n                \"email\": email['email']\r\n              })\r\n            }\r\n            cur_frm.refresh_fields()\r\n          })\r\n        }\r\n      })\r\n    }, __(\"\"));\r\n\r\n  }\r\n})\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-04-18 09:23:37.957974",
  "module": null,
  "name": "Count Export",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh: function(frm) {\n\t    var items =  frm.doc.custom_crops_that_are_exported;\n\t    var count = items.length;\n\t    console.log(\"mina\" + items.length);\n\t    frm.set_value(\"custom_total_items_exported\", count);\n\t    \n\t    \tvar com = frm.doc.custom_committees_you_would_like_to_join;\n\t    \tvar com_count = com.length;\n\t    \tfrm.set_value(\"custom_total_committes\", com_count);\n\t    \n\t}\n\t\n\n});\n\nfrappe.ui.form.on('Crops that the company packs at the station', {\n// \trefresh(frm) {\n// \t\t// your code here\n//       // Add a custom script to filter products based on the selected committee\n//         frm.fields_dict['crops_that_the_company_packs_at_the_station'].grid.get_field('item').get_query = function(doc, cdt, cdn) {\n//             var child = locals[cdt][cdn];\n//             return {\n//                 filters: {\n//                     'committe_code': child.committee\n//                 }\n//             };\n//         };\n// \t}\n// \t\tonload: function(frm) {\n// // \t\t\tvar customer_group = frm.doc.customer_group;\n// \t\t\t\tfrm.fields_dict[\"custom_committees_you_would_like_to_join\"].grid.get_field(\"item\").get_query =\n//       function (doc, cdt, cdn) {\n//         var child = locals[cdt][cdn];\n//         return {\n//           filters: [\n//             [\"committees\", \"=\", child.committee ],\n//           ],\n//         };\n//       }\n// \t\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data AEC Export",
  "enabled": 1,
  "modified": "2023-12-28 10:50:17.564521",
  "module": null,
  "name": "Data Aec",
  "script": "frappe.ui.form.on('Data AEC Export', {\n    onload: function(frm) {\n        if (frm.is_new()) {\n            frm.set_value('reference_doctype', 'Volume Of Member Exports');\n            frm.refresh_field('reference_doctype');\n            frm.set_value('user', frappe.session.user);\n            frm.refresh_field('user');\n            frm.set_value('date', frappe.datetime.nowdate());\n            frm.refresh_field('date');\n             frm.set_value('time', frappe.datetime.now_time());\n            frm.refresh_field('time');\n\n        }\n    },\n\n    season(frm) {\n        customdatanaming(frm);\n    },\n\n    month(frm) {\n        customdatanaming(frm);\n    }\n});\n\nfunction customdatanaming(frm) {\n    let season = frm.doc.season;\n    let month = frm.doc.month;\n    let temp = season + '-' + month;\n\n    frm.set_value('naming_aec', temp);\n    frm.refresh_field('naming_aec');\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-02-22 21:03:29.734569",
  "module": null,
  "name": "Update Customer",
  "script": "frappe.ui.form.on('Customer', {\n\tcustom_update_customer_volume: function(frm) {\n\t    let tax_id = frm.doc.tax_id;\n\t    if(tax_id){\n\t        var total_last_year = get_volume_last_year(tax_id);\n\t        if(total_last_year.length < 1){\n\t            total_last_year = get_volume_last_two_year(tax_id);\n\t            if(total_last_year.length < 1){\n\t                total_last_year = get_volume_last_three_year(tax_id);\n\t                if(total_last_year.length <1){\n\t                    msgprint(\" Member has not the Volume for last three year\");\n\t                }\n\t            }\n\t        }\n\t        \n\t        if(total_last_year.length !== 0){\n\t            console.log(total_last_year);\n\t            let customer_group_for_last_year = get_customer_group(total_last_year[0]['total']);\n\t            let customer_group = frm.doc.customer_group;\n\t            if(customer_group != '\u0623\u0639\u0636\u0627\u0621 \u0644\u062c\u0627\u0646 \u062e\u062f\u0645\u064a\u0629'){\n\t                frm.set_value('customer_group' , customer_group_for_last_year[0]['name']);\n\t                frm.set_value('custom_volume_of__exports' , total_last_year[0]['total']);\n\t                frm.refresh_field('customer_group');\n\t                frm.refresh_field('custom_volume_of__exports');\n\t            }\n\t        }\n\t        cur_frm.clear_table(\"volume_of_member_exports_for_three_years\");\n\n\t        total_last_year = get_volume_last_year(tax_id);\n\t        if(total_last_year.length !== 0){\n\t            frm.add_child('volume_of_member_exports_for_three_years', {\n                    'season': total_last_year[0]['season'],\n                    'value': total_last_year[0]['total'],\n                    'season_name' :total_last_year[0]['season_name'],\n                    'total_amount_in_usd':total_last_year[0]['total_amount_in_usd'],\n                    'quantity_in_tons' : total_last_year[0]['quantity_in_tons'],\n                    'total_amount_in_egp': Math.round( total_last_year[0]['total'], 2)\n                });\n\t        }\n\t        \n\t        \n\t        var total_last_two_year = get_volume_last_two_year(tax_id);\n            if(total_last_two_year.length !== 0){\n                const customer_group_for_two_year = get_customer_group(total_last_two_year[0]['total']);\n\t            frm.add_child('volume_of_member_exports_for_three_years', {\n                    'season': total_last_two_year[0]['season'],\n                    'value': total_last_two_year[0]['total'],\n                    'season_name' :total_last_two_year[0]['season_name'],\n                    'total_amount_in_usd':total_last_two_year[0]['total_amount_in_usd'],\n                    'quantity_in_tons' : total_last_two_year[0]['quantity_in_tons'],\n                    'total_amount_in_egp': Math.round( total_last_two_year[0]['total'], 2)\n                });\n            }\n\t        var total_last_three_year = get_volume_last_three_year(tax_id);\n\t        \n\t        if(total_last_three_year.length !== 0){\n\t            const customer_group_for_three_year = get_customer_group(total_last_three_year[0]['total']);\n\t            frm.add_child('volume_of_member_exports_for_three_years', {\n                    'season': total_last_three_year[0]['season'],\n                    'value': total_last_three_year[0]['total'],\n                    'season_name' :total_last_three_year[0]['season_name'],\n                    'total_amount_in_usd':total_last_three_year[0]['total_amount_in_usd'],\n                    'quantity_in_tons' : total_last_three_year[0]['quantity_in_tons'],\n                    'total_amount_in_egp': Math.round( total_last_three_year[0]['total'], 2)\n                });\n\t        }\n\t        frm.refresh_field('volume_of_member_exports_for_three_years');\n\t        \n\t        \n\t    }\n\t}\n})\n\nfunction get_customer_group(value){\n    var temp = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_customer_group',\n        args: {\n            value: value\n        },\n        callback: function(r) {\n            temp = r.message;\n        }\n    });\n    return temp ;\n}\n\nfunction get_volume_last_year(tax_id){\n    var amount = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_volume_last_year',\n        args: {\n            tax_id: tax_id\n        },\n        callback: function(r) {\n            amount = r.message;\n        }\n    });\n    return amount ;\n}\n\nfunction get_volume_last_two_year(tax_id){\n    var amount = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_volume_last_two_year',\n        args: {\n            tax_id: tax_id\n          \n        },\n        callback: function(r) {\n            amount = r.message;\n        }\n    });\n    return amount ;\n}\n\nfunction get_volume_last_three_year(tax_id){\n    var amount = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_volume_last_three_year',\n        args: {\n            tax_id: tax_id\n        },\n        callback: function(r) {\n            amount = r.message;\n        }\n    });\n    return amount ;\n}\n// function get_volume (tax_id){\n//     let total = 0;\n//     var today = new Date();\n//     var year = today.getFullYear();\n//     var month = today.getMonth() + 1;\n//     var day = today.getDate();\n//     var currentDate = year + '-' +  month + '-' +  day;\n//     var lastYearStartDate = (year - 1) + '-01-01';\n//     var lastYearEndDate = year + '-12-31';\n//     var table = [];\n//     var temp ;\n    \n//     frappe.call({\n//         async:false,\n//         method: 'frappe.client.get_list',\n//         args: {\n//             doctype: 'Volume Of Member Exports',\n//             filters: { \n//                 tax__number:  tax_id,\n//                 posring_date: ['between',[lastYearStartDate , lastYearEndDate ]]\n//             },\n//         },\n//         callback: function(r) {\n//             temp = r.message;\n//         }\n//     });\n//     for(let i of temp){\n//     frappe.call({\n//         async:false,\n//         method: 'frappe.client.get',\n//         args: {\n//             doctype: 'Volume Of Member Exports',\n//             filters: { \n//                 name: i.name\n//             },\n//         },\n//         callback: function(r) {\n//             total = total + r.message.total_amount_in_egp ;\n//         }\n//     });\n//     }\n//     return total ;    \n// }\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Volume Log",
  "enabled": 1,
  "modified": "2024-01-10 09:51:18.309775",
  "module": null,
  "name": "new log",
  "script": "frappe.ui.form.on('Volume Log', { \n    update: function(frm) { \n        frm.save().then(function() {\n    let name = frm.doc.name;\n    frappe.call({\n        async: false,\n        method: 'barcode_aec.barcode.update_vol',\n        args: {\n            name: name\n        },\n        callback: function(r) {\n            msgprint(\"Updated\");\n        }\n    });\n});\n\n    } \n})\n\n\nfrappe.ui.form.on('Volume Log', {\n\tsearch:function(frm) {\n\t\tconst table = get_log();\n\t\tfor(let i of table){\n\t\t    let new_customer_group = get_customer_group(i.total);\n\t\t    frm.add_child('log', {\n                'member_name': i.name,\n                'tax_id': i.tax__number,\n                'member_category': i.customer_group,\n                'current_volume_of_exports': i.volume_of_exports,\n                'new_volume_of_member_exports': i.total,\n                'new_member_category': new_customer_group[0]['name'],\n                'total_amount_in_usd': i.total_amount_in_usd,\n                'quantity_in_tons': i.quantity_in_tons\n            });\n\t\t}\n\t\tfrm.refresh_field(\"log\");\n\t}\n})\n\nfunction get_log(){\n    var table = [];\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_log',\n        args: {\n\n    },\n    callback: function(r) {\n        table = r.message;\n        }\n    });\n    return table ;\n}\n\nfunction get_customer_group(value){\n    var temp = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_customer_group',\n        args: {\n            value: value\n        },\n        callback: function(r) {\n            temp = r.message;\n        }\n    });\n    return temp ;\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-02-21 15:52:02.990649",
  "module": null,
  "name": "Stickers",
  "script": "frappe.ui.form.on('Customer', {\n    onload:function(frm){\n        \n        \n        var board_member = frm.doc.custom_board_of_directors_member_;\n        \n        var com = frm.doc.custom_committees_you_would_like_to_join;\n        \n        // let board_url = '/files/\u0628\u0627\u062f\u062c\u0627\u062a \u0627\u0644\u0639\u0636\u0648\u064a\u0629-02.png';\n        \n        let bord = frm.doc.custom_board_image;\n        \n        if(frm.doc.custom_board_of_directors_member_ == 'Yes'){\n            frm.set_value('custom_attached_image', frm.doc.custom_board_image);\n\n            // frm.set_value('custom_attached_image', board_url);\n            cur_frm.refresh_field('custom_updated_cust_profile');\n\n        }else{\n            console.log(\"Done\");\n        }\n        \n//        custom_attached_image\n\n        \n        // let image = frm.doc.custom_customer_image;\n        \n        // var all = [];\n        \n        for(let tab of com){\n            console.log(tab);\n            // cur_frm.set_df_property('your_field', 'options', options);\n            console.log(tab.sticker_image);\n            console.log(tab.image_sticker); // path\n            \n            // if(tab.priority == 2){\n                \n            //     // image = tab.image_sticker;\n            //     frm.set_value('custom_attached_image', tab.image_sticker);\n                    \n            //     frm.refresh_field('custom_customer_image');\n            //                     frm.refresh_field('custom_attached_image');\n            //         // set_field_options(\"stickers\", images)\n            // }\n            // var low = 1;\n            // if(tab.priority > 1){\n            //     if(tab.priority == 2){\n            //         image = tab.sticker_image;\n                    // frm.set_value('custom_customer_image', tab.sticker_image);\n                    // frm.refresh_field('custom_customer_image');\n            //     }\n            // }\n           console.log(tab.priority);\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-17 15:58:32.312462",
  "module": null,
  "name": "Tests",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    // ... [Your existing code]\r\n\r\n    onload: function(frm) {\r\n        // Watch for changes in the custom_membership_status field\r\n        let membershipStatus = frm.doc.custom_bundle_;\r\n        \r\n        // Get a reference to the custom_check_field\r\n        let checkField = frm.fields_dict.custom_annual_fees;\r\n        \r\n        // If custom_membership_status has a value, mark the custom_check_field; otherwise, unmark it\r\n        if (membershipStatus) {\r\n            checkField.set_value(1);  // Mark the check field\r\n        } else {\r\n            checkField.set_value(0);  // Unmark the check field\r\n        }\r\n    },\r\n\r\n    // ... [Your existing code continues]\r\n});\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 0,
  "modified": "2024-01-04 15:49:52.146959",
  "module": null,
  "name": "Updating Customer from Commitee",
  "script": "frappe.ui.form.on('Committee', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-01-08 12:17:40.712337",
  "module": null,
  "name": "Dates",
  "script": "frappe.ui.form.on('Customer', {\r\n    custom_date_of_registration: validateDateField,\r\n    custom_date_registration4: validateDateField,\r\n    custom_date_registration3: validateDateField,\r\n    custom_date_of_registration2: validateDateField,\r\n    tax_id: validateUniqueTaxID\r\n});\r\n\r\nfunction validateDateField(frm) {\r\n    var fieldDisplayNames = {\r\n        'custom_date_of_registration': \"Custom Date of Registration\",\r\n        'custom_date_registration4': \"Custom Date Registration 4\",\r\n        'custom_date_registration3': \"Custom Date Registration 3\",\r\n        'custom_date_of_registration2': \"Custom Date of Registration 2\"\r\n    };\r\n\r\n    var fieldName = this.df.fieldname;\r\n    var selectedDate = frm.doc[fieldName];\r\n    var today = frappe.datetime.get_today();\r\n\r\n    if (selectedDate > today) {\r\n        frappe.msgprint(__(\"The '{0}' field cannot have a date in the future.\", [fieldDisplayNames[fieldName]]));\r\n        frm.set_value(fieldName, '');\r\n    }\r\n}\r\n\r\nfunction validateUniqueTaxID(frm) {\r\n    var taxID = frm.doc.tax_id;  // Replace 'tax_id' with the actual field name\r\n    var customerName = frm.doc.name;  // Replace 'name' with the actual field name for Customer name\r\n\r\n    // Check if tax ID already exists for another customer\r\n    frappe.call({\r\n        method: \"frappe.client.get_value\",\r\n        args: {\r\n            doctype: \"Customer\",\r\n            filters: {\r\n                tax_id: taxID,\r\n                name: [\"!=\", customerName]  // Exclude the current customer from the check\r\n            },\r\n            fieldname: \"name\"\r\n        },\r\n        callback: function(response) {\r\n            if (response.message) {\r\n                frappe.msgprint(__(\"Tax ID '{0}' already exists for another member. Please enter a unique Tax ID.\", [taxID]));\r\n                frm.set_value('tax_id', '');\r\n            }\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-02-07 16:05:44.289489",
  "module": null,
  "name": "Testing",
  "script": "cur_frm.cscript.customer = function(doc) {\r\n    // Make a server call to fetch the outstanding balance for the selected customer.\r\n    frappe.call({\r\n        method: \"erpnext.accounts.utils.get_balance_on\",\r\n        args: {\r\n            date: doc.posting_date,\r\n            party_type: 'Customer',\r\n            party: doc.customer\r\n        },\r\n        // Upon receiving a response from the server, update the outstanding balance field on the form.\r\n        callback: function(response) {\r\n            // Check if the response has a message and update the outstanding_balance field.\r\n            if (response && response.message !== undefined) {\r\n                // Format and assign the fetched balance to the outstanding_balance field.\r\n                doc.outstanding_balance = format_currency(response.message, erpnext.get_currency(doc.company));\r\n                \r\n                // Log the updated outstanding balance for debugging purposes.\r\n                console.log(\"Updated outstanding balance:\", doc.outstanding_balance);\r\n                \r\n                // Refresh the outstanding_balance field on the form to reflect the updated value.\r\n                refresh_field('outstanding_balance', 'accounts');\r\n            } else {\r\n                // Log an error message if the response does not contain the expected message.\r\n                console.log(\"Failed to fetch outstanding balance.\");\r\n            }\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-01-09 11:26:56.472966",
  "module": null,
  "name": "testing two",
  "script": "frappe.ui.form.on('Sales Invoice', {\n customer: function(frm){\n     \n     \n      frappe.call({\n        method: \"erpnext.accounts.utils.get_balance_on\",\n        args: {\n            date: doc.posting_date,\n            party_type: 'Customer',\n            party: doc.customer\n        },\n        // Upon receiving a response from the server, update the outstanding balance field on the form.\n        callback: function(response) {\n            // Format and assign the fetched balance to the outstanding_balance field.\n            doc.outstanding_balance = format_currency(response.message, erpnext.get_currency(doc.company));\n            console.log();\n            // Refresh the outstanding_balance field on the form to reflect the updated value.\n            refresh_field('outstanding_balance', 'accounts');\n\n            // Check if the outstanding balance is greater than zero and custom_is_annual_fees is checked\n            if(frm.doc.customer){\n            if (doc.outstanding_balance > 0 && doc.custom_annual_fees == 1 ) {\n                // Display a message in English\n                frappe.msgprint({\n                    message: __(\"There are outstanding amount {0}, please pay all balance before renew your membership.\", [doc.outstanding_balance]),\n                    title: __(\"Warning\"),\n                    indicator: 'orange'\n                });\n\n                // Display a message in Arabic\n                frappe.msgprint({\n                    message: __(\"\u0647\u0646\u0627\u0643 \u0645\u0628\u0644\u063a \u0645\u062a\u0628\u0642\u064a {0}\u060c \u064a\u0631\u062c\u0649 \u062f\u0641\u0639 \u062c\u0645\u064a\u0639 \u0627\u0644\u0623\u0631\u0635\u062f\u0629 \u0642\u0628\u0644 \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u062a\u0643.\", [doc.outstanding_balance]),\n                    title: __(\"\u062a\u062d\u0630\u064a\u0631\"),\n                    indicator: 'orange'\n                });\n            }\n        }\n        }\n    });\n     \n     \n     \n     \n }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-15 12:49:02.034488",
  "module": null,
  "name": "Auto Change Member Status",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    on_submit:function(frm){\n        \n        let current_year = new Date().getFullYear();\n        \n       if(frm.doc.customer && frm.doc.year == current_year && frm.doc.custom_customer_outstanding_balance === 0.0){\n           \n           if(frm.doc.custom_customer_membership_status == 'Requested' || frm.doc.custom_customer_membership_status == 'Inactive'  && frm.doc.status == 'Paid' || frm.doc.status == 'Partially Paid' || frm.doc.custom_bundle_ == '\u0631\u0633\u0648\u0645 \u0637\u0644\u0628 \u062c\u062f\u064a\u062f'){\n\n               frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Customer\",\n                    name: frm.doc.customer,\n                fieldname:{\n                    \"custom_customer_status\": 'Active',\n                    \"custom_membership_status\": '\u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629'\n                    }\n                },\n                \n            callback: function(response) {\n                 msgprint(\"Member Activated\");\n                }\n            });\n               \n            // frm.set_value('custom_customer_membership_status', 'Active');\n            // frm.set_value('custom_membership_status', '\u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629');\n\n  \n               \n           }\n           \n           \n       }\n        \n        \n        \n    }\n})\n\n\n// frm.doc.custom_annual_fees == 1",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data AEC Export",
  "enabled": 0,
  "modified": "2024-02-01 10:35:32.312136",
  "module": null,
  "name": "aaa",
  "script": "frappe.ui.form.on('Data AEC Export', {\n\tmonth: function(frm) {\n        var linkedField = 'month';\n\n        frm.fields_dict[linkedField].get_query = function(doc, cdt, cdn) {\n            return {\n                filters: [\n                    // Your filters, if any\n                ],\n                order_by: '1' // Assuming 'month' is the fieldname you want to sort by\n            };\n        };\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-04-23 10:16:21.313901",
  "module": null,
  "name": "Location Filter",
  "script": "frappe.ui.form.on('Meeting', {\n\trefresh:function(frm){\n\t    \n\t    frm.set_query(\"location\", function() {\n\t\t\treturn {\n\t\t\t\tfilters: [\n\t\t\t\t\t['Location', 'custom_is_meeting', '=', 1]\n\t\t\t\t]\n\t\t\t};\n\t\t});\n\t}\n\t    \n\t    \n\t    \n\t\n\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-20 13:42:10.568515",
  "module": null,
  "name": "Validation on Any Service except Renewal",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tbefore_save:function(frm){\n\t    \n\t    if(frm.doc.customer){\n\t        if(frm.doc.custom_membership_status === '\u063a\u064a\u0631 \u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629' && frm.doc.custom_bundle_ == '\u0631\u0633\u0648\u0645 \u0637\u0644\u0628 \u062c\u062f\u064a\u062f' && frm.doc.custom_annual_fees == 1){\n\t            console.log(\"Continue\");\n\n\t        }else if(frm.doc.custom_membership_status === '\u063a\u064a\u0631 \u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629'  &&  frm.doc.custom_bundle_ != '\u0631\u0633\u0648\u0645 \u0637\u0644\u0628 \u062c\u062f\u064a\u062f' || frm.doc.custom_bundle_ === null ){\n\t            \n\t            frappe.validated = false;\n\t            frappe.msgprint(\"\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u063a\u064a\u0631 \u0645\u0633\u062f\u062f \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629 \u0648\u063a\u064a\u0631 \u0645\u0633\u0645\u0648\u062d \u0644\u0647 \u0628\u0625\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0649 \u062e\u062f\u0645\u0629 \u0645\u0627 \u0639\u062f\u0627 \u062a\u062c\u062f\u064a\u062f \u0627\u0644\u0639\u0636\u0648\u064a\u0629\");\n\t        }\n\t        \n\t        \n\t        \n\t        \n\t    }\n\t    \n\t    \n\t    \n\t}\n\t\n\t\n\t\n\t\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-02-17 14:09:26.765873",
  "module": null,
  "name": "Lab Validation",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tvalidate:function(frm){\n\t    \n\t    \n\t    let currentYear = new Date().getFullYear();\n        let startDate = new Date(currentYear, 0, 1); \n        let endDate = new Date(currentYear, 11, 31); \n\t    \n\t    let lab = frm.doc.items[0].item === '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a'\n\t    let check_if = frappe.call({\n            method: 'frappe.client.get_count',\n            args: {\n        'doctype': 'Sales Invoice',\n        'filters': {\n            'customer': frm.doc.customer,\n            'status': 'Paid',\n            'items.item_name': lab ? '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a':  '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a',\n            'posting_date': ['between', [startDate, endDate]] \n            \n        },\n    },\n    callback: function(r) {\n        console.log(\"This is Lab count\" + r.message);\n        msgprint(\"Lab Count \" + r.messge);\n        \n    }\n});\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 0,
  "modified": "2024-04-07 18:45:54.096176",
  "module": null,
  "name": "Committe Dashoard",
  "script": "frappe.ui.form.on('Committee', {\n    onload: function(frm) {\n        // Replace 'html_content' with the actual name of your HTML field\n        var htmlContent = frm.doc.dashboard_card;\n        let total = frm.doc.total_members;\n        let active = frm.doc.total_active_members;\n        let inactive = frm.doc.total_inactive_members;\n        let annual = frm.doc.annual_meeting;\n        let meeting = frm.doc.annual_meeting_per_year;\n        var filters = [[\"committe_code\", \"=\", frm.doc.name],];\n        let product_count = 0;\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                \"doctype\" : \"Product\",\n                'filters': filters,\n                'fields': ['name']\n            },\n            callback: function(response) {\n                if (response.message) {\n                    // Get the count of filtered documents\n                    product_count = response.message.length;\n                    console.log('Count of filtered documents:', product_count);\n                    renderHTML();\n                }\n            }\n        });\n        console.log('Product count for later use:', product_count);\n        // Render HTML content in the field\n        function renderHTML() {\n            frm.fields_dict.dashboard_card.$wrapper.html(`\n        \n        \n        <html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\n.card {\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n  width: 100%;\n  border-radius: 5px;\n  padding:15px\n}\n\n.card:hover {\n  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n}\n\n.container {\n  padding: 2px 16px;\n}\n\n.column {\n  float: left;\n  width: 32%;\n  margin: 0 3px;\n}\n\n.row {\n  margin: 0 -5px;\n  width: 100%;\n}\n\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.total {\nfont-size: 20px;\nfont-weight: bold;\n}\n\n.active {\ncolor: green;\nfont-size: 20px;\nfont-weight: bold;\n}\n\n.inactive {\ncolor: red;\nfont-size: 20px;\nfont-weight: bold;\n}\n\n.num {\nfont-size: 20px;\nfont-weight: bold;\n}\n</style>\n</head>\n<body>\n<div class=\"row\">\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Total Members</b></h5> \n    <p class=\"total\"><b>${total}</b></p> \n  </div>\n</div>\n</div>\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Active Members</b></h5> \n    <p class=\"active\">${active}</p> \n  </div>\n</div>\n</div>\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Inactive Members</b></h5> \n    <p class=\"inactive\">${inactive}</p> \n  </div>\n</div>\n</div>\n\n</div>\n\n<br>\n\n<div class=\"row\">\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b> Annual meeting</b></h5> \n    <p class=\"num\"><b>${annual}</b></p> \n  </div>\n</div>\n</div>\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Meeting</b></h5> \n    <p class=\"num\">${meeting}</p> \n  </div>\n</div>\n</div>\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Products</b></h5> \n    <p class=\"num\">${product_count}</p> \n  </div>\n</div>\n</div>\n\n</div>\n\n</body>\n</html>\n    \n        \n        `);\n        }\n        \n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-02-21 16:05:10.712742",
  "module": null,
  "name": "budget request",
  "script": "\r\n\r\nfrappe.ui.form.on('Budget Items Details', {\r\n    custom_show: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n        var table_html = '<div class=\"form-group\"><label>Please enter the monthly budget qty for ' + child.item_name + ':</label><table class=\"table table-bordered\"><tr>';\r\n        \r\n        for (var i = 0; i < 6; i++) {\r\n            var month_fieldname = months[i].toLowerCase();\r\n            var month_value = child[month_fieldname] || '';\r\n            table_html += '<td><label>' + months[i] + '</label><input type=\"text\" class=\"form-control float-input\" id=\"' + month_fieldname + '\" name=\"' + month_fieldname + '\" value=\"' + month_value + '\"></td>';\r\n        }\r\n        table_html += '</tr><tr>';\r\n        for (var i = 6; i < 12; i++) {\r\n            var month_fieldname = months[i].toLowerCase();\r\n            var month_value = child[month_fieldname] || '';\r\n            table_html += '<td><label>' + months[i] + '</label><input type=\"text\" class=\"form-control float-input\" id=\"' + month_fieldname + '\" name=\"' + month_fieldname + '\" value=\"' + month_value + '\"></td>';\r\n        }\r\n        table_html += '</tr></table></div>';\r\n\r\n        frappe.prompt([\r\n            { fieldname: 'html', fieldtype: 'HTML', options: table_html }\r\n        ],\r\n        function(values) {\r\n            console.log('Dialog Values:', values); // Log dialog values\r\n            var dialog_values = {};\r\n            var total_quantity = 0; // Initialize total quantity\r\n            for (var i = 0; i < months.length; i++) {\r\n                var month_fieldname = months[i].toLowerCase();\r\n                dialog_values[month_fieldname] = $('#' + month_fieldname).val();\r\n                total_quantity += parseFloat(dialog_values[month_fieldname]) || 0; // Calculate total quantity\r\n            }\r\n            console.log(\"Total Quantity:\", total_quantity); // Log total quantity\r\n            // Set the total quantity to the 'total_quantity' field\r\n            frappe.model.set_value(cdt, cdn, 'total_quantity', total_quantity);\r\n\r\n            // Calculate and set total\r\n            var expected_price = child.expected_price; // Access expected_price from child object\r\n            console.log(\"Expected Price:\", expected_price); // Log expected price\r\n            if (!isNaN(expected_price) && !isNaN(total_quantity)) {\r\n                var total = total_quantity * expected_price;\r\n                console.log(\"Total:\", total); // Log total\r\n                frappe.model.set_value(cdt, cdn, 'total', total);\r\n            } else {\r\n                console.log(\"Error: Expected Price or Total Quantity is not a number.\");\r\n            }\r\n\r\n            // Set the dialog values to the row\r\n            frappe.model.set_value(cdt, cdn, dialog_values);\r\n\r\n            // Save the form\r\n            // frm.save();\r\n        },\r\n        'Enter Monthly Budget Quantities',\r\n        'Update',\r\n        function(values) {\r\n            for (var i = 0; i < months.length; i++) {\r\n                var month_fieldname = months[i].toLowerCase();\r\n                var value = parseFloat(values[month_fieldname].replace(',', '.'));\r\n                if (isNaN(value)) {\r\n                    frappe.msgprint('Please enter a valid float number for ' + months[i]);\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n\r\n        // Delegate event handling to a higher-level static parent element\r\n        $('.modal-dialog').on('input', '.float-input', function() {\r\n            var value = this.value.replace(/[^0-9.]/g, '');\r\n            if (value !== this.value) {\r\n                this.value = value;\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Copyright (c) 2024, ahmed and contributors\r\n// For license information, please see license.txt\r\n\r\nfrappe.ui.form.on(\"Budget Request\", {\r\n  department(frm) {\r\n      if(frm.doc.__unsaved && !frm.doc.department) frappe.throw(\"set department first and save the doc \");\r\n      if(frm.doc.department){\r\n    frappe.call({\r\n      method: \"budget.budge.api.api.get_items_per_department\",\r\n      args: {\r\n        department: frm.doc.department,\r\n      },\r\n      callback(r) {\r\n        frm.doc.budget_items_details = [];\r\n        let items = r.message;\r\n        items.forEach((item) => {\r\n          frm.add_child(\"budget_items_details\", {\r\n            item_name: item.name,\r\n            expense_account: item.expense_account,\r\n          });\r\n        });\r\n        frm.refresh_fields();\r\n      },\r\n    });\r\n      }\r\n  },\r\n//   price_list(frm) {\r\n//     frm.doc.budget_items_details.forEach((item) => {\r\n//       frappe.db\r\n//         .get_value(\r\n//           \"Item Price\",\r\n//           { item_code: item.item_name, price_list: frm.doc.price_list },\r\n//           \"price_list_rate\",\r\n//         )\r\n//         .then((r) => {\r\n//           item.expected_price = r.message?.price_list_rate;\r\n//           frm.refresh_field(\"budget_items_details\");\r\n//         });\r\n//     });\r\n//   },\r\n  refresh(frm) {\r\n    let months = {\r\n        january: { quantity: 0, amount: 0 },\r\n        february: { quantity: 0, amount: 0 },\r\n        march: { quantity: 0, amount: 0 },\r\n        april: { quantity: 0, amount: 0 },\r\n        may: { quantity: 0, amount: 0 },\r\n        june: { quantity: 0, amount: 0 },\r\n        july: { quantity: 0, amount: 0 },\r\n        august: { quantity: 0, amount: 0 },\r\n        september: { quantity: 0, amount: 0 },\r\n        october: { quantity: 0, amount: 0 },\r\n        november: { quantity: 0, amount: 0 },\r\n        december: { quantity: 0, amount: 0 },\r\n    };\r\n\r\n    let total_quantity = 0;\r\n\r\n    frm.doc.budget_items_details.forEach((item) => {\r\n        let item_total_quantity = 0;\r\n\r\n        for (let month of Object.keys(months)) {\r\n            item_total_quantity += item[month];\r\n        }\r\n\r\n        item.total_quantity = item_total_quantity;\r\n        item.total = item_total_quantity * (item.expected_price || 0);\r\n\r\n        if (item.status == \"Accepted\") {\r\n            total_quantity += item_total_quantity;\r\n            for (let month of Object.keys(months)) {\r\n                months[month].quantity += item[month];\r\n                months[month].amount += (item[month] || 0) * (item.expected_price || 0);\r\n            }\r\n        }\r\n    });\r\n\r\n    frm.doc.item_summary = [];\r\n    let total_amount = 0;\r\n\r\n    for (let month of Object.keys(months)) {\r\n        frm.add_child(\"item_summary\", {\r\n            month: month,\r\n            total: months[month].amount,\r\n            total_quantity: months[month].quantity,\r\n        });\r\n        total_amount += months[month].amount;\r\n    }\r\n\r\n    frm.doc.total = total_amount;\r\n    frm.doc.total_quantity = total_quantity;\r\n    frm.refresh_fields();\r\n}\r\n\r\n});\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Control",
  "enabled": 0,
  "modified": "2024-02-25 11:56:33.526866",
  "module": null,
  "name": "Budget Control",
  "script": "frappe.ui.form.on('Budget Control', {\n    on_submit: function(frm) {\n        let year = frm.doc.fiscal_year;\n        let dep = frm.doc.departments_list;\n        \n        if (frm.doc.budget_controller === 'Financial') {\n            dep.forEach(function(row) {\n                let budget = frappe.model.get_new_doc(\"Budget Request\");\n                budget.department = row.departments; // Assuming 'department' is the field name in the child table\n                budget.fiscal_year = year;\n                budget.custom_budget_controller = frm.doc.budget_controller;\n                frappe.db.insert(budget)\n                    .then(function() {\n                        frappe.msgprint(\"Budget Requests Have Been Created For Each Department\");\n                        frappe.model.set_value(\"Budget Request\", budget.name, \"workflow_state\", \"\u062a\u062d\u062a \u0645\u0631\u0627\u062c\u0639\u0629 \u0642\u0633\u0645 \u0627\u0644\u0645\u0627\u0644\u064a\u0629\"); // Set the workflow state here\n\n                    })\n                    .catch(function(err) {\n                        console.log(\"Error creating budget request: \", err);\n                    });\n            });\n        } else {\n            console.log(\"Done\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-04 13:41:56.180787",
  "module": null,
  "name": "Sales Invoice \"Validation\"",
  "script": "frappe.ui.form.on('Sales Invoice', {\n \n customer:function(frm){\n     \n     if(frm.doc.custom_bundle_ && frm.doc.customer){\n     let com = frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: frm.doc.customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n               var committees = r.message.custom_committees_you_would_like_to_join;\n                var count = 0;\n                var count2 = 0;\n        // Check each item in the committees array\n        for (var i = 0; i < committees.length; i++) {\n            // If the item matches \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\", increment count\n            if (committees[i].salutation === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && committees[i].ended !== 1) {\n                count++;\n            }\n            if (committees[i].salutation === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\") {\n                count2++;\n            }\n        }\n        // Now count variable holds the number of occurrences\n        console.log(\"Number of \u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629: \" + count);\n        \n        \n     let group = frm.doc.custom_customer_group;\n     if(group === null || group === \"\"){\n          frappe.throw(\"\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u064a\u062c\u0628 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0645\u0646\u062a\u0645\u064a  \u0644\u0627\u062d\u062f \u0645\u0646 \u0641\u0626\u0627\u062a \u0627\u0644\u0627\u0639\u0636\u0627\u0621 \u0627\u0648\u0644\u0627\");\n          frappe.validated = false;\n     }else{\n     let price = getRateItemPrice(group);\n    //  console.log(\"price\" + price);\n     console.log('count' + count);\n     \n     ///////////////////////////////////////////////////////////////\n     \n     \n     \n     \n     \n     \n     if(frm.doc.board_member && frm.doc.board_member_start_date){\n         \n        //  let currentDate = new Date();\n        //  let startDate = new Date(frm.doc.board_member_start_date);\n         \n        //     let threeYearsAfterStartDate = new Date(startDate);\n        //     threeYearsAfterStartDate.setFullYear(threeYearsAfterStartDate.getFullYear() + 3);\n\t        \n\t        cur_frm.clear_table(\"items\");\n\t        \n            // let items = frm.doc.items;\n            \n        // if (currentDate.getFullYear() < threeYearsAfterStartDate.getFullYear()) {    \n            let rate = getRate('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 1');\n            let income2 = getIncomeData('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 1');            \n            // for(let row of items){\n                frm.add_child('items', {\n            'item_name': '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 1',\n            'qty': 1,\n            'item_code': '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 1',\n            'rate':rate ,\n            'amount': parseFloat(rate),\n            'uom':'Nos',\n            'description':'\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 1',\n            'income_account': income2,\n\n                });\n            // }\n            \n            refresh_field('items');\n            console.log('tagded done');\n\t        \n\t    }\n\t    \n\t      let currentDate = new Date();\n         let startDate = new Date(frm.doc.board_member_start_date);\n         \n            let threeYearsAfterStartDate = new Date(startDate);\n            threeYearsAfterStartDate.setFullYear(threeYearsAfterStartDate.getFullYear() + 3);\n\t    \n\t    if(frm.doc.board_member && frm.doc.board_member_start_date && currentDate > threeYearsAfterStartDate){\n         \n        //  let currentDate = new Date();\n        //  let startDate = new Date(frm.doc.board_member_start_date);\n         \n        //     let threeYearsAfterStartDate = new Date(startDate);\n        //     threeYearsAfterStartDate.setFullYear(threeYearsAfterStartDate.getFullYear() + 3);\n\t        \n\t        cur_frm.clear_table(\"items\");\n\t        \n            // let items = frm.doc.items;\n            \n        // if (currentDate > threeYearsAfterStartDate) {    \n            let rate2 = getRate('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 2');\n            let income = getIncomeData('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 2');\n            // console.log(income);\n            // for(let row of items){\n                frm.add_child('items', {\n            'item_name': '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 2',\n            'qty': 1,\n            'item_code': '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 2',\n            'rate':rate2 ,\n            'amount': parseFloat(rate2),\n            'uom':'Nos',\n            'description':'\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 2',\n            'income_account': income,\n\n                });\n\t        \n\t        \n\t        \n\t   // }\n\t        \n\t    }\n\t    \n\t    \n     \n     \n     \n     \n     \n     //////////////////////////////////////////////////////////////////\n     \n     else if(frm.doc.custom_customer_group == price.custom_member_categories && count !==0 && frm.doc.board_member !=='Yes'){\n        //  var income = getIncome(price.item_name);\n        // let price = getRateItemPrice(group);\n\n        //  console.log(income);\n        //  console.log(price.item_code);\n         console.log(price.price_list_rate);\n         frm.add_child('items', {\n            'item_name': price.item_name,\n            'qty': count,\n            'item_code': price.item_code,\n            'rate':price.price_list_rate,\n            'amount': parseFloat(count) * price.price_list_rate,\n            'uom':'Nos',\n            'description':'test',\n            'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         \n         \n     }\n         \n         \n         \n     }\n          refresh_field('items');\n\n    }\n    \n        });\n        \n     \n     \n     \n     \n }\n\n\n}\n\n\n\n\n});\n\n\n\nfunction getRateItemPrice(group){\n    // if(group === null || group === \"\"){\n    //     frappe.throw(\"\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u064a\u062c\u0628 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0645\u0646\u062a\u0645\u064a  \u0644\u0627\u062d\u062f \u0645\u0646 \u0641\u0626\u0627\u062a \u0627\u0644\u0627\u0639\u0636\u0627\u0621 \u0627\u0648\u0644\u0627\");\n    //     frappe.validated = false;\n    // }else{\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n// function getIncomeData(name){\n//         var income_data;\n//       frappe.call({\n//             method: 'frappe.client.get',\n//             args: {\n//             doctype: 'Item',\n//             name: name\n//             // fieldname: 'item_defaults'\n            \n//     },\n//     callback: function(r) {\n//         console.log(\"Item Response\" + r.message);\n//         console.log(r.message.item_defaults[0]['income_account']);\n//         income_data = r.message.item_defaults[0]['income_account'];\n        \n        \n//     }\n\n// });\n// return income_data;\n    \n    \n    \n    \n// }\n\n// frappe.ui.form.on('Sales Invoice', {\n// \tvalidate:function(frm) {\n// \t\tif(frm.doc.custom_member_categories === null || frm.doc.custom_member_categories ===\"\"){\n\t\t    \n// \t\t  frappe.throw(\"\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u064a\u062c\u0628 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0645\u0646\u062a\u0645\u064a  \u0644\u0627\u062d\u062f \u0645\u0646 \u0641\u0626\u0627\u062a \u0627\u0644\u0627\u0639\u0636\u0627\u0621 \u0627\u0648\u0644\u0627\");\n//           frappe.validated = false;\n\t\t    \n\t\t    \n\t\t    \n// \t\t}\n// \t}\n// })\n\n\n\n\nfunction getRate(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\n\nfunction getIncomeData(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: name\n            },\n            callback: function(r) {\n                memo = r.message.item_defaults[0].income_account;\n                console.log(r.message);\n                console.log(\"income is here\");\n                console.log(memo);\n            }\n        });\n        return memo;\n}\n\n\n\n\n\n\n///////////////////////\n\n\t   //else{\n\t        \n\t   //      let rate2 = getRate('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 2');\n            \n    //         // for(let row of items){\n    //             frm.add_child('items', {\n    //         'item_name': '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 2',\n    //         'qty': 1,\n    //         'item_code': '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 2',\n    //         'rate':rate2 ,\n    //         'amount': parseFloat(rate),\n    //         'uom':'Nos',\n    //         'description':'\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 2',\n    //         // 'income_account': i['income_account'],\n\n    //             });\n\t        \n\t        \n\t        \n\t   // }\n     \n     \n     \n    //  }\n\n/////////",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-02-15 16:49:47.669593",
  "module": null,
  "name": "Items Budget",
  "script": "frappe.ui.form.on('Budget Request', {\n\tonload:function(frm){\n\t    \n\t    if(frm.doc.department){\n    frappe.call({\n      method: \"budget.budge.api.api.get_items_per_department\",\n      args: {\n        department: frm.doc.department,\n      },\n      callback(r) {\n        frm.doc.budget_items_details = [];\n        let items = r.message;\n        items.forEach((item) => {\n          frm.add_child(\"budget_items_details\", {\n            item_name: item.name,\n            expense_account: item.expense_account,\n          });\n        });\n        frm.refresh_fields();\n        // frappe.model.set_value(\"workflow_state\", \"\u062a\u062d\u062a \u0645\u0631\u0627\u062c\u0639\u0629 \u0642\u0633\u0645 \u0627\u0644\u0645\u0627\u0644\u064a\u0629\");\n        frm.save();\n      },\n    });\n  \n\t    \n\t    }\t    \n\t    \n\t    \n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Cost Center",
  "enabled": 0,
  "modified": "2024-02-16 13:44:19.196431",
  "module": null,
  "name": "delete cost center",
  "script": "frappe.ui.form.on('Cost Center', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Delete Current Doc'), function() {\r\n            frappe.confirm(\r\n                __('Are you sure you want to delete this Cost Center?'),\r\n                function() {\r\n                    // If user confirms, delete the current document\r\n                    frappe.call({\r\n                        method: 'frappe.client.delete',\r\n                        args: {\r\n                            doctype: 'Cost Center',\r\n                            name: frm.docname\r\n                        },\r\n                        callback: function(response) {\r\n                            if (!response.exc) {\r\n                                frappe.show_alert(__('Cost Center deleted successfully'), 5);\r\n                                frappe.set_route('List', 'Cost Center');\r\n                            } else {\r\n                                frappe.msgprint(__('An error occurred while deleting the Cost Center.'));\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            );\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-02-17 17:57:15.442439",
  "module": null,
  "name": "set serios",
  "script": "frappe.ui.form.on('Issue', {\r\n    custom_destination: function(frm) {\r\n        if (frm.doc.custom_destination === 'Issued') {\r\n            frm.set_value('naming_series', 'ISS-.YYYY.-');\r\n        } else if (frm.doc.custom_destination === 'Incoming') {\r\n            frm.set_value('naming_series', 'INC-.YYYY.-');\r\n        }\r\n        frm.refresh_field('naming_series');\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 0,
  "modified": "2024-02-17 17:01:03.772959",
  "module": null,
  "name": "issues1",
  "script": "\nfrappe.ui.form.on('Issue',function(frm,cdt,cdn) {\n\trefresh(frm) {\n\t\t// your code here\n    var child = locals[cdt][cdn];\n        if (frm.doc.type === \"internal\") {\n            A = frappe.get_all('Issue', filters={'custom_incoming_type': ['=','internal'],});\n            frm.set_value('link_name', 'A');\n        } else if (frm.doc.type === 'external') {\n            B = frappe.get_all('Issue', filters={'custom_incoming_type': ['=','external'],});\n            frm.set_value('link_name', 'B');\n        }\n\t}\n\t\n\t\t   frappe.msg.print(\"hello\");\n\t\t// your code here\n\t\t    // Iterate over each row in the child table\n //       frm.doc.links.forEach(function(row) {\n            // Access each field value in the row\n //           var field1Value = row.type;\n//            var field2Value = row.link_name;\n            \n //           frm.set_query(\"custom_link\", \"linked issues\", function() {\n//\treturn {\n//\t\tfilters: {\n//\t\t\t'custom_incoming_type': internal, // Replace this with your filter\n//\t\t}\n//\t}});\n //           // Do something with the field values\n //           console.log(\"Field 1 Value: \" + field1Value);\n//            console.log(\"Field 2 Value: \" + field2Value);\n\n            // You can perform any operations on the values here\n   \t\tfrm.set_query('custom_incoming_type', 'linked issues', () => {\n            return {\n                filters: {\n                    type: 'internal'\n                }\n            }\n})         \n            \n            \n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-04-16 16:52:38.348300",
  "module": null,
  "name": "Adding log",
  "script": "frappe.ui.form.on('Meeting', {\r\n    custom_send_mail_invitation_to_manager: function(frm) {\r\n        if(!frm.doc.custom_invitation_mail_template_for_president){\r\n            msgprint(\"Please add body mail in President Template\");\r\n        }else{// Bind behavior to custom_send_mail_invitation_to_manager button\r\n        frm.fields_dict.custom_send_mail_invitation_to_manager.$wrapper.on('click', function() {\r\n            update_custom_status(frm, 'Invitation sent to  Committee President');\r\n                frm.call(\"send_email_to_president\").then(() => {\r\n          cosnole.log(\"done\");\r\n        });\r\n            msgprint(\"Invitation sent to  Committe President\");\r\n        });\r\n        }\r\n    },\r\n    custom_send_mail_invitation_to_committee_deputy: function(frm) {\r\n        if(!frm.doc.custom_invitation_mail_template_for_deputy){\r\n            msgprint(\"Please Add body mail in Deputy Template\");\r\n        }else{// Bind behavior to custom_send_mail_invitation_to_committee_deputy button\r\n        frm.fields_dict.custom_send_mail_invitation_to_committee_deputy.$wrapper.on('click', function() {\r\n            update_custom_status(frm, 'Invitation sent to  Committee Deputy');\r\n            \r\n             frm.call(\"send_email_to_deputy\").then(() => {\r\n          cosnole.log(\"done\");\r\n        });\r\n            \r\n            msgprint(\"Invitation sent to  Committe Deputy\");\r\n        });\r\n        }\r\n    },\r\n    custom_send_mail_invitation_to_members: function(frm) {\r\n        // Bind behavior to custom_send_mail_invitation_to_members button\r\n        if(!frm.doc.custom_invitation_template_for_internal_members){\r\n            msgprint(\"Please add body mail in Internal Member Template\");\r\n        }else{    \r\n        frm.fields_dict.custom_send_mail_invitation_to_members.$wrapper.on('click', function() {\r\n            update_custom_status(frm, 'Invitation sent to Internal Members');\r\n        frm.call(\"send_email_internal\").then(() => {\r\n          cosnole.log(\"done\");\r\n        });\r\n\r\n            msgprint(\"Invitation sent to  Internal Members\");\r\n        });\r\n        }\r\n    },\r\n    custom_send_mail_invitation_to_external_members: function(frm) {\r\n        if(!frm.doc.custom_invitation_template_for_external_members){\r\n            msgprint(\"Please Add Body mail for external Member Template\");\r\n        // Bind behavior to custom_send_mail_invitation_to_external_members button\r\n        }else{\r\n        frm.fields_dict.custom_send_mail_invitation_to_external_members.$wrapper.on('click', function() {\r\n            update_custom_status(frm, 'Invitation sent to External Members');\r\n            \r\n               frm.call(\"send_email_external\").then(() => {\r\n          cosnole.log(\"done\");\r\n        });\r\n            msgprint(\"Invitation sent to  External Members\");\r\n        });\r\n        }\r\n    },\r\n    \r\n    \r\n    custom_send_invitation_to_council_entities_: function(frm) {\r\n        if(!custom_invitation_template_for_council_entities){\r\n            msgprint(\"Please Add Body mail for Council Entities Template\");\r\n        // Bind behavior to custom_send_mail_invitation_to_external_members button\r\n        }else{\r\n        frm.fields_dict.custom_send_mail_invitation_to_external_members.$wrapper.on('click', function() {\r\n            update_custom_status(frm, 'Invitation sent to External Members');\r\n            \r\n               frm.call(\"send_email_council\").then(() => {\r\n          cosnole.log(\"done\");\r\n        });\r\n            msgprint(\"Invitation sent to Council Entities\");\r\n        });\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n});\r\n\r\nfunction update_custom_status(frm, status) {\r\n    frm.set_value('custom_status', status);\r\n    frm.save().then(() => {\r\n        frm.refresh_field('custom_status');\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 0,
  "modified": "2024-03-20 10:10:27.822919",
  "module": null,
  "name": "Get member info",
  "script": "frappe.ui.form.on('Meeting', {\r\n    committee: function(frm) {\r\n        // Clear custom_president_mail and custom_deputy_mail fields\r\n        // frm.set_value('custom_president_mail', '');\r\n        // frm.set_value('custom_deputy_mail', '');\r\n        \r\n        \r\n        \r\n          var committee = frm.doc.committee;\r\n            if (committee) {\r\n            // Fetch the Committee document\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Committee',\r\n                    name: committee\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        var committee_doc = response.message;\r\n                        console.log('Committee Document:', committee_doc);\r\n                        var chairman_customer = committee_doc.committee_chairman;\r\n                        var deputy_customer = committee_doc.agents_committee;\r\n                        if (chairman_customer){\r\n                                 frappe.call({\r\n                                    method:'frappe.client.get',\r\n                                    args:{\r\n                                        doctype:'Customer',\r\n                                        name:chairman_customer\r\n                                    },\r\n                                     callback:function(response){\r\n                                      console.log('email is:', response.message.custom_email);\r\n                                      var email = response.message.custom_email;\r\n                                      frm.set_value('custom_president_mail',email);\r\n                                }\r\n                            });\r\n                            }\r\n                        if(deputy_customer){\r\n                                frappe.call({\r\n                                    method:'frappe.client.get',\r\n                                    args:{\r\n                                        doctype:'Customer',\r\n                                        name:deputy_customer\r\n                                    },\r\n                                     callback:function(response){\r\n                                      console.log('email is:', response.message.custom_email);\r\n                                      var email = response.message.custom_email;\r\n                                       frm.set_value('custom_deputy_mail',email);\r\n                                }\r\n                            });\r\n                        }    \r\n                  \r\n                         \r\n            \r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }  \r\n        \r\n////////////////////////////////////////original function/////////////////////////////////////////////////////////////////\r\n//         var committee = frm.doc.committee;\r\n\r\n//         if (committee) {\r\n//             // Fetch the Committee document\r\n//             frappe.call({\r\n//                 method: 'frappe.client.get',\r\n//                 args: {\r\n//                     doctype: 'Committee',\r\n//                     name: committee\r\n//                 },\r\n//                 callback: function(response) {\r\n//                     if (response.message) {\r\n//                         var committee_doc = response.message;\r\n//                         console.log('Committee Document:', committee_doc);\r\n\r\n//                         var chairman_customer = committee_doc.committee_chairman;\r\n//                         var deputy_customer = committee_doc.agents_committee;\r\n\r\n//                         // Fetch email addresses for Chairman and Deputy customers\r\n//                         fetchContactEmails(chairman_customer, function(chairman_emails) {\r\n//                             if (chairman_emails && chairman_emails.length > 0) {\r\n//                                 console.log('Chairman emails:', chairman_emails);\r\n//                                 frm.set_value('custom_president_mail', chairman_emails.join(', '));\r\n//                                 frm.refresh_field('custom_president_mail');\r\n//                             } else {\r\n//                                 console.log('Chairman emails not found for customer:', chairman_customer);\r\n//                             }\r\n//                         });\r\n\r\n//                         fetchContactEmails(deputy_customer, function(deputy_emails) {\r\n//                             if (deputy_emails && deputy_emails.length > 0) {\r\n//                                 console.log('Deputy emails:', deputy_emails);\r\n//                                 frm.set_value('custom_deputy_mail', deputy_emails.join(', '));\r\n//                                 frm.refresh_field('custom_deputy_mail');\r\n//                             } else {\r\n//                                 console.log('Deputy emails not found for customer:', deputy_customer);\r\n//                             }\r\n//                         });\r\n//                     }\r\n//                 }\r\n//             });\r\n//         }\r\n//     }\r\n// });\r\n\r\n///////////////////////////////////////////END OF ORIGINAL FUNCTION///////////////////////////////////////////////////////////\r\n\r\n// function fetchContactEmails(customer, callback) {\r\n//     // Fetch the Customer document\r\n//     frappe.call({\r\n//         method: 'frappe.client.get',\r\n//         args: {\r\n//             doctype: 'Customer',\r\n//             name: customer\r\n//         },\r\n//         callback: function(response) {\r\n//             if (response.message) {\r\n//                 var customer_doc = response.message;\r\n//                 var primary_contact = customer_doc.customer_primary_contact;\r\n//                 if (primary_contact) {\r\n//                     // Fetch the Contact document\r\n//                     frappe.call({\r\n//                         method: 'frappe.client.get',\r\n//                         args: {\r\n//                             doctype: 'Contact',\r\n//                             name: primary_contact\r\n//                         },\r\n//                         callback: function(contact_response) {\r\n//                             if (contact_response.message) {\r\n//                                 var contact_doc = contact_response.message;\r\n//                                 if (contact_doc.email_ids && contact_doc.email_ids.length > 0) {\r\n//                                     var emails = contact_doc.email_ids.map(function(email) {\r\n//                                         return email.email_id;\r\n//                                     });\r\n//                                     callback(emails);\r\n//                                 } else {\r\n//                                     callback([]);\r\n//                                 }\r\n//                             } else {\r\n//                                 callback([]);\r\n//                             }\r\n//                         }\r\n//                     });\r\n//                 } else {\r\n//                     callback([]);\r\n//                 }\r\n//             } else {\r\n//                 callback([]);\r\n//             }\r\n//         }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-20 13:42:04.247493",
  "module": null,
  "name": "validate same customer for khtab elm3mal",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    validate: function(frm) {\r\n        // Check if custom_service_group is \"\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a\"\r\n        if (frm.doc.custom_service_group === \"\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a\") {\r\n            // Get the year of the new Sales Invoice date\r\n            var posting_date = frm.doc.posting_date;\r\n            var year = new Date(posting_date).getFullYear(); // Extract the year part from the date\r\n\r\n            // Get all Sales Invoices for the same customer and custom_service_group\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Sales Invoice',\r\n                    filters: {\r\n                        customer: frm.doc.customer,\r\n                        custom_service_group: \"\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a\",\r\n                        docstatus: 1 // Submitted documents\r\n                    },\r\n                    fields: ['name', 'posting_date']\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message && response.message.length > 0) {\r\n                        // Filter the Sales Invoices for the same year\r\n                        var existing_invoices = response.message.filter(function(invoice) {\r\n                            return new Date(invoice.posting_date).getFullYear() == year;\r\n                        });\r\n\r\n                        if (existing_invoices.length > 0) {\r\n                            // If any submitted Sales Invoice is found in the same year, raise a validation error\r\n                            frappe.msgprint({\r\n                                title: __('Validation Error'),\r\n                                indicator: 'red',\r\n                                message: __(\"Another submitted Sales Invoice with custom_service_group '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a' already exists for this customer in the same year.\")\r\n                            });\r\n                            frappe.validated = false; // Prevent saving the Sales Invoice\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 0,
  "modified": "2024-02-18 10:09:15.376102",
  "module": null,
  "name": "issues3",
  "script": "// frappe.ui.form.on('Issue', {\n//     onload: function(frm) {\n//         let table = frm.doc.custom_links;\n\n//         for (let row of table) {\n//             if (row.type == 'external') {\n//                 frm.set_query(row.link_name, function() {\n//                     return {\n//                         filters: [\n//                             ['Issue', 'custom_incoming_type', 'in', 'external']\n//                         ]\n//                     };\n//                 });\n//             } else {\n//                 frm.set_query(row.link_name, function() {\n//                     return {\n//                         filters: [\n//                             ['Issue', 'custom_incoming_type', 'not in', 'external']\n//                         ]\n//                     };\n//                 });\n//             }\n//         }\n//     }\n// });\n\n\n// frappe.ui.form.on('Issue', {\n//     refresh: function(frm) {\n        \n//         // Filter options in the Issue field based on Type field in the child table\n//         frm.fields_dict['custom_links'].grid.get_field('type').get_query = function(doc, cdt, cdn) {\n//             var row = locals[cdt][cdn];\n//             if (row.type == 'internal') {\n//                 return {\n//                     filters: {\n//                         'link_name': cur_frm.doc.custom_incoming_type,\n//                     }\n//                 };\n//             } else {\n//                 // If no type is selected, return all issues\n//                 return {};\n//             }\n//         };\n//     }\n// });\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "testing submit",
  "enabled": 1,
  "modified": "2024-05-08 08:35:49.610375",
  "module": null,
  "name": "esdsdf",
  "script": "frappe.ui.form.on('testing submit', {\n\tbefore_save:function(frm){\n\t    \n// \t  if(frm.doc.items[0].item_code == '\u0625\u0639\u0627\u062f\u0629 \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u062e\u0637\u0627\u0628'){\n\t      frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Sales Invoice\",\n                    filters:{\n                        // \"items.item_code\": \"\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a\",\n                        \"customer\": frm.doc.customer\n                    },\n                  \n                },\n                callback: function(response) {\n                    console.log(\"All Sales Invoices \"  + response.message);\n                    console.log(get_today());\n                    console.log(frappe.boot.lang);\n                    \n                }\n            });\n\t      \n\t      \n\t      \n\t      \n\t  }\n\t    \n\t    \n\t    \n\t    \n// \t}\n\t\n\t\n\t\n\t\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-02-17 21:28:16.678297",
  "module": null,
  "name": "fetch income account",
  "script": "// frappe.ui.form.on('Sales Invoice', {\n// \tcustomer:function(frm){\n// \t    if(frm.doc.customer){\n\t        \n// \t      let table = frm.doc.items;\n\t      \n// \t      for(let row of table){\n// \t       frappe.call({\n//             method: 'frappe.client.get',\n//             args: {\n//             doctype: 'Item',\n//             name: group,\n//             fieldname: 'item_defaults'\n            \n//     },\n//     callback: function(r) {\n//         console.log(r.message.item_defaults[0]['income_account']);\n//         row.income_account = r.message.item_defaults[0]['income_account'];\n        \n        \n//     }\n\n// });\n\t          \n\t          \n\t          \n\t          \n// \t      }\n\t        \n\t        \n\t        \n\t        \n\t        \n\t        \n// \t    }\n\t    \n\t    \n\t    \n\t    \n\t    \n// \t}\n// })\n\nfrappe.ui.form.on('Sales Invoice Item', {\n\titem_code:function(frm,cdt,cdn){\n\t    var child = locals[cdt][cdn];\n\t     frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item',\n                name: child.item_code\n            },\n            callback: function(r) {\n                if (r.message) {\n                    frappe.model.set_value(cdt, cdn, 'income_account', r.message.item_defaults[0].income_account);\n                }\n            }\n        });\n\t    \n\t    \n\t    \n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-02-27 10:11:47.515715",
  "module": null,
  "name": "set filter for issue type",
  "script": "frappe.ui.form.on('Issue', {\r\n    refresh: function(frm) {\r\n        frm.fields_dict['custom_links'].grid.get_field('link_name').get_query = function(doc, cdt, cdn) {\r\n            var d = locals[cdt][cdn];\r\n            return {\r\n                filters: {\r\n                    'custom_incoming_type': d.type\r\n                }\r\n            };\r\n        };\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee Generalization",
  "enabled": 0,
  "modified": "2024-07-15 14:41:56.613061",
  "module": null,
  "name": "Committee Generalization",
  "script": "frappe.ui.form.on('Committee Generalization', {\nrefresh(frm) {\n    frm.add_custom_button(__('Action'), function(){\n      if(frm.doc.__unsaved) frappe.throw(\"save doc first\")\n      frappe.show_progress(\"Getting Contacts..\", 97, 100, \"Please wait\");\n\n      frappe.call({\n        \"method\": \"news_article.api.api.get_committee_mail2\",\n        \"args\": {\"gen\": frm.doc.name, \"customer_status\": frm.doc.condition_of_members},\n        \"callback\": function(r) {\n          let emails = r.message\n          let customer_emails = []\n          \n          // for (let email of emails) {\n          //     customer_emails.push(frappe.get_doc({\n          //         \"doctype\": \"Newsletter Attachment\",\n          //         \"parentfield\": \"customer_email\",\n          //         \"parenttype\": \"Customer Newsletter\",\n          //         \"email\": email\n          //     }))\n          // }\n          frappe.new_doc(\"Customer Newsletter\", {\n            \n          }).then(() => {\n            for(let email of emails) {\n                // console.log(email);\n              cur_frm.add_child(\"customer_email\",{\n                \"email\": email['email']\n              })\n            }\n            cur_frm.refresh_fields()\n          })\n        }\n      })\n    }, __(\"\"));\n\n  }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 0,
  "modified": "2024-02-19 10:14:42.409988",
  "module": null,
  "name": "AAAA",
  "script": "frappe.ui.form.on('Committee', {\n\tonload:function(frm){\n\t    \n\t    var html_content = frm.doc.custom_service_name;\n\t    \n\t    function renderHTML() {\n            frm.fields_dict.html_content.$wrapper.html(`\n        \n        \n        <html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\n.card {\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n  width: 100%;\n  border-radius: 5px;\n  padding:15px\n}\n\n.card:hover {\n  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\n}\n\n.container {\n  padding: 2px 16px;\n}\n\n.column {\n  float: left;\n  width: 32%;\n  margin: 0 3px;\n}\n\n.row {\n  margin: 0 -5px;\n  width: 100%;\n}\n\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n\n.total {\nfont-size: 20px;\nfont-weight: bold;\n}\n\n.active {\ncolor: green;\nfont-size: 20px;\nfont-weight: bold;\n}\n\n.inactive {\ncolor: red;\nfont-size: 20px;\nfont-weight: bold;\n}\n\n.num {\nfont-size: 20px;\nfont-weight: bold;\n}\n</style>\n</head>\n<body>\n<div class=\"row\">\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Total Members</b></h5> \n    <p class=\"total\"><b>${total}</b></p> \n  </div>\n</div>\n</div>\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Active Members</b></h5> \n    <p class=\"active\">${active}</p> \n  </div>\n</div>\n</div>\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Inactive Members</b></h5> \n    <p class=\"inactive\">${inactive}</p> \n  </div>\n</div>\n</div>\n\n</div>\n\n<br>\n\n<div class=\"row\">\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b> Annual meeting</b></h5> \n    <p class=\"num\"><b>${annual}</b></p> \n  </div>\n</div>\n</div>\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Meeting</b></h5> \n    <p class=\"num\">${meeting}</p> \n  </div>\n</div>\n</div>\n\n<div class=\"column\">\n<div class=\"card\">\n  <div class=\"container\">\n    <h5><b>Products</b></h5> \n    <p class=\"num\">${product_count}</p> \n  </div>\n</div>\n</div>\n\n</div>\n\n</body>\n</html>\n    \n        \n        `);\n        }\n        \n    }\n});\n\t    \n\t    \n\t    \n\t    \n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-29 12:20:07.987890",
  "module": null,
  "name": "Sales Invoice Service Name",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    refresh: function(frm) {\r\n        \r\n        var service = frm.doc.custom_service_name;\r\n        var group = frm.doc.custom_service_group;\r\n        var bundle = frm.doc.custom_bundle_;\r\n        var fr3o = frm.doc.custom_fr3oon;\r\n        var renew = frm.doc.custom_renew_membership;\r\n        var current = '';\r\n        \r\n        if(group) {\r\n            current = group;\r\n        } else if (bundle) {\r\n            current = '\u062f\u0641\u0639 \u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629';\r\n        } else if (fr3o) {\r\n            current = fr3o;\r\n        }\r\n        \r\n        if(renew){\r\n            current = '\u062a\u062c\u062f\u064a\u062f \u0627\u0644\u0639\u0636\u0648\u064a\u0629';\r\n        }\r\n\r\n        frm.fields_dict.custom_service_name.$wrapper.html(`\r\n            <html>\r\n                <head>\r\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n                </head>\r\n                <body>\r\n                    <p class='title'>${current}</p>\r\n                </body>\r\n            </html>\r\n        `);\r\n\r\n        // Apply CSS directly to the Sales Invoice HTML section\r\n        frm.$wrapper.find('.title').css({\r\n            'font-size': '20px',\r\n            'text-align': 'center'\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-04-15 15:46:58.182451",
  "module": null,
  "name": "Report Meeting Button Print",
  "script": "frappe.ui.form.on('Meeting', {\n\trefresh(frm) {\n\t    \n\t    let workflow_state = 'Approved From Deputy';\n\t    let print_format = 'Meeting Report';\n\t    \n\t    if(frm.doc.workflow_state === workflow_state){\n\t\t  //  let print_format = frm.doc.agriculture_certificatee;\n\t\t  //let print_format = '\u0637\u0644\u0628 \u0633\u062f\u0627\u062f \u0646\u0642\u062f\u064a';\n\t\t  let print_format = 'Meeting Report';\n\n\t\t  //  if(print_format){\n\t\t     frm.add_custom_button(__('Meeting Report'), function() {\n                // var items = frm.doc.items;\n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n                );\n\t\t     });\n\t\t  //  }\n\t\t   \n\t\t}\n\n\t}\n\t    \n  \n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-02-19 17:44:50.120344",
  "module": null,
  "name": "issue title",
  "script": "frappe.ui.form.on('Issue', {\r\n    onload: function(frm) {\r\n        \r\n        var destination = frm.doc.custom_destination;\r\n        var incoming = frm.doc.custom_incoming_type;\r\n        var current = '';\r\n\r\n        if (destination == 'Issued' && incoming == 'external') {\r\n            current = '\u0627\u0644\u0635\u0627\u062f\u0631 \u0627\u0644\u0639\u0627\u0645';\r\n        } else if (destination == 'Incoming' && incoming == 'external') {\r\n            current = '\u0627\u0644\u0648\u0627\u0631\u062f \u0627\u0644\u0639\u0627\u0645';\r\n        } else if (destination == 'Issued' && incoming == 'internal') {\r\n            current = '\u0627\u0644\u0635\u0627\u062f\u0631 \u0627\u0644\u062f\u0627\u062e\u0644\u064a';\r\n        } else if (destination == 'Incoming' && incoming == 'internal') {\r\n            current = '\u0627\u0644\u0648\u0627\u0631\u062f \u0627\u0644\u062f\u0627\u062e\u0644\u064a';\r\n        }\r\n\r\n        frm.fields_dict.custom_labeltype.$wrapper.html(`\r\n            <html>\r\n                <head>\r\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n                    <style>\r\n                        .title {\r\n                            font-size: 20px;\r\n                            text-align: center;\r\n                        }\r\n                    </style>\r\n                </head>\r\n                <body>\r\n                    <p class='title'>${current}</p>\r\n                </body>\r\n            </html>\r\n        `);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-20 22:25:23.169089",
  "module": null,
  "name": "Increment Serial Lab",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    on_submit: function(frm) {\n        var last_serial = frm.doc.items[0].custom_khetab_print_serial;\n\n        if (frm.doc.items[0].item_code == '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a') {\n            last_serial++;\n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Item\",\n                    name: '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a',\n                    fieldname: {\n                        'custom_khtab_lab_print_serial': last_serial\n                    }\n                },\n                callback: function(response) {\n                    console.log('Updated ');\n                    // msgprint('Updated');\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-03-24 21:10:20.387126",
  "module": null,
  "name": "Attachement Validation before save",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\nbefore_save:function(frm){\n    \n    \n    if(frm.doc.items[0].item_code == '\u0628\u0637\u0627\u0642\u0629 \u0645\u0633\u062a\u0644\u0632\u0645\u0627\u062a \u0623\u0646\u062a\u0627\u062c'){\n        \n        if(!frm.doc.custom_registration_number_in_commercial_register_attachment){\n            msgprint(\"Please add The Commercial Register Attachment\");\n            frappe.validated = false;\n            \n            \n        }else if(!frm.doc.custom_registration_number_in_exporter_register_attachment){\n            msgprint(\"Please Add The Exporter Register Attachment\");\n            frappe.validated = false;\n        }else if(!frm.doc.custom_tax_id){\n            msgprint(\"Please Add Tax ID Attachment\");\n            frappe.validated = false;\n        }else if(!frm.doc.custom_export_volume_last_five_years){\n            msgprint(\"Please Add Export Volume Last Five Years Attachments\");\n            frappe.validated = false;\n        }else{\n            console.log(\"Done Ya Negm\");\n            \n        }\n        \n        \n        \n        \n        \n    }\n    \n    \n    \n}\n\n\n\n\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-23 18:28:10.140042",
  "module": null,
  "name": "Reprint Lab Validation",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tbefore_save:function(frm){\n\t    if(frm.doc.items[0].item_code == '\u0625\u0639\u0627\u062f\u0629 \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u062e\u0637\u0627\u0628'){\n\t        var currentYear = new Date().getFullYear();\n            var startDate = new Date(currentYear, 0, 1); // January 1st\n            var endDate = new Date(currentYear, 11, 31);\n\t      frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Sales Invoice\",\n                    filters:{\n                      \"customer\": frm.doc.customer,\n                      \"status\": \"Paid\",\n                    //   \"posting_date\": [\"between\", startDate, endDate],\n                      \"custom_service_group\": \"\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a\"\n                    },\n                },\n                callback: function(response) {\n                    if(response.message.length === 0){\n                        frappe.validated = false;\n\n                        frappe.msgprint(\"\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u0644\u064a\u0633 \u0644\u062f\u064a\u0647 \u062e\u0637\u0627\u0628 \u0645\u0639\u0645\u0644 \u0645\u0631\u0643\u0632\u064a \u0641\u064a \u0627\u0644\u0633\u0646\u0629 \u0627\u0644\u062d\u0627\u0644\u064a\u0629\");\n                    }else{\n                    console.log(response.message);\n                    \n                    }   \n                }\n                \n            });\n\t    \n\t    \n\t    } \n\t    \n\t}\n})\n\n\n\n\n\n\nfrappe.ui.form.on('Sales Invoice', {\n\tbefore_submit:function(frm){\n\t    \n\t  if(frm.doc.items[0].item_code == '\u0625\u0639\u0627\u062f\u0629 \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u062e\u0637\u0627\u0628'){\n\t        var currentYear = new Date().getFullYear();\n            var startDate = new Date(currentYear, 0, 1); // January 1st\n            var endDate = new Date(currentYear, 11, 31);\n\t      frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Sales Invoice\",\n                    filters:{\n                      \"customer\": frm.doc.customer,\n                      \"status\": \"Paid\",\n                    //   \"date\": [\"between\", startDate, endDate],\n                      \"custom_service_group\": \"\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a\"\n                    },\n                },\n                callback: function(response) {\n                    \n                       \n                    \n                    console.log(response.message);\n                    \n                    let invoice = response.message[0]['name'];\n                    console.log(invoice);\n                    \n                    frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Sales Invoice\",\n                    filters:{\n                      \"name\": invoice,\n                    },\n                },\n                callback: function(response) {\n                    console.log(response.message);\n                    console.log(response.message.items[0].custom_khetab_print_serial);\n                    console.log(\"last_print Done\");\n                    var last_print = response.message.items.custom_khetab_print_serial;\n                    frm.set_value(\"custom_last_print_serial_for_reprint_khetab\", response.message.items[0].custom_khetab_print_serial);\n                    \n                \n                    \n                    \n                    \n                    \n                }\n                \n            });\n                    \n                    \n                     \n                }\n                \n            });\n\t      \n\t      \n\t      \n\t      \n\t  }\n\t    \n\t    \n\t    \n\t    \n\t}\n\t\n\t\n\t\n\t\n\t\n});\n\nfrappe.ui.form.on('Sales Invoice', {\n\trefresh: function(frm) {\n\t\tif(frm.doc.status === 'Paid' && frm.doc.items[0].item_code == '\u0625\u0639\u0627\u062f\u0629 \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u062e\u0637\u0627\u0628'){\n\t\t    let print_format = frm.doc.items[0].custom_print_format;\n\t\t     frm.add_custom_button(__('\u0625\u0639\u0627\u062f\u0629 \u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u062e\u0637\u0627\u0628'), function() {\n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n                );\n\t\t     });\n\t\t    }\n\t\t   \n\n\t}\n\t\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-02-25 11:55:36.565231",
  "module": null,
  "name": "show html in budget request",
  "script": "frappe.ui.form.on('Budget Items Details', {\r\n    custom_show: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n        var dialog = new frappe.ui.Dialog({\r\n            title: __('Enter Monthly Budget Quantities'),\r\n            fields: [\r\n                {\r\n                    fieldname: 'budget_table',\r\n                    fieldtype: 'HTML',\r\n                    label: __('Budget Table')\r\n                }\r\n            ]\r\n        });\r\n\r\n        // Add primary action button\r\n        dialog.set_primary_action(__('Update'), function() {\r\n            var dialog_values = {};\r\n            var total_quantity = 0;\r\n            for (var i = 0; i < months.length; i++) {\r\n                var month_fieldname = months[i].toLowerCase();\r\n                dialog_values[month_fieldname] = $('#' + month_fieldname + '_' + child.idx).val();\r\n                total_quantity += parseFloat(dialog_values[month_fieldname]) || 0;\r\n            }\r\n            console.log('Dialog Values:', dialog_values);\r\n\r\n            frappe.model.set_value(cdt, cdn, 'total_quantity', total_quantity);\r\n\r\n            var expected_price = child.expected_price;\r\n            if (!isNaN(expected_price) && !isNaN(total_quantity)) {\r\n                var total = total_quantity * expected_price;\r\n                console.log('Total Quantity:', total_quantity);\r\n                console.log('Expected Price:', expected_price);\r\n                console.log('Total:', total);\r\n                frappe.model.set_value(cdt, cdn, 'total', total);\r\n            } else {\r\n                frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\r\n            }\r\n\r\n            frappe.model.set_value(cdt, cdn, dialog_values);\r\n\r\n            frm.save();\r\n            dialog.hide();\r\n            location.reload()\r\n        });\r\n\r\n        var table_html = '<table class=\"table table-bordered\">';\r\n        for (var i = 0; i < 12; i++) {\r\n            if (i % 6 === 0) {\r\n                table_html += '<tr>';\r\n            }\r\n            var month_fieldname = months[i].toLowerCase();\r\n            var month_value = child[month_fieldname] || '';\r\n            // Append the row index to the ID of each input field\r\n            table_html += '<td><label>' + months[i] + '</label><input type=\"text\" class=\"form-control float-input\" id=\"' + month_fieldname + '_' + child.idx + '\" name=\"' + month_fieldname + '\" value=\"' + month_value + '\"></td>';\r\n            if ((i + 1) % 6 === 0) {\r\n                table_html += '</tr>';\r\n            }\r\n        }\r\n        table_html += '</table>';\r\n        dialog.fields_dict['budget_table'].$wrapper.html(table_html);\r\n\r\n        dialog.show();\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n// Copyright (c) 2024, ahmed and contributors\r\n// For license information, please see license.txt\r\n\r\nfrappe.ui.form.on(\"Budget Request\", {\r\n  department(frm) {\r\n      if(frm.doc.__unsaved && !frm.doc.department) frappe.throw(\"set department first and save the doc \");\r\n      if(frm.doc.department){\r\n    frappe.call({\r\n      method: \"budget.budge.api.api.get_items_per_department\",\r\n      args: {\r\n        department: frm.doc.department,\r\n      },\r\n      callback(r) {\r\n        frm.doc.budget_items_details = [];\r\n        let items = r.message;\r\n        items.forEach((item) => {\r\n          frm.add_child(\"budget_items_details\", {\r\n            item_name: item.name,\r\n            expense_account: item.expense_account,\r\n          });\r\n        });\r\n        frm.refresh_fields();\r\n      },\r\n    });\r\n      }\r\n  },\r\n//   price_list(frm) {\r\n//     frm.doc.budget_items_details.forEach((item) => {\r\n//       frappe.db\r\n//         .get_value(\r\n//           \"Item Price\",\r\n//           { item_code: item.item_name, price_list: frm.doc.price_list },\r\n//           \"price_list_rate\",\r\n//         )\r\n//         .then((r) => {\r\n//           item.expected_price = r.message?.price_list_rate;\r\n//           frm.refresh_field(\"budget_items_details\");\r\n//         });\r\n//     });\r\n//   },\r\n  refresh(frm) {\r\n    let months = {\r\n        january: { quantity: 0, amount: 0 },\r\n        february: { quantity: 0, amount: 0 },\r\n        march: { quantity: 0, amount: 0 },\r\n        april: { quantity: 0, amount: 0 },\r\n        may: { quantity: 0, amount: 0 },\r\n        june: { quantity: 0, amount: 0 },\r\n        july: { quantity: 0, amount: 0 },\r\n        august: { quantity: 0, amount: 0 },\r\n        september: { quantity: 0, amount: 0 },\r\n        october: { quantity: 0, amount: 0 },\r\n        november: { quantity: 0, amount: 0 },\r\n        december: { quantity: 0, amount: 0 },\r\n    };\r\n\r\n    let total_quantity = 0;\r\n\r\n    frm.doc.budget_items_details.forEach((item) => {\r\n        let item_total_quantity = 0;\r\n\r\n        for (let month of Object.keys(months)) {\r\n            item_total_quantity += item[month];\r\n        }\r\n\r\n        item.total_quantity = item_total_quantity;\r\n        item.total = item_total_quantity * (item.expected_price || 0);\r\n\r\n        if (item.status == \"Accepted\") {\r\n            total_quantity += item_total_quantity;\r\n            for (let month of Object.keys(months)) {\r\n                months[month].quantity += item[month];\r\n                months[month].amount += (item[month] || 0) * (item.expected_price || 0);\r\n            }\r\n        }\r\n    });\r\n\r\n    frm.doc.item_summary = [];\r\n    let total_amount = 0;\r\n\r\n    for (let month of Object.keys(months)) {\r\n        frm.add_child(\"item_summary\", {\r\n            month: month,\r\n            total: months[month].amount,\r\n            total_quantity: months[month].quantity,\r\n        });\r\n        total_amount += months[month].amount;\r\n    }\r\n\r\n    frm.doc.total = total_amount;\r\n    frm.doc.total_quantity = total_quantity;\r\n    frm.refresh_fields();\r\n}\r\n\r\n});\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-02-25 11:55:36.492984",
  "module": null,
  "name": "calculate total ratio",
  "script": "frappe.ui.form.on('Budget Request', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 0) {\r\n            // Loop through each row in the child table\r\n            frm.doc.item_summary.forEach(function(row) {\r\n                // Calculate custom_ratio_ for the current row\r\n                var custom_ratio = row.total && frm.doc.total ? (row.total / frm.doc.total) * 100 : 0;\r\n                // Update custom_ratio_ in the row\r\n                frappe.model.set_value(row.doctype, row.name, 'custom_ratio_', custom_ratio);\r\n            });\r\n\r\n            // Calculate the sum of all custom ratios\r\n            var custom_total_ratio = frm.doc.item_summary.reduce(function(acc, row) {\r\n                return acc + (row.custom_ratio_ || 0);\r\n            }, 0);\r\n\r\n            // Update the custom_total_ratio field in the parent form\r\n            frm.set_value('custom_total_ratio', custom_total_ratio);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-24 00:44:22.763673",
  "module": null,
  "name": "Mosanda Serial",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    before_submit: function(frm) {\n        var last_serial = frm.doc.custom_mina_el_king;\n        var qty = frm.doc.total_qty;\n\n        if (frm.doc.custom_fr3oon){\n            \n                 frappe.call({\n                method: \"frappe.client.get_single_value\",\n                args: {\n                    doctype: \"Sales Invoice Print Settings\",\n                    field: 'mosanda_print_serial'\n                    \n                },\n                callback: function(response) {\n                    console.log('Updated ');\n                    last_serial = response.message;\n                    frm.set_value(\"custom_mina_el_king\", last_serial);\n                    // frm.doc.custom_mina_elking = response.message;\n                    // frappe.set_value('mosanda_print_serial', response.message);\n                    \n\n                    msgprint('Updated');\n                       frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Sales Invoice Print Settings\",\n                    name: 'Sales Invoice Print Settings',\n                    fieldname: {\n                        'mosanda_print_serial': frm.doc.total_qty + frm.doc.custom_mina_el_king\n                    }\n                },\n                callback: function(response) {\n                    console.log('Updated ');\n                \n                }\n            });\n                }\n            });\n            \n            \n            \n            let items = frm.doc.items;\n            let mina = frm.doc.custom_mina_el_king + frm.doc.total_qty;\n            \n            for(let row of items){\n                if(row.idx == 1){\n                row.custom_mosanda = mina;\n                }\n                if(row.idx > 1){\n                    let k = items[row.idx - 2].custom_mosanda; // 126\n                    let m = items[row.idx - 2].qty;\n                    // console.log(\"George El King\" + k);\n                    // console.log(\"Mina El King\" + m);\n                    row.custom_mosanda = k + m;\n                    \n                }\n            \n            \n            // var total = frm.doc.total_qty + frm.doc.custom_mina_el_king;\n            // frappe.call({\n            //     method: \"frappe.client.set_value\",\n            //     args: {\n            //         doctype: \"Sales Invoice Print Settings\",\n            //         name: 'Sales Invoice Print Settings',\n            //         fieldname: {\n            //             'mosanda_print_serial': frm.doc.total_qty + frm.doc.custom_mina_el_king\n            //         }\n            //     },\n            //     callback: function(response) {\n            //         console.log('Updated ');\n                \n            //     }\n            // });\n        }\n  \n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-22 19:58:01.408365",
  "module": null,
  "name": "Fetch set",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tbefore_save:function(frm) {\n\t\t\n\t\tif(frm.doc.custom_fr3oon){\n\t\t    frm.set_value(\"custom_service_group_items\", '\u0625\u0633\u062a\u0645\u0627\u0631\u0629 \u0627\u0644\u0645\u0633\u0627\u0646\u062f\u0629');\n\t\t}else if(frm.doc.custom_service_group){\n\t\t    frm.set_value('custom_service_group_items', frm.doc.custom_service_group);\n\t\t}else if(frm.doc.custom_bundle_){\n\t\t    frm.set_value('custom_service_group_items', '\u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629');\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-23 16:48:02.150054",
  "module": null,
  "name": "show all contacts",
  "script": "// Define a variable to store the reference to the message container\r\nlet messageContainer;\r\nlet isShow = false;\r\n\r\nfrappe.ui.keys.on('f2', function(e) {\r\n    const customer = cur_frm.doc.customer;\r\n    if(customer && !isShow){\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Contact',\r\n            filters: [\r\n                ['Dynamic Link', 'link_doctype', '=', 'Customer'],\r\n                ['Dynamic Link', 'link_name', '=', customer],\r\n                ['Dynamic Link', 'parenttype', '=', 'Contact']\r\n            ],\r\n            fields: ['name', 'first_name', 'last_name', 'designation', 'email_id', 'status'],\r\n            order_by: 'tabContact.modified asc'\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                let htmlContent = '<div style=\"max-height: 300px; overflow-y: auto;\"><h3 style=\"text-align: center;\">Member Contacts</h3><table border=\"1\" style=\"width: 100%;\"><tr><th>Name</th><th>Designation</th><th>Email</th><th>Status</th></tr>';\r\n                \r\n                r.message.forEach(contact => {\r\n                    const name = contact.first_name + ' ' + contact.last_name;\r\n                    const designation = contact.designation || '';\r\n                    const email = contact.email_id || '';\r\n                    const status = contact.status || '';\r\n\r\n                    htmlContent += `<tr><td>${name}</td><td>${designation}</td><td>${email}</td><td>${status}</td></tr>`;\r\n                });\r\n\r\n                htmlContent += '</table></div>';\r\n\r\n                // Clear previous content before showing new content\r\n                if (messageContainer) {\r\n                    messageContainer.innerHTML = '';\r\n                }\r\n\r\n                // Show new content\r\n                messageContainer = frappe.msgprint(htmlContent);\r\n                isShow = true;\r\n            } else {\r\n                frappe.msgprint(__('No contacts found for the customer.'));\r\n            }\r\n        }\r\n    \r\n    });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-02-24 22:34:46.966171",
  "module": null,
  "name": "price list",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tcustomer:function(frm) {\n\t\tif(frm.doc.custom_service_group){\n\t\t  //  frm.refresh_field(\"selling_price_list\");\n\t\t  \n\t\t  var price_list = getpricelist(frm.doc.custom_service_group);\n\t\t  \n\t\t  frm.set_value(\"selling_price_list\", price_list);\n\t\t}\n\t\t\n\t}\n});\n\n\n\n\nfunction getpricelist(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Grouped Item',\n                filters: { 'name': name },\n                fieldname: 'price_list' \n            },\n            callback: function(r) {\n                memo = r.message.price_list;\n            }\n        });\n        return memo;\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-06-20 13:33:56.665991",
  "module": null,
  "name": "advanced search",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    custom_advance_search: function(frm) {\r\n        // Add custom button to trigger advanced search\r\n        // frm.add_custom_button(__('Advanced member Search'), function() {\r\n            // Open dialog box for input and search results\r\n            var d = new frappe.ui.Dialog({\r\n                title: __('Advanced Search'),\r\n                fields: [\r\n                    {'label': 'Tax ID', 'fieldname':'tax_id', 'fieldtype':'Data'},\r\n                    {'label': 'Tax ID 2', 'fieldname':'tax_id_2', 'fieldtype':'Data'},\r\n                    {'label': 'Customer Name', 'fieldname':'customer_name', 'fieldtype':'Data'},\r\n                    {'label': 'Custom Company Code', 'fieldname':'custom_company_code', 'fieldtype':'Data'},\r\n                    {fieldname: 'results', fieldtype: 'HTML'}\r\n                ],\r\n            });\r\n\r\n            d.set_primary_action(__('Search'), function() {\r\n                searchCustomers();\r\n            });\r\n\r\n            d.show();\r\n\r\n            // Function to search for customers\r\n            function searchCustomers() {\r\n                var values = d.get_values();\r\n                frappe.call({\r\n                    method: 'frappe.client.get_list',\r\n                    args: {\r\n                        doctype: 'Customer',\r\n                        filters: {\r\n                            tax_id: values.tax_id,\r\n                            tax_id_2: values.tax_id_2,\r\n                            customer_name: values.customer_name,\r\n                            custom_company_code: values.custom_company_code\r\n                        },\r\n                        fields: ['name']\r\n                    },\r\n                    callback: function(response) {\r\n                        // Handle search results and update table\r\n                        var customers = response.message;\r\n                        var html = '<table class=\"table table-bordered\">'\r\n                                    + '<thead><tr><th>Select</th><th>Customer</th></tr></thead>'\r\n                                    + '<tbody>';\r\n                        customers.forEach(function(customer) {\r\n                            html += '<tr><td><button class=\"btn btn-primary select-customer\" data-customer=\"' + customer.name + '\">Select</button></td><td>' + customer.name + '</td></tr>';\r\n                        });\r\n                        html += '</tbody></table>';\r\n                        d.fields_dict.results.$wrapper.html(html);\r\n                        // Bind click event for select button\r\n                        d.fields_dict.results.$wrapper.find('.select-customer').click(function() {\r\n                            var selected_customer = $(this).attr('data-customer');\r\n                            frm.set_value('customer', selected_customer);\r\n                            d.hide();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        // });\r\n    }\r\n    \r\n});\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-06-26 17:54:07.785972",
  "module": null,
  "name": "Budget request HTML",
  "script": "frappe.ui.form.on('Budget Request',  {\r\n    refresh: function(frm) {\r\n        // use the __islocal value of doc,  to check if the doc is saved or not\r\n        if(frm.doc.__unsaved && !frm.doc.department) frappe.msgprint(\"Set Department First and Save The Doc \");\r\n        if(frm.doc.department && !frm.doc.budget_items_details.length){\r\n            frappe.call({\r\n                method: \"budget.budge.api.api.get_items_per_department\",\r\n                args: {\r\n                    department: frm.doc.department,\r\n                },\r\n                callback(r) {\r\n                    frm.doc.budget_items_details = [];\r\n                    let items = r.message;\r\n                    items.forEach((item) => {\r\n                        frm.add_child(\"budget_items_details\", {\r\n                            item_name: item.name,\r\n                            expense_account: item.expense_account,\r\n                        });\r\n                    });\r\n                    frm.refresh_fields();\r\n                },\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n// frm.doc.__unsaved\r\n\r\nfrappe.ui.form.on(\"Budget Request\", {\r\n  department(frm) {\r\n      if( frm.doc.__unsaved && !frm.doc.department){\r\n          msgprint(\"Set Department First and Save the Doc \");\r\n      }\r\n      if(frm.doc.department){\r\n    frappe.call({\r\n      method: \"budget.budge.api.api.get_items_per_department\",\r\n      args: {\r\n        department: frm.doc.department,\r\n      },\r\n      callback(r) {\r\n        frm.doc.budget_items_details = [];\r\n        let items = r.message;\r\n        console.log(r.message);\r\n        items.forEach((item) => {\r\n          frm.add_child(\"budget_items_details\", {\r\n            item_name: item.name,\r\n            expense_account: item.expense_account,\r\n          });\r\n        });\r\n        frm.refresh_fields();\r\n      },\r\n    });\r\n      }\r\n  },\r\n\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on('Budget Items Details', {\r\n    custom_show: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n        // Check if form is unsaved\r\n        if (frm.doc.__unsaved) {\r\n            frappe.msgprint(__('Please save the form before using this feature.'));\r\n            return;\r\n        }\r\n\r\n        var dialog = new frappe.ui.Dialog({\r\n            title: __('Enter Monthly Budget Quantities'),\r\n            fields: [\r\n                {\r\n                    fieldname: 'budget_table',\r\n                    fieldtype: 'HTML',\r\n                    label: __('Budget Table')\r\n                }\r\n            ]\r\n        });\r\n\r\n        // Add primary action button\r\n        dialog.set_primary_action(__('Update'), function() {\r\n            var dialog_values = {};\r\n            var total_quantity = 0;\r\n            for (var i = 0; i < months.length; i++) {\r\n                var month_fieldname = months[i].toLowerCase();\r\n                dialog_values[month_fieldname] = $('#' + month_fieldname + '_' + child.idx).val();\r\n                total_quantity += parseFloat(dialog_values[month_fieldname]) || 0;\r\n            }\r\n            console.log('Dialog Values:', dialog_values);\r\n\r\n            frappe.model.set_value(cdt, cdn, 'total_quantity', total_quantity);\r\n\r\n            var expected_price = child.expected_price;\r\n            if (!isNaN(expected_price) && !isNaN(total_quantity)) {\r\n                var total = total_quantity * expected_price;\r\n                console.log('Total Quantity:', total_quantity);\r\n                console.log('Expected Price:', expected_price);\r\n                console.log('Total:', total);\r\n                frappe.model.set_value(cdt, cdn, 'total', total);\r\n            } else {\r\n                frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\r\n            }\r\n\r\n            frappe.model.set_value(cdt, cdn, dialog_values);\r\n\r\n            frm.save();\r\n            dialog.hide();\r\n            location.reload()\r\n        });\r\n\r\n        var table_html = '<table class=\"table table-bordered\">';\r\n        for (var i = 0; i < 12; i++) {\r\n            if (i % 6 === 0) {\r\n                table_html += '<tr>';\r\n            }\r\n            var month_fieldname = months[i].toLowerCase();\r\n            var month_value = child[month_fieldname] || '';\r\n            // Append the row index to the ID of each input field\r\n            table_html += '<td><label>' + months[i] + '</label><input type=\"text\" class=\"form-control float-input\" id=\"' + month_fieldname + '_' + child.idx + '\" name=\"' + month_fieldname + '\" value=\"' + month_value + '\"></td>';\r\n            if ((i + 1) % 6 === 0) {\r\n                table_html += '</tr>';\r\n            }\r\n        }\r\n        table_html += '</table>';\r\n        dialog.fields_dict['budget_table'].$wrapper.html(table_html);\r\n\r\n        dialog.show();\r\n    },\r\n    expected_price: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        var total_quantity = child.total_quantity || 0;\r\n        var expected_price = child.expected_price;\r\n\r\n        if (!isNaN(expected_price) && !isNaN(total_quantity)) {\r\n            var total = total_quantity * expected_price;\r\n            console.log('Total Quantity:', total_quantity);\r\n            console.log('Expected Price:', expected_price);\r\n            console.log('Total:', total);\r\n            frappe.model.set_value(cdt, cdn, 'total', total);\r\n        } else {\r\n            frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on('Budget Request', {\r\n    // Custom function to perform calculations\r\n    before_save: function(frm) {\r\n        let months = [\r\n            \"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\",\r\n            \"august\", \"september\", \"october\", \"november\", \"december\"\r\n        ];\r\n\r\n        let total_quantity = 0;\r\n        let total_amount = 0;\r\n\r\n        frm.doc.item_summary = [];\r\n\r\n        for (let month of months) {\r\n            let month_total_quantity = 0;\r\n            let month_total_amount = 0;\r\n\r\n            frm.doc.budget_items_details.forEach((item) => {\r\n                // Consider the value as zero if the status is not \"Accepted\"\r\n                let quantity = item.status == \"Accepted\" ? (item[month] || 0) : 0;\r\n                let amount = quantity * (item.expected_price || 0);\r\n\r\n                month_total_quantity += quantity;\r\n                month_total_amount += amount;\r\n            });\r\n\r\n            // Add summary for the month\r\n            frm.add_child(\"item_summary\", {\r\n                month: month,\r\n                total: month_total_amount,\r\n                total_quantity: month_total_quantity,\r\n            });\r\n\r\n            total_amount += month_total_amount;\r\n            total_quantity += month_total_quantity;\r\n        }\r\n\r\n        frm.doc.total = total_amount;\r\n        frm.doc.total_quantity = total_quantity;\r\n\r\n        // // Explicitly show the submit button if the form is saved\r\n        // if (frm.doc.docstatus === 0 && frm.doc.__unsaved) {\r\n        //     frm.set_primary_action(__('Submit'), function() {\r\n        //         frm.save('Submit');\r\n        //     });\r\n        // }\r\n\r\n        frm.refresh_fields();\r\n    },\r\n\r\n    // Call the calculation function after the form is saved\r\n    // after_save: function(frm) {\r\n    //     frm.events.calculate_totals(frm);\r\n    // }\r\n});\r\n\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on('Budget Request', {\r\n    before_save: function(frm) {\r\n        let total_quantity = 0;\r\n\r\n        // Iterate over each row in budget_items_details\r\n        frm.doc.budget_items_details.forEach((item) => {\r\n            total_quantity += (item.total_quantity || 0); // Sum up the total_quantity of each row\r\n        });\r\n\r\n        // Update total_quantity field in the parent form\r\n        frm.doc.total_quantity = total_quantity;\r\n\r\n        frm.refresh_fields();\r\n    },\r\n});\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-08-04 11:45:29.176340",
  "module": null,
  "name": "create_budget_after_CEO_Approve",
  "script": "\n\nfrappe.ui.form.on(\"Budget Request\", {\n    before_workflow_action: (frm) => {\n        console.log(frm.doc.workflow_state);\n        console.log(frm.selected_workflow_action);\n        if (\n            frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\" &&\n            frm.selected_workflow_action === \"Approve\"\n            // frm.doc.checkbox_m == 1\n        ) {\n            // frappe.throw(\"Please check the 'approval' checkbox before approving\");\n            // frappe.validated = false;\n            \n            \n            \n                    console.log(\"Validating Budget Request form on submit.\");\n\n        // Ensure Cost Center is not empty\n        if (!frm.doc.cost_center) {\n                        frappe.throw(\"Please select a Cost Center.,please reload the form and set the new values\");\n\n                        frappe.validated = false;\n            frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\"\n        frm.refresh_fields();\n\n            return false; // Return false to prevent submission\n        }\n\n        // Ensure there are accepted items\n        var acceptedItemsExist = frm.doc.budget_items_details.some(function(item) {\n            return item.status === \"Accepted\";\n        });\n\n        if (!acceptedItemsExist) {\n                         frappe.throw(\"Please accept at least one item.,please reload the form and set the new values\");\n\n                        frappe.validated = false;\n            frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\"\n        frm.refresh_fields();\n\n            \n            return false; // Return false to prevent submission\n        }\n\n        // Ensure each row has an account of type expenses and expected price\n        var invalidRows = frm.doc.budget_items_details.filter(function(item) {\n            return !item.expense_account || !item.expected_price;\n        });\n\n        if (invalidRows.length > 0) {\n                         frappe.throw(\"Please ensure each row has an expense account and expected price.,please reload the form and set the new values\");\n\n                        frappe.validated = false;\n            frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\"\n        frm.refresh_fields();\n\n            return false; // Return false to prevent submission\n        }\n\n        console.log(\"Budget Request form submitted.\");\n\n        // Initialize variables\n        var month_list = [\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n            \"August\", \"September\", \"October\", \"November\", \"December\"\n        ];\n        var total_per_account = {};\n        var account_budget = [];\n\n        // Function to get months\n        // function getMonths(total, item_summary) {\n        //     console.log(\"Item Summary:\", item_summary);\n\n        //     // Calculate total_custom_ratio based on row.total / frm.doc.total * 100\n        //     var total_custom_ratio = item_summary.reduce(function(acc, item) {\n        //         var custom_ratio = (item.total / total) * 100;\n        //         console.log(\"Custom Ratio for Item:\", custom_ratio);\n        //         return acc + custom_ratio;\n        //     }, 0);\n\n        //     console.log(\"Total Custom Ratio:\", total_custom_ratio);\n\n        //     return month_list.map(function(month, index) {\n        //         var percentage_allocation = 0;\n        //         if (total_custom_ratio !== 0) {\n        //             percentage_allocation = (item_summary[index].total / total) * 100;\n        //         }\n        //         return {\n        //             \"percentage_allocation\": percentage_allocation.toFixed(2), // Round to 2 decimal places\n        //             \"month\": month\n        //         };\n        //     });\n        // }\n\n\nfunction getMonths(total, item_summary) {\n    console.log(\"Item Summary:\", item_summary);\n\n    // Calculate total_custom_ratio based on row.total / frm.doc.total * 100\n    var total_custom_ratio = item_summary.reduce(function(acc, item) {\n        var custom_ratio = (item.total / total) * 100;\n        console.log(\"Custom Ratio for Item:\", custom_ratio);\n        return acc + custom_ratio;\n    }, 0);\n\n    console.log(\"Total Custom Ratio:\", total_custom_ratio);\n\n    // Initialize an array to hold month-wise percentage allocations\n    var months = month_list.map(function(month, index) {\n        var percentage_allocation = 0;\n        if (total_custom_ratio !== 0) {\n            percentage_allocation = (item_summary[index].total / total) * 100;\n        }\n        return {\n            \"percentage_allocation\": percentage_allocation.toFixed(4), // Round to 2 decimal places\n            \"month\": month\n        };\n    });\n\n    // Check if the total_custom_ratio is slightly less than 100 (due to rounding)\n    if (total_custom_ratio < 100) {\n        // Calculate the remaining percentage to be distributed\n        var remaining_percentage = 100 - total_custom_ratio;\n\n        // Add the remaining_percentage to the last row's percentage_allocation\n        months[months.length - 1].percentage_allocation = (parseFloat(months[months.length - 1].percentage_allocation) + remaining_percentage).toFixed(2);\n    }\n\n    return months;\n}\n\n\n        // Loop through budget items\n        frm.doc.budget_items_details.forEach(function(item) {\n            console.log(\"Expense Account:\", item.expense_account, \"Total:\", item.total);\n            if (item.status === \"Accepted\") {\n                total_per_account[item.expense_account] = (total_per_account[item.expense_account] || 0) + item.total;\n            }\n        });\n        console.log(\"Total per account:\", total_per_account);\n\n        // Create account_budget array\n        for (var account in total_per_account) {\n            if (total_per_account.hasOwnProperty(account)) {\n                account_budget.push({\n                    \"account\": account,\n                    \"budget_amount\": total_per_account[account]\n                });\n            }\n        }\n        console.log(\"Account budget:\", account_budget);\n\n        // Create Monthly Distribution document\n        var monthly_distribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n        monthly_distribution.distribution_id = `${frm.doc.name}-${frm.doc.fiscal_year}`;\n        monthly_distribution.fiscal_year = frm.doc.fiscal_year;\n        monthly_distribution.percentages = getMonths(frm.doc.total, frm.doc.item_summary);\n        console.log(\"Monthly Distribution document:\", monthly_distribution);\n\n        // Insert Monthly Distribution document\n        frappe.db.insert(monthly_distribution).then(function(response) {\n            console.log(\"Monthly Distribution document inserted successfully.\");\n            var monthly_distribution_name = response.name; // Get the generated name\n            console.log(\"Monthly Distribution Name:\", monthly_distribution_name);\n\n            // Create Budget document\n            var budget = frappe.model.get_new_doc(\"Budget\");\n            budget.budget_against = \"Cost Center\";\n            budget.monthly_distribution = monthly_distribution_name; // Use the generated name\n            budget.cost_center = frm.doc.cost_center;\n            budget.fiscal_year = frm.doc.fiscal_year;\n            budget.applicable_on_material_request = 1;\n            budget.applicable_on_purchase_order = 1;\n            budget.applicable_on_booking_actual_expenses = 1;\n            budget.action_if_annual_budget_exceeded_on_mr = \"Stop\";\n            budget.action_if_annual_budget_exceeded_on_po = \"Stop\";\n            budget.action_if_accumulated_monthly_budget_exceeded_on_mr = \"Warn\";\n            budget.action_if_accumulated_monthly_budget_exceeded_on_po = \"Warn\";\n            budget.custom_budget_request_reference=frm.doc.name;\n            budget.accounts = account_budget;\n            console.log(\"Budget document:\", budget);\n\n            // Insert Budget document\n            return frappe.db.insert(budget);\n        }).then(function() {\n            console.log(\"Budget document inserted successfully.\");\n            frappe.msgprint(\"Budget created successfully.\");\n        }).catch(function(err) {\n            // console.error(\"Error inserting budget:\" + err);\n            frappe.msgprint(\"Error creating budget.\");\n        });\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n        }\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Control",
  "enabled": 1,
  "modified": "2024-02-25 16:47:57.079249",
  "module": null,
  "name": "Budget control 23-02",
  "script": "frappe.ui.form.on('Budget Control', {\n    on_submit: function(frm) {\n        let year = frm.doc.fiscal_year;\n        let dep = frm.doc.departments_list;\n        \n        if (frm.doc.budget_controller === 'Financial') {\n            dep.forEach(function(row) {\n                let budget = frappe.model.get_new_doc(\"Budget Request\");\n                budget.department = row.departments; // Assuming 'department' is the field name in the child table\n                budget.fiscal_year = year;\n                budget.custom_budget_controller = frm.doc.budget_controller;\n                frappe.db.insert(budget)\n                    .then(function() {\n                        frappe.msgprint(\"Budget Requests Have Been Created For Each Department\");\n                        frappe.model.set_value(\"Budget Request\", budget.name, \"workflow_state\", \"\u062a\u062d\u062a \u0645\u0631\u0627\u062c\u0639\u0629 \u0642\u0633\u0645 \u0627\u0644\u0645\u0627\u0644\u064a\u0629\"); // Set the workflow state here\n\n                    })\n                    .catch(function(err) {\n                        console.log(\"Error creating budget request: \", err);\n                    });\n            });\n        } else {\n            console.log(\"Done\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2024-02-27 13:59:18.283408",
  "module": null,
  "name": "department filters",
  "script": "frappe.ui.form.on('Item', {\r\n    refresh: function(frm) {\r\n        frm.fields_dict['custom_item_department'].grid.get_field('department').get_query = function(doc, cdt, cdn) {\r\n            var d = locals[cdt][cdn];\r\n            return {\r\n                filters: {\r\n                    'is_group': 0\r\n                }\r\n            };\r\n        };\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-03-07 10:19:41.750666",
  "module": null,
  "name": "filter member with status",
  "script": "frappe.ui.form.on('Sales Invoice',{\n    \n\trefresh:function(frm){\n\t\n\t\n           frm.set_query(\"customer\", function() {\n              if (frm.doc.custom_service_group == \"\u0631\u0633\u0648\u0645 \u0627\u0644\u0639\u0636\u0648\u064a\u0629\"){   \n    \t\t\treturn {\n    \t\t\t\tfilters: [\n    \t\t\t\t\t['Customer', 'custom_customer_status','=', 'Requested']\n    \t\t\t\t]\n    \t\t\t};\n              }\n\t\t});\n\t       \n\t       \n\t \n\t   \n\t   \n\t   \n\t   \n\t   \n    \t\n    \t}\n    \t\n\t});\n\t\n\t",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-03-07 10:32:29.491249",
  "module": null,
  "name": "last print field",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\t before_submit: function(frm) {\n\t\t// your code here\n\t\t     \n    \t  if(frm.doc.custom_fr3oon){\n    \t      let items = frm.doc.items;\n    \t   for(let row of items){\n    \t\t frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Item\",\n                        name: row.item_code,\n                        fieldname: 'custom_print_serial',\n                    },\n                    callback: function(response) {\n                        console.log(response.message);\n                        // console.log();\n                        let r = response.message;\n                         row.custom_print_serial = response.message.custom_print_serial;\n                         let ahmed = row.qty + response.message.custom_print_serial;\n                        \n                             frappe.call({\n                                method: \"frappe.client.set_value\",\n                                args: {\n                                    doctype: \"Item\",\n                                    name:row.item_code,\n                                    fieldname:\"custom_print_serial\",\n                                    value: ahmed\n                                  \n                                    \n                                },\n                                callback: function(response) {\n                                    console.log('Updated');\n                                }\n                                \n                            });\n                             \n                         }\n                \n                 \n            \n            \n            \n                \n            });\n\t\t \n    \t   }\n\t}\n}})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2024-03-13 12:59:44.345789",
  "module": null,
  "name": "Material Request Filters",
  "script": "frappe.ui.form.on('Material Request', {\n\tonload_post_render:function(frm) {\n\t\t\n\tfrm.fields_dict[\"items\"].grid.get_field(\"item_code\").get_query =\n      function (doc, cdt, cdn) {\n        var child = locals[cdt][cdn];\n        // var comitte = child.committees;\n        return {\n          filters: [\n            [\"custom_is_budget\", \"!=\", \"1\" ],\n            [\"item_group\", \"!=\", \"\u0627\u0644\u062e\u062f\u0645\u0627\u062a\"]\n          ],\n        };\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n      }\t\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 0,
  "modified": "2024-03-11 10:49:41.523622",
  "module": null,
  "name": "update committed president",
  "script": "frappe.ui.form.on('Committee', {\n\tbefore_save:function(frm) {\n\t\t\n\t\tif(frm.doc.committee_chairman && frm.doc.agents_committee){\n\t\t    frappe.call({\n                                method: \"barcode_aec.update_president.update_committee\",\n                                args: {\n                                    com:frm.doc.name,\n                                    emp: frm.doc.committee_chairman,\n                                    salutation: '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629'\n                                  \n                                    \n                                },\n                                callback: function(response) {\n                                    console.log('Member Updated');\n                                }\n                                \n                            });\n            var existingEntry = false;\n            frm.doc.president_history.forEach(function(row) {\n                if (row.member === frm.doc.committee_chairman) {\n                    existingEntry = true;\n                    console.log('Dup Detected'); \n                    return false; //\n                    \n                }\n            });\n                            \n                  if (!existingEntry) {   \n                var from_date = new Date(frm.doc.chairman_from);\n                var to_date = new Date(frm.doc.chairman_to);\n                var duration = Math.floor((to_date - from_date) / (1000 * 60 * 60 * 24)); \n                    frm.add_child('president_history', {\n                    'member': cur_frm.doc.committee_chairman,\n                    'from': cur_frm.doc.chairman_from ,\n                    'to' :cur_frm.doc.chairman_to,\n                    'duration': duration\n \n                });\n                frm.refresh_field('president_history');\n                \n                  }\n\t\t    frappe.call({\n                                method: \"barcode_aec.update_president.update_committee\",\n                                args: {\n                                    com:frm.doc.name,\n                                    emp: frm.doc.agents_committee,\n                                    salutation: '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'\n                                  \n                                    \n                                },\n                                callback: function(response) {\n                                    console.log('Member Updated 2');\n                                }\n                                \n                            });\n                            \n            var existingEntry2 = false;\n            frm.doc.deputy_history.forEach(function(row) {\n                if (row.member === frm.doc.agents_committee) {\n                    existingEntry2 = true;\n                    console.log('Dup Detected'); \n                    return false; //\n                    \n                }\n            });\n\t\n\t\t    \n\t\t    \n\t\t}    \n// \t\telse if(frm.doc.agents_committee){\n\t\t    \t //   frappe.call({\n        //                         method: \"barcode_aec.update_president.update_committee\",\n        //                         args: {\n        //                             com:frm.doc.name,\n        //                             emp: frm.doc.agents_committee,\n        //                             salutation: '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'\n                                  \n                                    \n        //                         },\n        //                         callback: function(response) {\n        //                             console.log('Member Updated');\n        //                         }\n                                \n        //                     });\n\t\t    \n\t\t    \n// \t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 0,
  "modified": "2024-04-24 18:18:38.678022",
  "module": null,
  "name": "update committed president 2",
  "script": "frappe.ui.form.on('Committee', {\n\tbefore_save:function(frm) {\n\t  \n\t\tif(frm.doc.committee_chairman && frm.doc.agents_committee){\n\t\t    frappe.call({\n                                method: \"barcode_aec.update_president.update_committee\",\n                                args: {\n                                    com:frm.doc.name,\n                                    emp: frm.doc.committee_chairman,\n                                    salutation: '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629'\n                                  \n                                    \n                                },\n                                callback: function(response) {\n                                    console.log('Member Updated');\n                                }\n                                \n                            });\n                            \n            var existingEntry = false;\n            frm.doc.president_history.forEach(function(row) {\n                if (row.member === frm.doc.committee_chairman) {\n                    existingEntry = true;\n                    console.log('Dup Detected'); \n                    return false; //\n                    \n                }\n            });\n                            \n            if (!existingEntry) {   \n                var from_date = new Date(frm.doc.chairman_from);\n                var to_date = new Date(frm.doc.chairman_to);\n                var duration = Math.floor((to_date - from_date) / (1000 * 60 * 60 * 24)); \n                    frm.add_child('president_history', {\n                    'member': cur_frm.doc.committee_chairman,\n                    'from': cur_frm.doc.chairman_from ,\n                    'to' :cur_frm.doc.chairman_to,\n                    'duration': duration\n \n                });\n                frm.refresh_field('president_history');\n                \n                  }\n                  \n                  \n                  ////////////////////////////////////////////////////////////////////////////\n\t\t    frappe.call({\n                                method: \"barcode_aec.update_president.update_committee\",\n                                args: {\n                                    com:frm.doc.name,\n                                    emp: frm.doc.agents_committee,\n                                    salutation: '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'\n                                  \n                                    \n                                },\n                                callback: function(response) {\n                                    console.log('Member Updated 2');\n                                }\n                                \n                            });\n\t\n\t\t      var existingEntry2 = false;\n            frm.doc.deputy_history.forEach(function(row) {\n                if (row.member === frm.doc.agents_committee) {\n                    existingEntry2 = true;\n                    console.log('Dup Detected'); \n                    return false; //\n                    \n                }\n            });\n                if (!existingEntry2) {   \n                var from_date2 = new Date(frm.doc.deputy_from);\n                var to_date2 = new Date(frm.doc.deputy_to);\n                var duration2 = Math.floor((to_date2 - from_date2) / (1000 * 60 * 60 * 24)); \n                    frm.add_child('deputy_history', {\n                    'member': cur_frm.doc.agents_committee,\n                    'from': cur_frm.doc.deputy_from ,\n                    'to' :cur_frm.doc.deputy_to,\n                    'duration': duration2\n \n                });\n                frm.refresh_field('deputy_history');\n\t\t    \n\t\t}    \n// \t\telse if(frm.doc.agents_committee){\n\t\t    \t //   frappe.call({\n        //                         method: \"barcode_aec.update_president.update_committee\",\n        //                         args: {\n        //                             com:frm.doc.name,\n        //                             emp: frm.doc.agents_committee,\n        //                             salutation: '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'\n                                  \n                                    \n        //                         },\n        //                         callback: function(response) {\n        //                             console.log('Member Updated');\n        //                         }\n                                \n        //                     });\n\t\t    \n\t\t    \n// \t\t}\n\t\t\n\t\t\n\t\t}\t\n\t\t\n\t}\n\t\n\t\n// \tupdate_president:function(frm) {\n\t    \n// \t       var existingEntry = false;\n//             frm.doc.president_history.forEach(function(row) {\n//                 if (row.member === frm.doc.committee_chairman) {\n//                     existingEntry = true;\n//                     console.log('Dup Detected'); \n//                     return false; //\n                    \n//                 }\n//             });\n            \n            \n            \n//       if (!existingEntry) {   \n//                 var from_date = new Date(frm.doc.chairman_from);\n//                 var to_date = new Date(frm.doc.chairman_to);\n//                 var duration = Math.floor((to_date - from_date) / (1000 * 60 * 60 * 24)); \n//                     frm.add_child('president_history', {\n//                     'member': cur_frm.doc.committee_chairman,\n//                     'president_name': cur_frm.doc.chairman_arabic_name,\n//                     'from': cur_frm.doc.chairman_from ,\n//                     'to' :cur_frm.doc.chairman_to,\n//                     'duration': duration\n \n//                 });\n//                 frm.refresh_field('president_history');\n//                 frm.set_value('chairman_from', '');\n//                 frm.set_value('chairman_to', '');\n//                 frm.set_value('committee_chairman', '');\n//                 frm.set_value('chairman_english_name', '');\n//                 frm.set_value('chairman_arabic_name', '');\n\n\n//                 frm.save();\n\n//                   }\n\t    \n\t\t\n\n\t\t\n// \t},\n\t\n// \tupdate_deputy:function(frm){\n\t    \n// \t     var existingEntry2 = false;\n//             frm.doc.deputy_history.forEach(function(row) {\n//                 if (row.member === frm.doc.agents_committee) {\n//                     existingEntry2 = true;\n//                     console.log('Dup Detected'); \n//                     return false; //\n                    \n//                 }\n//             });\n//                 if (!existingEntry2) {   \n//                 var from_date2 = new Date(frm.doc.deputy_from);\n//                 var to_date2 = new Date(frm.doc.deputy_to);\n//                 var duration2 = Math.floor((to_date2 - from_date2) / (1000 * 60 * 60 * 24)); \n//                     frm.add_child('deputy_history', {\n//                     'member': cur_frm.doc.agents_committee,\n//                     'from': cur_frm.doc.deputy_from ,\n//                     'to' :cur_frm.doc.deputy_to,\n//                     'duration': duration2\n \n//                 });\n//                 frm.refresh_field('deputy_history');\n// \t           // frm.refresh_field('president_history');\n//                 frm.set_value('deputy_from', '');\n//                 frm.set_value('deputy_to', '');\n//                 frm.set_value('agent_english_name', '');\n//                 frm.set_value('agents_committee', '');\n\n//                 frm.set_value('agent_arabic_name', '');\n\n//                 frm.save();\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    \n\t    \n\t    \n//                 } \n// \t}\n\t\n})\n\n\n\n\n\n\n// frappe.ui.form.on('Committee', {\n// \tcommittee_chairman:function(frm) {\n\t\t\n// \t\tlet chair = frm.doc.committee_chairman;\n// \t\tlet from = frm.doc.chairman_from;\n// \t\tlet current_date = frappe.datetime.get_today();\n// \t\tconsole.log(current_date);\n\t\t\n// \t\tif(chair){\n\t\t    \n// \t\t    frm.set_value('chairman_from', current_date);\n// \t\t    frm.refresh_field('chairman_from');\n\t\t    \n\t\t    \n\t\t    \n\t\t    \n// \t\t}\n\t\t\n\t\t\n// \t}\n// })",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2024-03-12 15:10:12.853110",
  "module": null,
  "name": "material req total amount",
  "script": "frappe.ui.form.on('Material Request', {\n    before_save: function(frm) {\n        let items = frm.doc.items;\n        let total = 0;\n\n        for (let row of items) {\n            // Add the amount of the current row to the overall total\n            total += row.amount;\n        }\n\n        // Set the total amount for the entire form\n        frm.set_value('custom_total_amount', total);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production requirements card",
  "enabled": 1,
  "modified": "2024-03-13 12:40:19.285504",
  "module": null,
  "name": "Production Attachments",
  "script": "frappe.ui.form.on('Production requirements card', {\n\ton_submit:function(frm) {\n\t\t\n\t\t\n// \t\t if (frm.doc.custom_service_group == \"\u0628\u0637\u0627\u0642\u0629 \u0645\u0633\u062a\u0644\u0632\u0645\u0627\u062a \u0623\u0646\u062a\u0627\u062c\"){\n            // frappe.call({\n            //     method: \"barcode_aec.barcode.files\",\n            //     args: {\n            //         // name: frm.doc.name\n            //     },\n            //     callback: function(r) {\n            //         msgprint(\"Done Attached\");\n            //     }\n            // })\n            \n            frappe.call({\n                method: \"frappe.client.set_value\",\n                args: {\n                    doctype: \"Customer\",\n                    name: frm.doc.customer ,\n                fieldname:{\n                    \"custom_registration_number_in_commercial_register_attachment\":frm.doc.custom_registration_number_in_commercial_register_attachment,\n                    \"custom_date_of_registration\": frm.doc.custom_start_date ,\n                    \"custom_even_valid\": frm.doc.custom_end_date ,\n                    \n                    \"custom_registration_number_in_exporter_register_attachment\": frm.doc.custom_registration_number_in_exporter_register_attachment ,\n                    \"custom_date_of_registration2\": frm.doc.custom_starte_datee ,\n                    \"custom_even_valid2\": frm.doc.custom_end_datee ,\n                    \n                    \"custom_tax_card_number_attachment\": frm.doc.custom_tax_id ,\n                    \"custom_date_registration4\": frm.doc.custom_start_date_of_tax ,\n                    \"custom_even_valid4\": frm.doc.custom_end_date_of_tax ,\n                }\n            },\n            callback: function(response) {\n                console.log('Updated ');\n                msgprint('Updated');\n                }\n            });\n\t\n        \n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\t\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Check",
  "enabled": 1,
  "modified": "2024-03-18 14:46:16.663406",
  "module": null,
  "name": "Check-List 2",
  "script": "frappe.listview_settings['Check'] = {\n    onload: function(listview) {\n            listview.page.add_inner_button(__(\"Collect\"), () => selected_check_action(listview, 'Collected'),\n            \"Select Receive Action\");\n            listview.page.add_inner_button(__(\"Under Collection\"), () => selected_check_action(listview, 'Under Collection'),\n            \"Select Receive Action\");\n            listview.page.add_inner_button(__(\"Reject\"), () => selected_check_action(listview, 'Rejected'),\n            \"Select Receive Action\");\n            listview.page.add_inner_button(__(\"Return\"), () => selected_check_action(listview, 'Returned'),\n            \"Select Receive Action\");\n            listview.page.add_inner_button(__(\"Cash\"), () => selected_check_action(listview, 'Cash'),\n            \"Select Receive Action\");\n              listview.page.add_inner_button(__(\"reject_pay\"), () => selected_check_action(listview, 'Rejected'),\n            \"Select Pay Action\");\n              listview.page.add_inner_button(__(\"collected_pay\"), () => selected_check_action(listview, 'collected_pay'),\n            \"Select Pay Action\");\n    }\n};\n\nfunction selected_check_action(listview, action) {\n        let checks = listview.get_checked_items();\n        checks.forEach(check_name => {\n            frappe.call({ // get check details\n              method: 'frappe.client.get',\n                args: {'doctype': 'Check', 'name': check_name.name},\n                callback: function(r) {\n                    let check = r.message;\n                    if(check.status == action)\n                        frappe.throw(`Your cheque already ${action}`);\n                    if(check.status == 'Collected')\n                        frappe.throw(`Can't make further actions on Collected Check ${check.name}`)\n                    // check if check is not collected first ===> later\n                    \n                    let payment = frappe.model.get_new_doc(\"Payment Entry\");\n                    payment.payment_type = 'Internal Transfer';\n        //             payment.customer_name_from_cheque = check.party_name;\n\t\t\t\t    // payment.customer_bank_from_cheque = check.bank;\n                    payment.posting_date = get_today();\n                    payment.paid_amount = check.amount;\n\t\t            payment.received_amount = check.amount;\n\t\t            payment.customer_name_from_cheque = check.party_name;\n\t\t\t\t    payment.customer_bank_from_cheque = check.bank;\n\t\t            payment.base_paid_amount = check.amount;\n\t\t            payment.reference_no = check.check_no;\n\t\t          //  payment.mode_of_payment = check.affected_account;\n\t\t            payment.cheque_status = action\n\t\t            \n\t\t            frappe.call({\n\t\t                method: 'frappe.client.get',\n\t\t                args: {'doctype': 'Mode of Payment', name: '\u0627\u0648\u0631\u0627\u0642 \u0627\u0644\u0642\u0628\u0636'},\n\t\t                callback: function(r) {\n\t\t                    payment.paid_from =check.paid_from//// r.message.accounts[0].default_account;\n\t\t                    let company = r.message.accounts[0].company;\n\t\t                    frappe.call({\n\t\t                        method:'frappe.client.get', \n\t\t                        args:{'doctype': 'Account', 'name': r.message.accounts[0].default_account},\n\t\t                        callback: function(r) {\n\t\t                            payment.paid_from_account_currency = r.message.account_currency;\n\t\t                        }\n\t\t                    });\n\t\t                    frappe.call({\n\t\t                        method: 'frappe.client.get',\n\t\t                        args: {'doctype': 'Mode of Payment', name: '\u0627\u0648\u0631\u0627\u0642 \u0627\u0644\u0642\u0628\u0636'},\n\t\t                        callback: function(r) {\n\t\t                                                                                    \n                                                         switch(action) {\n                                                    case 'Collected':\n                                                            frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['collected_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.collected_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    break;\n                                                    case 'Under Collection':\n                                                         frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['under_collection_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.under_collection_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM2S0\");\n                                                    break;\n                                                    case 'Rejected':\n                                                                                                                 frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['rejected_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.rejected_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                     case 'Returned':\n                                                                                  frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['returned_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.returned_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                    case 'Cash':\n                                                             frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['cash_account'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_to= r.message.cash_account;\n                                                             payment.paid_from=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                 case 'collected_pay':\n                                                             frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['collected_pay'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_from= r.message.collected_pay;\n                                                            //  payment.paid_to=check.paid_from;\n                                                                // let acc = getMode(check.originl_mode_of_payment);\n                                                                // console.log('account mina' + acc);\n                                                                var acc = frappe.call({\n                                                                    method: \"frappe.client.get\",\n                                                                    args: {\n                                                                        doctype: \"Mode of Payment\",\n                                                                        name: check.originl_mode_of_payment,\n                                                                        fieldname: 'accounts',\n                                                                    },\n                                                                    callback: function(response) {\n                                                                       \n                                                                        console.log(response.message.accounts[0].default_account);\n                                                                        \n                                                                        var account = response.message.accounts[0].default_account;\n                                                                          \n                                                                          payment.paid_to = response.message.accounts[0].default_account;  \n                                                                             \n                                                                         }\n                                                                \n                                                                 \n                                                            \n                                                            \n                                                            \n                                                                \n                                                            });\n                                                            //   payment.paid_to= acc\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                case 'reject_pay':\n                                                             frappe.call({\n                                                            'method': 'frappe.client.get_value',\n                                                            'args': {\n                                                            'doctype': 'CHecks_settings',\n                                                            'fieldname': ['under_pay'],\n                                                            // 'filters': {'name': frm.doc.owner}\n                                                            },\n                                                            callback: function(r) {\n                                                            payment.paid_from= r.message.under_pay;\n                                                             payment.paid_to=check.paid_from\n                                                            }\n                                                            })\n                                                    // frm.set_value(\"naming_series\",\"COM3S0\"); \n                                                    break;\n                                                    }\n                                                        \n\t\t                          //  payment.paid_to = r.message.accounts[0].default_account;\n\t\t                            frappe.call({\n\t\t\t                            method:'frappe.client.get', \n\t\t\t                            args:{'doctype': 'Account', 'name': r.message.accounts[0].default_account},\n\t\t\t                            callback: function(r) {\n\t\t\t                                payment.paid_to_account_currency = r.message.account_currency;\n\t\t\t                                frappe.call({\n                                                method: 'erpnext.accounts.doctype.payment_entry.payment_entry.get_party_and_account_balance',\n                                                args: {\n                                                    company: company, \n                                                    date: get_today(), \n                                                    paid_from: payment.paid_from,\n                                                    paid_to: payment.paid_to\n                                                    \n                                                },\n                                                   \n                                                    callback: function(r) {\n\n                                                        \n                                                        \n                                                        \n                                                        \n                                                        \n                                                        \n                                                        payment.paid_from_account_balance = r.message.paid_from_account_balance;\n                                                        payment.paid_to_account_balance = r.message.paid_to_account_balance;\n\t\t\t                                            frappe.call({\n\t\t\t                                                method: 'frappe.client.insert',\n\t\t\t                                                type: 'POST',\n\t\t\t                                                args:{'doc': payment},\n\t\t\t                                                callback: function(r) {\n\t\t\t                                                    frappe.call({\n                                                                \"method\": \"frappe.client.set_value\",\n                                                                    \"args\": {\n                                                                        \"doctype\": 'Check',\n                                                                        \"name\":  check.name,\n                                                                        \"fieldname\": {\n                                                                            \"status\" : action,\n                                                                            \"originl_mode_of_payment\": check.affected_account,\n                                                                            \"affected_account\": \"\",\n                                                                            \"paid_from\":  payment.paid_to,\n                                                                    },\n                                                                }\n                                                            });\n\t\t\t                                                }\n\t\t\t                                            });\n                                                    }\n                                                });\n\t\t\t                            }\n\t\t                            });\n\t\t                        }\n\t\t                    });\n\t\t                }\n\t\t            })\n                }\n            });\n    })\n}\n\n\n\n\n\n\nfunction getMode(mode){\n    // var account;\nfrappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Mode of Payment\",\n                        name: mode,\n                        fieldname: 'accounts',\n                    },\n                    callback: function(response) {\n                       \n                        console.log(response.message.accounts[0].default_account);\n                        \n                        var account = response.message.accounts[0].default_account;\n                            \n                             \n                         }\n                \n                 \n            \n            \n            \n                \n            });\n    \n    return response.message.accounts[0].default_account;\n}\n\n\n\n\n\n\n// function getMode(mode, callback) {\n//     frappe.call({\n//         method: \"frappe.client.get\",\n//         args: {\n//             doctype: \"Mode of Payment\",\n//             name: mode,\n//             fieldname: 'accounts',\n//         },\n//         callback: function(response) {\n//             var account = null;\n//             if (response && response.message && response.message.accounts && response.message.accounts.length > 0) {\n//                 account = response.message.accounts[0].default_account;\n//             }\n//             callback(account);\n//         }\n//     });\n// }",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Check",
  "enabled": 1,
  "modified": "2024-03-19 12:42:16.622674",
  "module": null,
  "name": "Check-Form 2",
  "script": "frappe.ui.form.on('Check', {\n\ncollect_check:function(frm) {\n    //  product_setting = frappe.model.get_doc(\"CHecks_settings\")\n    // collect_account = product_setting.collected_account\n\n   //frappe.client.set_value(\"Check\", curfrm.doc.name, \"status\",\"Collected\")\n //   frappe.client.set_value(\"Check\", frm.doc.name, \"originl_mode_of_payment\",frm.doc.affected_account)\n                // if(!frm.doc.affected_account)\n                //     frappe.throw(\"Please select To Account\");\n                \n\n\n\n                \n                check_status(frm, 'Collected');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\tjobOrder.customer_name_from_cheque = frm.doc.party_name;\n\t\t\t\tjobOrder.customer_bank_from_cheque = frm.doc.bank;\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.check_date\n\t\t\t\tjobOrder.cheque_status='Collected'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t            jobOrder.reference_date= frm.doc.check_date\n\t           // jobOrder.mode_of_payment = frm.doc.affected_account;\n                            frappe.call({\n                            'method': 'frappe.client.get_value',\n                            'args': {\n                            'doctype': 'CHecks_settings',\n                            'fieldname': ['collected_account'],\n                            // 'filters': {'name': frm.doc.owner}\n                            },\n                            callback: function(r) {\n                            jobOrder.paid_to= r.message.collected_account;\n                            \n                            }\n                            })\n\t           // jobOrder.mode_of_payment = collect_account;//frappe.db.get_single_value(\"CHecks_settings\", 'collected_account');\n\t           // jobOrder.to_mode_of_payment = frm.doc.originl_mode_of_payment\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n                            frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Collected\",\n                            // \"paid_from\":frm.doc.affected_account\n                            \"originl_mode_of_payment\": frm.doc.affected_account,\n                            \"affected_account\": \"\"\n                            },\n                            }\n                            });\n        \n\t\t\t\n\t},\ncheck_under_collection:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'Under Collection');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.customer_name_from_cheque = frm.doc.party_name;\n\t\t\t\tjobOrder.customer_bank_from_cheque = frm.doc.bank;\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'CHecks_settings',\n                                'fieldname': ['under_collection_account'],\n                                // 'filters': {'name': frm.doc.owner}\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_to= r.message.under_collection_account;\n                                \n                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\t\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Under Collection'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Under Collection\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t},\ncheck_rejected:function(frm) {\n                check_status(frm, 'Rejected');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t                            frappe.call({\n                            'method': 'frappe.client.get_value',\n                            'args': {\n                            'doctype': 'CHecks_settings',\n                            'fieldname': ['rejected_account'],\n                            // 'filters': {'name': frm.doc.owner}\n                            },\n                            callback: function(r) {\n                            jobOrder.paid_to= r.message.rejected_account;\n                            \n                            }\n                            })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\tjobOrder.customer_name_from_cheque = frm.doc.party_name;\n\t\t\t\tjobOrder.customer_bank_from_cheque = frm.doc.bank;\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Rejected'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t                          frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Rejected\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n                            \n\t\t\t\n\t},\ncheck_returned:function(frm) {\n                check_status(frm, 'Returned');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\t\t\t\t\t                            frappe.call({\n                            'method': 'frappe.client.get_value',\n                            'args': {\n                            'doctype': 'CHecks_settings',\n                            'fieldname': ['returned_account'],\n                            // 'filters': {'name': frm.doc.owner}\n                            },\n                            callback: function(r) {\n                            jobOrder.paid_to= r.message.returned_account;\n                            \n                            }\n                            })\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\tjobOrder.customer_name_from_cheque = frm.doc.party_name;\n\t\t\t\tjobOrder.customer_bank_from_cheque = frm.doc.bank;\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Returned'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t\t\t\t\t                          frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Returned\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n                            \n\t\t\t\n\t},\n\ncollect_cash:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'Under Collection');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_from=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'CHecks_settings',\n                                'fieldname': ['cash_account'],\n                                // 'filters': {'name': frm.doc.owner}\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_to= r.message.cash_account;\n                                \n                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\tjobOrder.customer_name_from_cheque = frm.doc.party_name;\n\t\t\t\tjobOrder.customer_bank_from_cheque = frm.doc.bank;\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='Under Collection'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"Cash\",\n                            \"paid_from\":frm.doc.affected_account\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t},\n\t\nunder_pay:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'under_pay');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\tjobOrder.paid_to=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'CHecks_settings',\n                                'fieldname': ['under_pay'],\n                                // 'filters': {'name': frm.doc.owner}\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_from= r.message.under_pay;\n                                \n                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\tjobOrder.customer_name_from_cheque = frm.doc.party_name;\n\t\t\t\tjobOrder.customer_bank_from_cheque = frm.doc.bank;\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='under_pay'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"under_pay\",\n                            \"paid_from\":jobOrder.paid_to\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t},\n\t\n\tcollected_pay:function(frm) {\n                // if(!frm.doc.affected_account) \n                //     frappe.throw(\"Please select To Account\");\n                check_status(frm, 'collected_pay');\n\t\t\t\tvar jobOrder = frappe.model.get_new_doc('Payment Entry');\n\t\t\t\tjobOrder.payment_type='Internal Transfer',\n\t\t\t\t\n\t\t\t\t////////////////////////////////////////////////\n\t\t\t\t\n\t\t\t\tfrappe.call({\n                                                                    method: \"frappe.client.get\",\n                                                                    args: {\n                                                                        doctype: \"Mode of Payment\",\n                                                                        name: frm.doc.originl_mode_of_payment,\n                                                                        fieldname: 'accounts',\n                                                                    },\n                                                                    callback: function(response) {\n                                                                       \n                                                                        console.log(response.message.accounts[0].default_account);\n                                                                        \n                                                                        // var account = response.message.accounts[0].default_account;\n                                                                          \n                                                                          jobOrder.paid_to = response.message.accounts[0].default_account;  \n                                                                             \n                                                                         }\n                                                                \n                                                                 \n                                                            \n                                                            \n                                                            \n                                                                \n                                                            });\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t////////////////////////////////////////////////\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// jobOrder.paid_to=frm.doc.paid_from;\n\t\t\t\t                                frappe.call({\n                                'method': 'frappe.client.get_value',\n                                'args': {\n                                'doctype': 'CHecks_settings',\n                                'fieldname': ['collected_pay'],\n                                // 'filters': {'name': frm.doc.owner}\n                                },\n                                callback: function(r) {\n                             jobOrder.paid_from= r.message.collected_pay;\n                                                                }\n                                })\n\t\t\t\t// jobOrder.paid_to=frm.doc.affected_account\n\t\t\t\tjobOrder.posting_date=get_today()\n\t\t\t\tjobOrder.paid_amount=frm.doc.amount\n\t\t\t\tjobOrder.received_amount=frm.doc.amount\n\t\t\t\tjobOrder.customer_name_from_cheque = frm.doc.party_name;\n\t\t\t\tjobOrder.customer_bank_from_cheque = frm.doc.bank;\n\t\t\t\tjobOrder.base_paid_amount=frm.doc.amount;\n\t\t\t\tjobOrder.reference_no=frm.doc.check_no,\n\t\t\t\tjobOrder.reference_date=frm.doc.due_date\n\t\t\t\tjobOrder.cheque_status='collected_pay'\n\t\t\t\tjobOrder.cheque_=frm.doc.name\n\t\n\t\t\t\tfrappe.set_route('Form', 'Payment Entry', jobOrder.name);\n\t\t\t\t\n\t\t\t\t      frappe.call({\n                            \"method\": \"frappe.client.set_value\",\n                            \"args\": {\n                            //replace \"Target DocType\" with the actual target doctype\n                            \"doctype\": 'Check',\n                            //replace target_doctype_link with a link to the document to be changed\n                            \"name\":  frm.doc.name,\n                            \"fieldname\": {\n                            \n                            \"status\" : \"collected_pay\",\n                            \"paid_from\": jobOrder.paid_to\n                            },\n                            }\n                            });\n        \n        \n\t\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t,\n\t\n\t\n\t\n\t\n\t\n\t\n\trefresh: function(frm) {\n      if(frm.doc.status === \"Returned\" || frm.doc.status === \"Rejected\" || frm.doc.status == \"Collected\") {\n          frm.set_df_property(\"collect_check\", \"hidden\", 1);\n          frm.set_df_property(\"check_rejected\", \"hidden\", 1);\n          frm.set_df_property(\"check_under_collection\", \"hidden\", 1);\n          frm.set_df_property(\"check_returned\", \"hidden\", 1);\n           frm.set_df_property(\"collect_cash\", \"hidden\", 1);\n      }\n  \n},\n\t\t\n})\n\nfunction check_status(frm, status) {\n    if(frm.doc.status === status)\n        frappe.throw(`The check is already ${status}`);\n}\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-03-18 11:02:45.950883",
  "module": null,
  "name": "board subs",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tcustomer:function(frm){\n\t    \n\t    if(frm.doc.board_member && frm.doc.board_member_start_date){\n\t        \n\t        cur_frm.clear_table(\"items\");\n\t        \n            let items = frm.doc.items;\n            \n            \n            // let rate = getRateItemPrice('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 1');\n            \n            for(let row of items){\n                frm.add_child('items', {\n            'item_name': '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 1',\n            // 'qty': 1,\n            // 'item_code': '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 1',\n            // 'rate':rate ,\n            // 'amount': parseFloat(rate),\n            // 'uom':'Nos',\n            // 'description':'\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0645\u062c\u0644\u0633 \u0627\u062f\u0627\u0631\u0629 1',\n            // 'income_account': i['income_account'],\n\n                });\n            }\n            \n            refresh_field('items');\n\t        \n\t    }\n\t    \n\t    \n\t    \n\t    \n\t}\n})\n\n// frappe.ui.form.on('Sales Invoice Item', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\n\nfunction getRateItemPrice(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Treasury bills",
  "enabled": 1,
  "modified": "2024-03-20 20:16:26.990834",
  "module": null,
  "name": "treasuy bill 2",
  "script": "frappe.ui.form.on('Treasury bills', {\n    posting_date: function(frm) {\n            if (frm.doc.treasury_bills === 'New tender') {\n              var posting = new Date(frm.doc.posting_date);\n    // Find the day of the week for the posting date (0 = Sunday, 1 = Monday, ..., 6 = Saturday)\n    var dayOfWeek = posting.getDay();\n    // Calculate the number of days to add to reach the next Tuesday\n    var daysToAdd = dayOfWeek <= 2 ? 2 - dayOfWeek : 9 - dayOfWeek;\n    // Set the purchase date to the next Tuesday\n    var nextTuesday = new Date(posting);\n    nextTuesday.setDate(posting.getDate() + daysToAdd);\n    \n    // Format the date as YYYY-MM-DD\n    var formattedDate = nextTuesday.toISOString().split('T')[0];\n    \n    // Set the value of purchase_date\n    frm.set_value('purchase_date', formattedDate);\n                \n            }\n        },\n\n    suggested_purchasing_value: function(frm) {\n            if (frm.doc.treasury_bills === 'New tender') {\n                var postingDate = frm.doc.posting_date;\n                // if (isThursdayOrSunday(postingDate)) {\n                    calculate_treasury(frm);\n                // } else {\n                //     frappe.msgprint(__('Treasury can only occur on Thursdays or Sundays.'));\n                // }\n            }\n        },\n        \n    suggested_purchase_price: function(frm) {\n           \n                \n            \n                    calculate_treasury(frm);\n                \n                    // frappe.msgprint(__('Treasury can only occur on Thursdays or Sundays.'));\n                \n            \n        },\n        \n        available_balance:function(frm){\n            \n            var available = frm.doc.available_balance;\n            var remaining = frm.doc.remaining_balance;\n            var purchase_value = frm.doc.purchasing_value;\n            \n            if(available){\n                \n                remaining = available - purchase_value;\n                \n                frm.set_value('remaining_balance', remaining);\n                \n            }\n            \n        },\n        \n        \n        purchase_date:function(frm){\n            // var purchaseDate = frm.doc.purchase_date;\n            //     if (isThursdayOrSunday(purchaseDate)) {\n            //         frappe.msgprint(__('Treasury can only occur on Tuesday'));\n            //         frm.set_value('purchase_date', '');\n            //         frm.refresh_field('purchase_date');\n            //     }\n            ///////////////////////////\n            \n            var duration = frm.doc.duration;\n            \n            if(frm.doc.purchase_date){\n                \n            var purchaseDate = new Date(frm.doc.purchase_date);\n\n        // Adding 182 days\n            purchaseDate.setDate(purchaseDate.getDate() + 182);\n\n        // Update the field in the form\n            frm.set_value('due_date', purchaseDate);\n                \n                \n                \n            }\n            \n        },\n\n    factories: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            var postingDate = frm.doc.posting_date;\n            // if (isThursdayOrSunday(postingDate)) {\n                calculate_nominal_value(frm);\n            // } else {\n            //     frappe.msgprint(__('Treasury can only occur on Thursdays or Sundays.'));\n            // }\n        }\n    },\n\n    choice_nominal: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            var choiceNominal = frm.doc.choice_nominal;\n    \n            // if (choiceNominal === 'Small') {\n            //     // var smallNominalValue = frm.doc.small_nominal_value;\n            //     // var factories = frm.doc.factories;\n            //     // var purchaseValue = smallNominalValue / factories;\n    \n            //     // frm.set_value('purchasing_value', purchaseValue);\n            //     // frm.refresh_field('purchasing_value');\n            // } else \n            if (choiceNominal === 'Grand') {\n                var grandNominalValue = frm.doc.grand_nominal_value;\n                var factories = frm.doc.factories;\n                var purchaseValue = grandNominalValue / factories;\n    \n                frm.set_value('purchasing_value', purchaseValue);\n                frm.refresh_field('purchasing_value');\n            }\n            var nominalValue = frm.doc.grand_nominal_value;\n            var currentPurchasingValue = frm.doc.purchasing_value;\n            var difference = nominalValue - currentPurchasingValue;\n            frm.set_value('return', difference);\n            var netProfit = difference * 0.8;\n            frm.set_value('net_profit', netProfit);\n            var availableBalance = frm.doc.available_balance;\n            var remainingBalance = availableBalance - currentPurchasingValue;\n            var tax = difference * 0.2;\n            frm.set_value('tax', tax);\n    \n            frm.set_value('remaining_balance', remainingBalance);\n    \n            frm.refresh_field('return');\n            frm.refresh_field('net_profit');\n            frm.refresh_field('remaining_balance');\n            frm.refresh_field('tax');\n        }\n    },\n\n    bidding_status: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            var biddingStatus = frm.doc.bidding_status;\n            var postingDate = frm.doc.posting_date;\n            if (biddingStatus === '\u0642\u064a\u062f \u0627\u0644\u062a\u0646\u0641\u064a\u0630') {\n                var postingDate = frm.doc.posting_date;\n                var firstTuesday = getFirstTuesday(postingDate);\n                frm.set_value('purchase_date', firstTuesday);\n                frm.refresh_field('purchase_date');\n            }\n            calculateDueDate(frm);\n        }\n    },\n    duration: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            calculateDueDate(frm);\n        }\n    },\n    bid_date: function(frm) {\n        if (frm.doc.treasury_bills === 'New tender') {\n            calculateDueDate1(frm);\n        }\n    },\n});\nfunction calculateDueDate(frm) {\n    if (frm.doc.treasury_bills === 'New tender') {\n        var purchaseDate = frm.doc.purchase_date;\n        var duration = frm.doc.duration;\n        \n        if (purchaseDate && duration) {\n            var dueDate = frappe.datetime.add_days(purchaseDate, duration);\n            frm.set_value('due_date', dueDate);\n            frm.refresh_field('due_date');\n        }\n    }\n}\n\nfunction calculateDueDate1(frm) {\n    if (frm.doc.treasury_bills === 'New tender') {\n        var bidDate = frm.doc.bid_date;\n        var duration = frm.doc.duration;\n        \n        if (bidDate && duration) {\n            var dueDate1 = frappe.datetime.add_days(bidDate, duration);\n            frm.set_value('due_date1', dueDate1);\n            frm.refresh_field('due_date1');\n        }\n    }\n}\n\n\nfunction getFirstTuesday(postingDate) {\n    var jsPostingDate = new Date(postingDate);\n    while (jsPostingDate.getDay() !== 2) {\n        jsPostingDate.setDate(jsPostingDate.getDate() + 1);\n    }\n    var resultDateString = jsPostingDate.toISOString().split('T')[0];\n    return resultDateString;\n}\n\nfunction calculate_treasury(frm) {\n    var suggested_purchasing_price = frm.doc.suggested_purchase_price / 100;\n    var duration = frm.doc.duration;\n    var factories = (suggested_purchasing_price * (duration / 365)) + 1;\n\n    frm.set_value('factories', factories);\n    frm.refresh_field('factories');\n    calculate_nominal_value(frm);\n}\n\nfunction calculate_nominal_value(frm) {\n    var suggested_purchasing_value = frm.doc.suggested_purchasing_value;\n    var factories = frm.doc.factories;\n    var small_nominal_value = 25000;\n    var grand_nominal_value = frm.doc.grand_nominal_value;\n\n    var nominal_value = suggested_purchasing_value * factories;\n\n    frm.set_value('nominal_value', nominal_value);\n    frm.refresh_field('nominal_value');\n\n    if (nominal_value <= 25000) {\n        small_nominal_value = 25000;\n        grand_nominal_value = 25000;\n    } else {\n        grand_nominal_value = Math.ceil(nominal_value / 25000) * 25000;\n    }\n\n    frm.set_value('small_nominal_value', small_nominal_value);\n    frm.refresh_field('small_nominal_value');\n\n    frm.set_value('grand_nominal_value', grand_nominal_value);\n    frm.refresh_field('grand_nominal_value');\n}\n\nfunction isThursdayOrSunday(postingDate) {\n    const jsDate = frappe.datetime.str_to_obj(postingDate);\n    return jsDate.getDay() === 4 || jsDate.getDay() === 0;\n}\n\n\nfrappe.ui.form.on('Treasury bills', {\n    on_submit: function (frm) {\n        if (frm.doc.docstatus === 1) {\n            Promise.all([\n                call_create_journal_entry(frm),\n                journalEntryDueDate1(frm),\n                journalEntryDueDate2(frm),\n                journalEntryDueDate3(frm),\n            ]).then(responses => {\n                const responseCreateEntry = responses[0];\n                const responseDueDate1 = responses[1];\n                const responseDueDate2 = responses[2];\n                const responseDueDate3 = responses[3];\n\n                frappe.msgprint(__('Response from create_journal_entry: {0}', [responseCreateEntry]));\n                frappe.msgprint(__('Response from journalEntryDueDate1: {0}', [responseDueDate1]));\n                frappe.msgprint(__('Response from journalEntryDueDate2: {0}', [responseDueDate2]));\n                frappe.msgprint(__('Response from journalEntryDueDate3: {0}', [responseDueDate3]));\n\n            });\n        }\n    }\n});\n\n\nfunction call_create_journal_entry(frm) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'barcode_aec.barcode.enqueue_create_journal_entry',\n            args: {\n                treasury_bills: frm.doc.name\n            },\n            callback: function (r) {\n                if (r.message) {\n                    frappe.msgprint(__('Journal Entry creation enqueued successfully.'));\n                    resolve(r.message);\n                } else if (r.exc) {\n                    frappe.msgprint(__('Error enqueuing Journal Entry creation.'));\n                    console.error(r.exc);\n                    reject(r.exc);\n                }\n            }\n        });\n    });\n}\n\nfunction journalEntryDueDate1(frm) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'barcode_aec.barcode.enqueue_journal_entry_due_date_1',\n            args: {\n                treasury_bills: frm.doc.name\n            },\n            callback: function (response) {\n                handleResponse(response, frm);\n                if (response.message) {\n                    resolve(response.message);\n                } else if (response.exc) {\n                    reject(response.exc);\n                }\n            }\n        });\n    });\n}\nfunction journalEntryDueDate2(frm) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'barcode_aec.barcode.enqueue_journal_entry_due_date_2',\n            args: {\n                treasury_bills: frm.doc.name\n            },\n            callback: function (response) {\n                handleResponse(response, frm);\n                if (response.message) {\n                    resolve(response.message);\n                } else if (response.exc) {\n                    reject(response.exc);\n                }\n            }\n        });\n    });\n}\nfunction journalEntryDueDate3(frm) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: 'barcode_aec.barcode.enqueue_journal_entry_due_date_3',\n            args: {\n                treasury_bills: frm.doc.name\n            },\n            callback: function (response) {\n                handleResponse(response, frm);\n                if (response.message) {\n                    resolve(response.message);\n                } else if (response.exc) {\n                    reject(response.exc);\n                }\n            }\n        });\n    });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-03-20 10:10:40.548703",
  "module": null,
  "name": "Get member info 2",
  "script": "frappe.ui.form.on('Meeting', {\r\n    committee: function(frm) {\r\n        // Clear custom_president_mail and custom_deputy_mail fields\r\n        // frm.set_value('custom_president_mail', '');\r\n        // frm.set_value('custom_deputy_mail', '');\r\n        var committee = frm.doc.committee;\r\n        if (committee) {\r\n            // Fetch the Committee document\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Committee',\r\n                    name: committee\r\n                },\r\n                callback: function(response) {\r\n                    if (response.message) {\r\n                        var committee_doc = response.message;\r\n                        console.log('Committee Document:', committee_doc);\r\n                        var chairman_customer = committee_doc.committee_chairman;\r\n                        var deputy_customer = committee_doc.agents_committee;\r\n                        if (chairman_customer){\r\n                                 frappe.call({\r\n                                    method:'frappe.client.get',\r\n                                    args:{\r\n                                        doctype:'Customer',\r\n                                        name:chairman_customer\r\n                                    },\r\n                                     callback:function(response){\r\n                                      console.log('email is:', response.message.custom_email);\r\n                                      var email = response.message.custom_email;\r\n                                      frm.set_value('custom_president_mail',email);\r\n                                }\r\n                            });\r\n                            }\r\n                        if(deputy_customer){\r\n                                frappe.call({\r\n                                    method:'frappe.client.get',\r\n                                    args:{\r\n                                        doctype:'Customer',\r\n                                        name:deputy_customer\r\n                                    },\r\n                                     callback:function(response){\r\n                                      console.log('email is:', response.message.custom_email);\r\n                                      var email = response.message.custom_email;\r\n                                       frm.set_value('custom_deputy_mail',email);\r\n                                }\r\n                            });\r\n                        }    \r\n                  \r\n                         \r\n            \r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n        \r\n    //  function fetchContactEmails(customer, callback) {\r\n    // Fetch the Customer document\r\n    // frappe.call({\r\n    //     method: 'frappe.client.get',\r\n    //     args: {\r\n    //         doctype: 'Customer',\r\n    //         name: customer\r\n    //     },\r\n    //     callback: function(response) {\r\n    //         if (response.message) {\r\n    //             var customer_doc = response.message;\r\n    //             var primary_contact = customer_doc.custom_email;\r\n    //             if (primary_contact) {\r\n    //               //  Fetch the Contact document\r\n    //                 frappe.call({\r\n    //                     method: 'frappe.client.get',\r\n    //                     args: {\r\n    //                         doctype: 'Contact',\r\n    //                         name: primary_contact\r\n    //                     },\r\n                        // callback: function(contact_response) {\r\n                            // if (contact_response.message) {\r\n                            //     var contact_doc = contact_response.message;\r\n                            //     if (contact_doc.email_ids && contact_doc.email_ids.length > 0) {\r\n                            //         var emails = contact_doc.email_ids.map(function(email) {\r\n                            //             return email.email_id;\r\n                            //         });\r\n                            //         callback(emails);\r\n                            //     } else {\r\n                            //         callback([\"hi\",\"hello\"]);\r\n                            //     }\r\n                            // } else {\r\n                            //     callback([]);\r\n                            // }\r\n    //                     }\r\n    //                 });\r\n    //             } else {\r\n    //                 callback([]);\r\n    //             }\r\n    //         } else {\r\n    //             callback([]);\r\n    //         }\r\n    //     }\r\n    // });\r\n// }\r\n\r\n                  // Fetch email addresses for Chairman and Deputy customers\r\n                        // fetchContactEmails(chairman_customer, function(chairman_emails) {\r\n                            // if (chairman_emails && chairman_emails.length > 0) {\r\n                            //     console.log('Chairman emails:', chairman_emails);\r\n                            //     frm.set_value('custom_president_mail', chairman_emails.join(', '));\r\n                            //     frm.refresh_field('custom_president_mail');\r\n                            // } else {\r\n                            //     console.log('Chairman emails not found for customer:', chairman_customer);\r\n                            // }\r\n                        // });\r\n\r\n                        // fetchContactEmails(deputy_customer, function(deputy_emails) {\r\n                        //     if (deputy_emails && deputy_emails.length > 0) {\r\n                        //         console.log('Deputy emails:', deputy_emails);\r\n                        //         frm.set_value('custom_deputy_mail', deputy_emails.join(', '));\r\n                        //         frm.refresh_field('custom_deputy_mail');\r\n                        //     } else {\r\n                        //         console.log('Deputy emails not found for customer:', deputy_customer);\r\n                        //     }\r\n                        // }); \r\n       \r\n       \r\n       \r\n       \r\n        \r\n    }\r\n});\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Generalization",
  "enabled": 0,
  "modified": "2024-03-20 16:30:44.019719",
  "module": null,
  "name": "SC 2",
  "script": "// frappe.ui.form.on('Generalization', {\r\n//   refresh(frm) {\r\n//     frm.add_custom_button(__('Action'), function(){\r\n//       if(frm.doc.__unsaved) frappe.throw(\"save doc first\")\r\n//       frappe.call({\r\n//         \"method\": \"news_article.api.api.get_committee_mail2\",\r\n//         \"args\": {\"gen\": frm.doc.name, \"customer_status\": frm.doc.condition_of_members},\r\n//         \"callback\": function(r) {\r\n//           let emails = r.message\r\n//           let customer_emails = []\r\n//           console.log(emails)\r\n          \r\n//           // for (let email of emails) {\r\n//           //     customer_emails.push(frappe.get_doc({\r\n//           //         \"doctype\": \"Newsletter Attachment\",\r\n//           //         \"parentfield\": \"customer_email\",\r\n//           //         \"parenttype\": \"Customer Newsletter\",\r\n//           //         \"email\": email\r\n//           //     }))\r\n//           // }\r\n//           frappe.new_doc(\"Customer Newsletter\", {\r\n            \r\n//           }).then(() => {\r\n//             for(let email of emails) {\r\n//               cur_frm.add_child(\"customer_email\",{\r\n//                 \"email\": email\r\n//               })\r\n//             }\r\n//             cur_frm.refresh_fields()\r\n//           })\r\n//         }\r\n//       })\r\n//     }, __(\"\"));\r\n\r\n//   }\r\n// })\r\n\r\nfrappe.ui.form.on('Generalization', {\r\n  refresh(frm) {\r\n    frm.add_custom_button(__('Action'), function(){\r\n      if(frm.doc.__unsaved) frappe.throw(\"save doc first\")\r\n      frappe.call({\r\n        \"method\": \"news_article.api.api.get_committee_mail\",\r\n        \"args\": {\"gen\": frm.doc.name, \"customer_status\": frm.doc.condition_of_members},\r\n        \"callback\": function(r) {\r\n          let emails = r.message\r\n          let customer_emails = []\r\n          console.log(emails)\r\n          \r\n          // for (let email of emails) {\r\n          //     customer_emails.push(frappe.get_doc({\r\n          //         \"doctype\": \"Newsletter Attachment\",\r\n          //         \"parentfield\": \"customer_email\",\r\n          //         \"parenttype\": \"Customer Newsletter\",\r\n          //         \"email\": email\r\n          //     }))\r\n          // }\r\n          frappe.new_doc(\"Customer Newsletter\", {\r\n            \r\n          }).then(() => {\r\n            for(let email of emails) {\r\n              cur_frm.add_child(\"customer_email\",{\r\n                \"email\": email\r\n              })\r\n            }\r\n            cur_frm.refresh_fields()\r\n          })\r\n        }\r\n      })\r\n    }, __(\"\"));\r\n\r\n  }\r\n})\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-17 19:59:25.709801",
  "module": null,
  "name": "Member History",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tcustomer:function(frm) {\n\t\tif(frm.doc.customer && frm.doc.custom_renew_membership == \"1\"){\n\t\t    \n\t\t    \n\t\t    frappe.call({\n\t\t        method:\"frappe.client.get_list\",\n\t\t        args:{\n\t\t             doctype:\"Sales Invoice\",\n\t\t             limit:1,\n\t\t             order_by: \"creation DESC\",\n\t\t             filters:{customer:frm.doc.customer,custom_bundle_:\"\u0631\u0633\u0648\u0645 \u0637\u0644\u0628 \u062c\u062f\u064a\u062f\",status:'Paid'}\n\t\t            \n\t\t        },\n\t\t        callback:function(r){\n\t\t          // console.log(`the invoice list are ${r.message}`);\n\t\t          console.log(`the invoice list are ${JSON.stringify(r.message)}`);\n\t\t          //invoices=JSON.stringify(r.message);\n\t\t         if(r.message && r.message.length>0)\n\t\t         {\n\t\t             console.log(r.message[0].name)\n\t\t             const invoice_name=r.message[0].name\n\t\t             \n\t\t             frappe.call({\n\t\t                 method:\"frappe.client.get\",\n\t\t                 args:{\n\t\t                     doctype:\"Sales Invoice\",\n\t\t                     name:invoice_name\n\t\t                 },\n\t\t                 callback:function(r){\n\t\t                  //   console.log(`the data is ${JSON.stringify(r.message)}`)\n\t\t                  //   console.log(r.message);\n\t\t                  //   console.log(`log is ${r.message.custom_log[0]}`)\n\t\t                     frm.add_child(\"custom_member_history\",{\n\t\t                         year:r.message.year,\n\t\t                         paid_amount:r.message.paid_amount,\n\t\t                         sales_invoice_ref:r.message.name,\n\t\t                         volume_of_exports: r.message.custom_volume_of_exports,\n\t\t                         member_categories: r.message.custom_customer_group,\n\t\t                         outstanding_amount:r.message.outstanding_amount,\n\t\t                         season_name:r.message.custom_log[0].season_name\n\t\t                     })\n\t\t                     frm.refresh_field(\"custom_member_history\")\n\t\t                 }\n\t\t                 \n\t\t             })\n\t\t         }\n\t\t          \n\n\t\t        }\n\t\t       \n\t\t    })\n\t\t    \n\t\t    \n\t\t    \n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n})\n\n\n\n\n\n// function getHistory(){\n    \n    \n    \n    \n    \n    \n// }",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Member Export Volume Update",
  "enabled": 1,
  "modified": "2024-03-25 13:32:19.797336",
  "module": null,
  "name": "Update Member Exports",
  "script": "frappe.ui.form.on('Member Export Volume Update', {\n\tupdate_export_volume:function(frm) {\n\t\t\n\t\t\n\t\tfrappe.call({\n                async:false,\n                method: 'barcode_aec.update_member_exports.functiongdidaa',\n                args: {\n            },\n            callback: function(r) {\n                    // msgprint(\"Updated\");\n                }\n            });\n\t\t\n\t    frm.set_value('last_update_member_exports',frappe.datetime.now_datetime());\n\n\t\t\n\t\t\n\t}\n})\n\n///imporoved6",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-03-23 18:14:57.466974",
  "module": null,
  "name": "Get Last Mosanda From last invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\t    custom_check_last_invoice: function(frm) {\n        // Add custom button to trigger advanced search\n        // frm.add_custom_button(__('Advanced member Search'), function() {\n            // Open dialog box for input and search results\n            var d = new frappe.ui.Dialog({\n                title: __('Advanced Search'),\n                fields: [\n                    {'label': 'Last Invoice', 'fieldname':'custom_sales_invoice', 'fieldtype':'Link'},\n                    // {'label': 'Tax ID 2', 'fieldname':'tax_id_2', 'fieldtype':'Data'},\n                    // {'label': 'Customer Name', 'fieldname':'customer_name', 'fieldtype':'Data'},\n                    // {'label': 'Custom Company Code', 'fieldname':'custom_company_code', 'fieldtype':'Data'},\n                    {fieldname: 'results', fieldtype: 'HTML'}\n                ],\n            });\n\n            d.set_primary_action(__('Search'), function() {\n                searchCustomers();\n            });\n\n            d.show();\n\n            // Function to search for customers\n            function searchCustomers() {\n                var values = d.get_values();\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Sales Invoice',\n                        filters: {\n                            name: values.custom_sales_invoice,\n                            customer: cur_frm.doc.customer,\n                            custom_fr3oon: '\u0627\u0633\u062a\u0645\u0627\u0631\u0629 \u0627\u0644\u0645\u0633\u0627\u0646\u062f\u0629',\n                            status: 'Paid'\n                            \n                            // tax_id_2: values.tax_id_2,\n                            // customer_name: values.customer_name,\n                            // custom_company_code: values.custom_company_code\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(response) {\n                        // Handle search results and update table\n                        var customers = response.message;\n                        var html = '<table class=\"table table-bordered\">'\n                                    + '<thead><tr><th>Select</th><th>Sales Invoice</th></tr></thead>'\n                                    + '<tbody>';\n                        customers.forEach(function(customer) {\n                            html += '<tr><td><button class=\"btn btn-primary select-customer\" data-customer=\"' + customer.name + '\">Select</button></td><td>' + customer.name + '</td></tr>';\n                        });\n                        html += '</tbody></table>';\n                        d.fields_dict.results.$wrapper.html(html);\n\n                        // Bind click event for select button\n                        d.fields_dict.results.$wrapper.find('.select-customer').click(function() {\n                            var selected_customer = $(this).attr('data-customer');\n                            frm.set_value('customer', selected_customer);\n                            d.hide();\n                        });\n                    }\n                });\n            }\n        // });\n    }\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Annual Meeting Plan",
  "enabled": 0,
  "modified": "2024-03-28 13:04:14.454210",
  "module": null,
  "name": "Annual Meeting",
  "script": "frappe.ui.form.on('Annual Meeting Plan', {\n\tafter_workflow_action:function(frm) {\n\t    \n\t    \n\t    let meet = frm.doc.meeting_plane;\n\t    let name = cur_frm.doc.name;\n\t    console.log(name);\n\t\t\n\t\tif(frm.doc.workflow_state == '\u0645\u0648\u0627\u0641\u0642\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a'){\n\t\t    \n\t\t   meet.forEach(function(row) {\n                let meeting = frappe.model.get_new_doc(\"Meeting\");\n                meeting.committee = row.committe;\n                meeting.date = row.date;\n                meeting.custom_month = frm.doc.custom_month;\n                meeting.custom_year = frm.doc.custom_year;\n                meeting.custom_meeting_type = 'Annual Meeting';\n                meeting.custom_annual_meeting_ref =cur_frm.doc.name;\n                console.log(cur_frm.doc.name);\n                \n                frappe.db.insert(meeting)\n                    .then(function() {\n                        frappe.msgprint(\"Meeting Have Been Created For Each Committe\");\n                        // frappe.model.set_value(\"Meeting\", meeting.name, \"custom_meeting_type\", \"Annual Meeting\");\n                        // frappe.model.set_value(\"Meeting\", meeting.name,\"custom_annual_meeting_ref\", frm.doc.name);// Set the workflow state here\n\n                    })\n                    .catch(function(err) {\n                        console.log(\"Error creating meeting \", err);\n                    });\n            });\n\t\t  \n\t\t  \n\t\t    \n\t\t    \n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-03-23 18:27:45.425199",
  "module": null,
  "name": "testing 3423423",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    custom_check_last_invoice: function(frm) {\n        // Open dialog box for input and search results\n        var d = new frappe.ui.Dialog({\n            title: __('Advanced Search Sales Invoice'),\n            fields: [\n                {'label': 'Sales Invoice', 'fieldname':'custom_sales_invoice', 'fieldtype':'Link', options: 'Sales Invoice'},\n                // You can add more fields for filtering if needed\n                {fieldname: 'results', fieldtype: 'HTML'}\n            ],\n        });\n\n        d.set_primary_action(__('Search'), function() {\n            searchInvoice();\n        });\n\n        d.show();\n\n        // Function to search for specific sales invoice\n        function searchInvoice() {\n            var values = d.get_values();\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Sales Invoice',\n                    filters: {\n                        name: values.custom_sales_invoice,\n                        status: 'Paid',\n                        custom_fr3oon: '\u0627\u0633\u062a\u0645\u0627\u0631\u0629 \u0627\u0644\u0645\u0633\u0627\u0646\u062f\u0629',\n                        customer: cur_frm.doc.customer\n                        // Add more filters if needed\n                        // e.g., customer: cur_frm.doc.customer,\n                        // status: 'Paid'\n                    },\n                    fields: ['name']\n                },\n                callback: function(response) {\n                    // Handle search results and update table\n                    var invoices = response.message;\n                    var html = '<table class=\"table table-bordered\">'\n                                + '<thead><tr><th>Select</th><th>Sales Invoice</th></tr></thead>'\n                                + '<tbody>';\n                    invoices.forEach(function(invoice) {\n                        html += '<tr><td><button class=\"btn btn-primary select-invoice\" data-invoice=\"' + invoice.name + '\">Select</button></td><td>' + invoice.name + '</td></tr>';\n                    });\n                    html += '</tbody></table>';\n                    d.fields_dict.results.$wrapper.html(html);\n\n                    // Bind click event for select button\n                    d.fields_dict.results.$wrapper.find('.select-invoice').click(function() {\n                        var selected_invoice = $(this).attr('data-invoice');\n                        // Optionally, you can perform actions with the selected invoice\n                        frm.set_value('custom_sales_invoice', selected_invoice);\n                        // Here 'selected_invoice' is a field on your form to store the selected invoice\n                        d.hide();\n                    });\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-03-25 11:31:34.300189",
  "module": null,
  "name": "Requested Filter",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        frm.set_query(\"customer\", function() {\n            console.log(\"WE are HERE\");\n            if (frm.doc.custom_bundle_ === \"\u0631\u0633\u0648\u0645 \u0637\u0644\u0628 \u062c\u062f\u064a\u062f\" && frm.doc.custom_renew_membership === undefined) {\n                return {\n                    filters: [\n                        ['Customer', 'custom_customer_status', '=', 'Requested']\n                    ]\n                };\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Member Export Volume Update",
  "enabled": 1,
  "modified": "2024-04-22 13:54:53.892810",
  "module": null,
  "name": "Update Products Volume",
  "script": "frappe.ui.form.on('Member Export Volume Update', {\n\tupdate_products_volume:function(frm){\n\t    \n\t    \n\t    \t\tfrappe.call({\n                async:false,\n                method: 'barcode_aec.update_products.functiongdidaa',\n                args: {\n            },\n            callback: function(r) {\n                    // msgprint(\"Updated\");\n                }\n            });\n\t    \n\t   frm.set_value('last_update_products_exports',frappe.datetime.now_datetime());\n\n\t    \n\t    \n\t}\n})\n\n\n\n//update_customer_products\n//update_products",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Member Export Volume Update",
  "enabled": 1,
  "modified": "2024-03-25 13:30:15.845376",
  "module": null,
  "name": "Update Countries Volume",
  "script": "frappe.ui.form.on('Member Export Volume Update', {\nupdate_countries_volume:function(frm){\n    \n    \n    \t  frappe.call({\n                async:false,\n                method: 'barcode_aec.update_countries.functiongdidaa',\n                args: {\n            },\n            callback: function(r) {\n                    // msgprint(\"Updated\");\n                }\n            });\n    \n    frm.set_value('last_update_countries_exports',frappe.datetime.now_datetime());\n    \n}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 0,
  "modified": "2024-04-24 13:10:18.194654",
  "module": null,
  "name": "contact 2",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\n    onload: function(frm) {\n        frm.set_query(\"authority\", \"custom_contact\", function(doc, cdt, cdn) {\n            return {\n                filters: [\n                    ['parent_authority', '=', 'All Authority']\n                ]\n            };\n        }); \n\n        frm.set_query(\"sector\", \"custom_contact\", function(doc, cdt, cdn) {\n            let d = locals[cdt][cdn];\n            if (d.authority) {\n                return {\n                    filters: [\n                        ['parent_authority', '=', d.authority]\n                    ]\n                };\n            }\n        });\n\n        frm.set_query(\"center_management\", \"custom_contact\", function(doc, cdt, cdn) {\n            let d = locals[cdt][cdn];\n            if (d.sector) {\n                return {\n                    filters: [\n                        ['parent_authority', '=', d.sector]\n                    ]\n                };\n            } else {\n                return {\n                    filters: []\n                };\n            }\n        });\n\n        frm.set_query(\"branch_management\", \"custom_contact\", function(doc, cdt, cdn) {\n            let d = locals[cdt][cdn];\n            return {\n                filters: [\n                    ['parent_authority', '=', d.center_management]\n                ]\n            };\n        });\n    },\n\n    before_save: function(frm) {\n        let items = frm.doc.custom_contact;\n        console.log(items);\n        for (let row of items) {\n            if (row.authority && row.sector && row.center_management && row.branch_management) {\n                getContact(row.branch_management, row);\n            } else if (row.authority && row.sector && row.center_management) {\n                getContact(row.center_management, row);\n            } else if (row.authority && row.sector) {\n                getContact(row.sector, row);\n            } else if (row.authority) {\n                getContact(row.authority, row);\n            }\n        }\n    }\n});\n\nfunction getContact(name, row) {\n    frappe.call({\n        method: \"frappe.client.get\",\n        args: {\n            doctype: \"Authority\",\n            name: name,\n            fieldname: 'authority_contact',\n        },\n        callback: function(response) {\n            console.log(response.message.authority_contact);\n            row.contact = response.message.custom_contact_me;\n        }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Volume Of Member Exports",
  "enabled": 1,
  "modified": "2024-03-25 11:06:13.722882",
  "module": null,
  "name": "Volume of Export Filter",
  "script": "frappe.ui.form.on('Volume Of Member Exports', {\n\trefresh:function(frm) {\n\t\n\t\n\tfrm.set_query(\"customer\", function() {\n            console.log(\"WE are HERE\");\n            if (frm.doc.custom_bundle_ === \"\u0631\u0633\u0648\u0645 \u0637\u0644\u0628 \u062c\u062f\u064a\u062f\") {\n                return {\n                    filters: [\n                        ['Customer', 'custom_customer_status', '=', 'Requested']\n                    ]\n                };\n            }\n        });\n\t\n\t\n\t\n\t\n\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data AEC Export",
  "enabled": 1,
  "modified": "2024-03-25 11:58:11.653530",
  "module": null,
  "name": "Filter status in update AEC",
  "script": "\nfrappe.ui.form.on('Data AEC Export', {\n    onload: function(frm) {\n        frm.set_query(\"season\", function() {\n            console.log(\"WE are HERE\");\n                return {\n                    filters: [\n                        ['Export Season', 'enable', '=', '1']\n                    ]\n                };\n            \n        });\n    }\n});\n\n\n\nfrappe.ui.form.on('Data AEC Export', {\n    validate: function(frm) {\n        // Check if there are existing records with the same season and month\n        var existing_records = frappe.get_list('Data AEC Export', {\n            filters: {\n                season: frm.doc.season,\n                month: frm.doc.month\n            },\n            limit: 1 // Only need to check if at least one record exists\n        });\n\n        if (existing_records.length > 0) {\n            // Display confirmation dialog\n            frappe.confirm(\n                'Records with the same season and month already exist. Do you want to continue saving?',\n                function() {\n                    // User pressed Yes, allow the save operation\n                    frm.save();\n                }\n            );\n            // Return false to prevent automatic saving\n            return false;\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Member Export Volume Update",
  "enabled": 1,
  "modified": "2024-03-25 14:02:55.568239",
  "module": null,
  "name": "Last Export Data",
  "script": "frappe.ui.form.on('Member Export Volume Update', {\n\trefresh:function(frm){\n\t    \n\t    console.log(\"we are here\");\n\t   frappe.db.get_list('Data AEC Export', {\n            fields: ['name'],\n            order_by: 'creation desc',\n            limit: 1\n        }).then(function(result) {\n            if (result && result.length > 0) {\n                console.log(result[0].name);\n                frm.set_value('last_exported_record', result[0].name);\n                \n                frappe.call({\n    method: 'frappe.client.get',\n    args: {\n        'doctype': 'Data AEC Export',\n        'name': result[0].name,\n    },\n    callback: function(r) {\n        if (!r.exc) {\n            frm.set_value('export_date', r.message.date);\n        }\n    }\n});\n                \n                \n                \n                \n            }\n        });\n        // frm.save();\n\t    \n\t    \n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-17 22:38:00.243397",
  "module": null,
  "name": "Mosanda Reprint Items",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tcustom_sales_invoice:function(frm) {\n\t\t\n\t\tif(frm.doc.custom_sales_invoice){\n\t\t    \n\t\t    \n\t\t     frappe.call({\n            method: 'frappe.client.get',\n            args: {\n             'doctype': 'Sales Invoice',\n             'name': frm.doc.custom_sales_invoice,\n    },\n    callback: function(r) {\n        if (!r.exc) {\n            console.log(r.message.items);\n            \n            var items = r.message.items;\n            cur_frm.clear_table(\"items\");\n\n            for(let row of items){\n                \n            frm.add_child('items', {\n            'item_name': row['custom_mosanda_reprint_item'],\n            'qty': 1,\n            'item_code': row['custom_mosanda_reprint_item'],\n            'rate': getRate(row['custom_mosanda_reprint_item']) ,\n            'amount': 1 * getRate(row['custom_mosanda_reprint_item']),\n            'uom':row['uom'],\n            'description':row['description'],\n            'income_account': row['income_account'],\n            'custom_mosanda_reprint_flag': 1,\n\n                });\n                \n            // if(row.custom_mosanda_reprint_flag == 1){\n            //     frm.set_value('is_pos', 0);\n            //     refresh_field('is_pos');\n                // frm.set_value('is_pos', 1);\n                // refresh_field('is_pos');\n            // }  \n                \n            }\n            refresh_field('items');\n            \n            \n        }\n    }\n});\n                \n\t\t    \n\t\t    \n\t\t    \n\t\t    \n\t\t    \n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n})\n\n\n\n\nfunction getIncome(item){\n        var income_data;\n      frappe.call({\n            method: 'frappe.client.get',\n            args: {\n            doctype: 'Item',\n            name: item,\n            fieldname: 'item_defaults'\n            \n    },\n    callback: function(r) {\n        console.log(r.message.item_defaults[0]['income_account']);\n        income_data = r.message.item_defaults[0]['income_account'];\n        console.log(income_date);\n        \n    }\n\n});\nreturn income_data;\n    \n    \n    \n    \n}\n\n    // for(let i of fr3o){\n    //             frm.add_child('items', {\n    //         'item_name': i['item_code'],\n    //         'qty': i['qty'],\n    //         'item_code': i['item_code'],\n    //         'rate':item_price.price_list_rate ,\n    //         'amount': parseFloat(i['qty']) * parseFloat(item_price.price_list_rate),\n    //         'uom':i['uom'],\n    //         'description':i['description'],\n    //         'income_account': i['income_account'],\n\n    //             });\n    //         }\n    //         refresh_field('items');\n    \n    \n    \n    \n    \n    \nfunction getRate(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfrappe.ui.form.on('Sales Invoice Item', {\n\tcustom_from_mosnada_print_serial_to_print:function(frm,cdt,cdn) {\n\t\t\n\t\t\n\t var d = locals[cdt][cdn]\n\t var from = d.custom_from_mosnada_print_serial_to_print;\n\t var to = d.custom_to_mosnada_print_serial_to_print;\n\t d.qty = (to - from) + 1;\n\trefresh_field('qty', d.name, d.parentfield); \n// \tfrm.save();\n\t\t\n\t}\n})\n\n\nfrappe.ui.form.on('Sales Invoice', {\n\tbefore_save:function(frm) {\n\t   if(frm.doc.is_pos == 1){\n\tif(frm.doc.payments[0].mode_of_payment == 'Cash'){\n\t           \n\t           frm.doc.payments[0].amount = frm.doc.total;\n\t           \n\t    \n\t}\t\n\t   }\t\n// \t var d = locals[cdt][cdn]\n// \t var from = d.custom_from_mosnada_print_serial_to_print;\n// \t var to = d.custom_to_mosnada_print_serial_to_print;\n// \t d.qty = (to - from) + 1;\n// \trefresh_field('qty', d.name, d.parentfield); \n\t\t\n\t}\n})\n\n\n\n\n\n\n\nfrappe.ui.form.on('Sales Invoice Item', {\n\tcustom_to_mosnada_print_serial_to_print:function(frm,cdt,cdn) {\n\t\t\n\t\t\n\t var d = locals[cdt][cdn]\n\t var from = d.custom_from_mosnada_print_serial_to_print;\n\t var to = d.custom_to_mosnada_print_serial_to_print;\n\t d.qty = (to - from) + 1;\n\trefresh_field('qty', d.name, d.parentfield); \n//     d.amount = d.qty * d.rate;\n// \trefresh_field('amount',d.name, d.parentfield);\n// \tfrm.save();\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data AEC Export",
  "enabled": 1,
  "modified": "2024-03-26 13:52:45.890701",
  "module": null,
  "name": "Confirm Message Before Importing",
  "script": "frappe.ui.form.on('Data AEC Export', {\n\tvalidate:function(frm) {\n\t\t\n\t\t\n\t\tvar month = frm.doc.month\n\t\tvar season_name = frm.doc.season_name;\n\t\t\n\t\t frappe.call({\n\t\t        method:\"frappe.client.get_list\",\n\t\t        args:{\n\t\t             doctype:\"Data AEC Export\",\n\t\t             filters:{month:month, season_name: season_name}\n\t\t            \n\t\t        },\n\t\t        callback:function(r){\n\t\t          console.log(r.message);\n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            if(r.message.length > 0){\n\t\t                \n\t\t                \n\t\t      frappe.confirm('There are Export With the Same Month And Same Season Name, Do You Want to Continue?',\n                    function(){\n                        // Yes button clicked\n                        // update_custom_status(frm,'Invitation sent to  Committee Deputy');\n                        // Hide the button\n                        // frm.fields_dict.custom_send_mail_invitation_to_committee_deputy.$wrapper.hide();\n                        // frappe.msgprint('Invitation sent successfully.');\n                        // frm.save();s\n                        frm.save();\n                    },\n                    function(){\n                        \n                        // frappe.throw(\"You Can't Import This Season with the same month\");\n                        console.log(\"No\");\n                    }\n                \n            );\n\t\t                \n\t\t                \n\t\t                \n\t\t            }\n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t            \n\t\t    \n\t\t        }})\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n})\n\n\n\n// frappe.confirm('Are you sure you want to send the invitation to the Committee Deputy?',\n//                     function(){\n//                         // Yes button clicked\n//                         update_custom_status(frm,'Invitation sent to  Committee Deputy');\n//                         // Hide the button\n//                         frm.fields_dict.custom_send_mail_invitation_to_committee_deputy.$wrapper.hide();\n//                         frappe.msgprint('Invitation sent successfully.');\n//                         // frm.save();s\n//                     },\n//                     function(){\n//                         // No button clicked\n//                         frappe.msgprint('Invitation not sent.'); // Optional message\n//                     }\n                \n//             );",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-03-26 22:38:44.900306",
  "module": null,
  "name": "Lab Is Printed",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        \n        if (frm.doc.status === 'Paid' && frm.doc.items[0].item_code === '\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644 \u0627\u0644\u0645\u0631\u0643\u0632\u064a') {\n            frm.add_custom_button(__('\u0637\u0628\u0627\u0639\u0629 \u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0639\u0645\u0644'), function() {\n                var items = frm.doc.items;\n                // let temp = items[0]['qty'];\n                let print_format = items[0]['custom_print_format'];\n                \n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,          \n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\" \n                );\n                \n                \n                frm.set_value('custom_is_printed' , 1);\n                \n                \n                \n            });\n\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "To whom it may concern",
  "enabled": 1,
  "modified": "2024-04-01 18:40:36.207591",
  "module": null,
  "name": "May Concern Print English button",
  "script": "frappe.ui.form.on('To whom it may concern', {\n\tbefore_save: function(frm) {\n// \t\tif(frm.doc.status === 'Paid' && frm.doc.items[0].item_code == \"\u0627\u0644\u0634\u0647\u0627\u062f\u0629 \u0627\u0644\u0632\u0631\u0627\u0639\u064a\u0629\"){\n\t\t  //  let print_format = frm.doc.agriculture_certificatee;\n\t\t  //let print_format = '\u0627\u0644\u0634\u0647\u0627\u062f\u0629 \u0627\u0644\u0632\u0631\u0627\u0639\u064a\u0629 \u0625\u0646\u062c\u0644\u064a\u0632\u064a';\n\t\t  let print_format = 'To whom it may concern new doc';\n\t\t  //  if(print_format){\n\t\t     frm.add_custom_button(__('\u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0648\u062c\u0647 \u0627\u0646\u062c\u0644\u064a\u0632\u064a'), function() {\n                var items = frm.doc.items;\n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head\n                    \n                );\n\t\t     });\n\t\t  //  }\n\t\t   \n\t\t}\n\n// \t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "To whom it may concern",
  "enabled": 1,
  "modified": "2024-04-01 18:40:24.392352",
  "module": null,
  "name": "May Concern Arabic print button",
  "script": "frappe.ui.form.on('To whom it may concern', {\n\t\tbefore_save: function(frm) {\n\t\t  \n\t\t  let print_format = '\u0627\u0644\u064a \u0645\u0646 \u064a\u0647\u0645\u0647 \u0627\u0644\u0627\u0645\u0631 2';\n\t\t  //  if(print_format){\n\t\t     frm.add_custom_button(__('\u0637\u0628\u0627\u0639\u0629 \u0627\u0644\u062e\u0637\u0627\u0628 \u0627\u0644\u0645\u0648\u062c\u0647 \u0639\u0631\u0628\u064a'), function() {\n            \n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n                );\n\t\t     });\n\t\t  \n\t\t   \n\t\t}\n\n\t\n\n\n\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-03-27 23:01:48.241889",
  "module": null,
  "name": "Company Print Button",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh: function(frm) {\n\t\t  \n\t\t  let print_format = 'Company Profile';\n\t\t  //  if(print_format){\n\t\t     frm.add_custom_button(__('Company Profile'), function() {\n            \n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n                );\n\t\t     });\n\t\t  \n\t\t   \n\t\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Company Profile Form",
  "enabled": 1,
  "modified": "2024-04-01 18:41:34.824060",
  "module": null,
  "name": "Company Profile",
  "script": "frappe.ui.form.on('Company Profile Form', {\n\ton_submit: function(frm) {\n\t\t  \n\t\t  let print_format = 'Company Profile';\n\t\t  //  if(print_format){\n\t\t     frm.add_custom_button(__('Company Profile'), function() {\n            \n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n                );\n\t\t     });\n\t\t  \n\t\t   \n\t\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Product",
  "enabled": 1,
  "modified": "2024-03-28 19:13:15.593561",
  "module": null,
  "name": "Product Image",
  "script": "frappe.ui.form.on('Product', {\r\n    refresh: function(frm) {\r\n        var products = frm.doc.products_image;\r\n        \r\n        var html = `\r\n        <html>\r\n        <head>\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n            <style>\r\n                .grid-container {\r\n                    display: grid;\r\n                    grid-template-columns: repeat(3, 1fr); /* Three items per row */\r\n                    grid-gap: 20px; /* Space between grid items */\r\n                }\r\n                .grid-item {\r\n                    text-align: center;\r\n                    border: 2px solid #000000;\r\n                    border-radius: 10px; /* Rounded corners */\r\n                    overflow: hidden; /* Hide overflow content */\r\n                }\r\n                .grid-item img {\r\n                    width: 100%; /* Ensure image fits inside grid item */\r\n                    height: auto; /* Maintain aspect ratio */\r\n                }\r\n            </style>\r\n        </head>\r\n        <body>\r\n            <div class=\"grid-container\">\r\n        `;\r\n        \r\n        for (let row of products) {\r\n            html += `\r\n                <div class=\"grid-item\">\r\n                    <img src=\"${row.attach}\">\r\n                </div>\r\n            `;\r\n        }\r\n        \r\n        html += `\r\n            </div>\r\n        </body>\r\n        </html>\r\n        `;\r\n        \r\n        frm.fields_dict.products_images.$wrapper.html(html);\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Treasury bills",
  "enabled": 1,
  "modified": "2024-03-28 11:57:04.251886",
  "module": null,
  "name": "Remaining Balance Color Negative",
  "script": "frappe.ui.form.on('Treasury bills', {\r\n    refresh: function(frm) {\r\n        var rem = frm.doc.remaining_balance;\r\n        if (rem < 0) {\r\n            $('input[data-fieldname=\"remaining_balance\"]').css(\"background-color\", \"#FFE4C4\");\r\n            $('input[data-fieldname=\"remaining_balance\"]').css(\"color\", \"red\");\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-03-28 11:52:17.917169",
  "module": null,
  "name": "Set Year and Month In Meeting",
  "script": "frappe.ui.form.on('Meeting', {\n    date:function(frm){\n      \n      let date = new Date(frm.doc.date);  \n      var month = frm.doc.custom_month;\n      var year = frm.doc.custom_year;\n        \n    month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n                  \n    \n    \n    var month_index = date.getMonth();          \n    var y = date.getFullYear();\n    var monthName = month[month_index];\n        \n    frm.set_value('custom_year', y);\n    frm.set_value('custom_month', monthName);\n        \n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Annual Meeting Plan",
  "enabled": 1,
  "modified": "2024-03-28 12:33:31.779281",
  "module": null,
  "name": "Set First day of the month selected in annual meeting",
  "script": "frappe.ui.form.on('Annual Meeting Plane Table', {\n    month: function(frm, cdt, cdn) {\n        var row = locals[cdt][cdn];\n        var selectedMonths = row.month; // Assuming 'month' is a multi-select field\n\n        // Array of month names\n        var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n        // Get the current year\n        var currentDate = new Date();\n        var year = currentDate.getFullYear();\n\n        // Initialize an array to hold date strings for selected months\n        var dateStrings = [];\n\n        // Check if selectedMonths is an array\n        if (!Array.isArray(selectedMonths)) {\n            // Convert to array\n            selectedMonths = [selectedMonths];\n        }\n\n        // Loop through selected months and generate date strings\n        selectedMonths.forEach(function(month) {\n            var monthIndex = months.indexOf(month) + 1; // Index starts from 0, so add 1\n            var dateString = year + \"-\" + (\"0\" + monthIndex).slice(-2) + \"-01\";\n            dateStrings.push(dateString);\n        });\n\n        // Set the value of the 'date' field to the array of date strings\n        frappe.model.set_value(cdt, cdn, 'date', dateStrings.join('\\n'));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-03-28 14:47:34.448325",
  "module": null,
  "name": "Sales Invoice Recommendations",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n\t\t\n\t\t\n\tlet last = frm.doc.custom_member_history;\n\t\n\tlet rec = frm.doc.custom_recommendation_invoice;\n\t\t\n    \n    for(let row of last){\n        \n        if(row.year){\n           if(Date(row.year) < frappe.datetime.now_datetime().year){\n            \n            \n            \n            \n            \n }     \n        }\n        \n        \n        \n        \n    }\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Annual Meeting Plan",
  "enabled": 1,
  "modified": "2024-03-28 13:16:12.073690",
  "module": null,
  "name": "Committee Annual Meeting After Approve",
  "script": "frappe.ui.form.on('Annual Meeting Plan', {\n\tafter_workflow_action:function(frm) {\n\t    \n\t    \n\t    let meet = frm.doc.meeting_plane;\n\t    let name = cur_frm.doc.name;\n\t    console.log(name);\n\t\t\n\t\tif(frm.doc.workflow_state == '\u0645\u0648\u0627\u0641\u0642\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a'){\n\t\t    \n\t\t   meet.forEach(function(row) {\n                let meeting = frappe.model.get_new_doc(\"Committee Annual Meeting\");\n                meeting.committee = row.committe; //\n                meeting.meeting_date = row.date; //\n                meeting.month = row.month; //\n                meeting.year = frm.doc.custom_year;\n                // meeting.custom_meeting_type = 'Annual Meeting';\n                meeting.annual_meeting_reference =cur_frm.doc.name;\n                console.log(cur_frm.doc.name);\n                \n                frappe.db.insert(meeting)\n                    .then(function() {\n                        frappe.msgprint(\"Meeting Have Been Created For Each Committe\");\n                        // frappe.model.set_value(\"Meeting\", meeting.name, \"custom_meeting_type\", \"Annual Meeting\");\n                        // frappe.model.set_value(\"Meeting\", meeting.name,\"custom_annual_meeting_ref\", frm.doc.name);// Set the workflow state here\n\n                    })\n                    .catch(function(err) {\n                        console.log(\"Error creating meeting \", err);\n                    });\n            });\n\t\t  \n\t\t  \n\t\t    \n\t\t    \n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-04-23 13:29:40.092013",
  "module": null,
  "name": "meeting button style",
  "script": "frappe.ui.form.on('Meeting', {\r\n    onload_post_render: function(frm) {\r\n        // Apply custom CSS to the button\r\n        frm.$wrapper.find('.btn.btn-xs.btn-default').each(function() {\r\n            $(this).css({\r\n                \"background-color\": \"#008a4b\", \r\n                \"color\": \"#fff\" \r\n            });\r\n        });\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-07 22:25:07.860678",
  "module": null,
  "name": "Customer Balance",
  "script": "frappe.ui.form.on('Sales Invoice','customer',function(frm) {\nreturn frappe.call({\nmethod: \"erpnext.accounts.utils.get_balance_on\",\nargs: {date: frm.doc.posting_date, party_type: 'Customer', party: frm.doc.customer},\ncallback: function(r) {\nfrm.doc.custom_customer_outstanding_balance = r.message;\nrefresh_field('custom_customer_outstanding_balance');\n}\n});\n\n\n\n\n\n});\n\n\nfrappe.ui.form.on('Sales Invoice', {\n\tbefore_save:function(frm){\n\t    \n\t if(frm.doc.custom_customer_outstanding_balance > 0 && frm.doc.custom_bundle_ !== '\u0631\u0633\u0648\u0645 \u0637\u0644\u0628 \u062c\u062f\u064a\u062f' && frm.doc.custom_member_exception !==1)   {\n\t     \n\t   //  frappe.throw('\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u064a\u062c\u0628 \u0627\u0646 \u064a\u0633\u062f\u062f \u0627\u0644\u0645\u062a\u0628\u0642\u064a \u0639\u0644\u064a\u0647 \u0645\u0646 \u0641\u0648\u0627\u062a\u064a\u0631 \u0623\u0648\u0644\u0627');\n\t     frappe.validated = false;\n\t     frappe.msgprint('\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u064a\u062c\u0628 \u0627\u0646 \u064a\u0633\u062f\u062f \u0627\u0644\u0645\u062a\u0628\u0642\u064a \u0644\u0647 \u0645\u0646 \u0641\u0648\u0627\u062a\u064a\u0631');\n\t     \n\t     \n\t }\n\t    \n\t    \n\t    \n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Member Export Volume Update",
  "enabled": 1,
  "modified": "2024-04-01 10:30:47.843340",
  "module": null,
  "name": "Stop Board Member Calculations",
  "script": "frappe.ui.form.on('Member Export Volume Update', {\n\tstop_board_member_calculation:function(frm) {\n\t\t\n\t\t\n\t\tfrappe.call({\n                async:false,\n                method: 'barcode_aec.update_board.functiongdidaa',\n                args: {\n            },\n            callback: function(r) {\n                    // msgprint(\"Updated\");\n                }\n            });\n\t\t\n\t    frm.set_value('last_update',frappe.datetime.now_datetime());\n\n\t\t\n\t\t\n\t}\n})\n\n///imporoved6",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-04-03 10:26:53.544705",
  "module": null,
  "name": "Get Recommendations",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tcustom_get_recommendation:function(frm){\n\t    \n\t    \n\t    let invoices = frm.doc.custom_recommendation_invoice;\n\t    let history = frm.doc.custom_member_history;\n\t    var currentDate = new Date();\n\n\n        var currentYear = currentDate.getFullYear();\n\t    \n\t    \n\t    var committees = get_committees(frm.doc.customer);\n\t    var committees_you_would_like_to_join = committees.custom_committees_you_would_like_to_join;\n\t    let group = frm.doc.custom_customer_group;\n\t   // let price_prod = getRateItemPrice(group);\n\t    \n\t    \n\t    ////get customer data///////\n\t    \n\t    \n\t    \n\t    var customer = frm.doc.customer;\n        var count = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel = 0;\n        let counter_of_ra2es = 0;\n        let counter_of_customer = 0;\n        let counter_of_serv = 0;\n        for ( let i = 0 ; i < count.length ; i++){\n            const temp = count[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended'] !== 1  ){\n                counter_of_wakeel = counter_of_wakeel+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] !==1 ){\n                counter_of_ra2es = counter_of_ra2es+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && temp['ended'] !== 1){\n                counter_of_customer = counter_of_customer+1;\n               \n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] !== 1){\n                counter_of_serv = counter_of_serv+1;\n               \n            }\n        }\n        \n\t     console.log(\"Prod\" + counter_of_customer);\n\t     console.log(\"Ra2es\" + counter_of_ra2es);\n         console.log(\"wakeel\" + counter_of_wakeel);\n         console.log(\"serv\" + counter_of_serv);\n\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    var serv_price = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t    console.log('serv' + '' + serv_price);\n\t    var ra2es_price = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t    console.log('ra2ees price' + '' + ra2es_price);\n        var wakeel_price = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n        console.log('wakeel price' + '' + wakeel_price);\n        \n        \n        let total_ra2es = ra2es_price * counter_of_ra2es;\n        console.log(total_ra2es);\n        let total_wakeel = counter_of_wakeel * wakeel_price;\n        console.log(total_wakeel);\n        \n        let total_serv = serv_price * counter_of_serv;\n        \n        let total_prod = 0;\n        if(counter_of_customer > 0){\n            let price_prod = getRateItemPrice(group);\n            \n            console.log('pord price' + '' + price_prod.price_list_rate);\n            total_prod = price_prod.price_list_rate * counter_of_customer;\n        }\n        \n        console.log(total_ra2es + total_wakeel + total_prod + total_serv);\n        \n        \n        \n    ////////////////////////////////////////////////////////DONE///////////////////////////////////////////////////////////   \n        \n\t   // let price_prod = getRateItemPrice(group);\n\t    //add current year\n\t        frm.add_child(\"custom_recommendation_invoice\",{\n\t\t                         year:currentYear.toString(),\n\t\t                         expected_amount: parseFloat(total_ra2es + total_wakeel + total_prod + total_serv),\n\t\t                     })\n\t\t                     frm.refresh_field(\"custom_recommendation_invoice\");\n\t    \n    \n    ///////////////////////////////////////////////////////////////////DONE/////////////////////////////////////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ///////Past Years//////////////////////\n    \n    \t    \n\t   // var customer2 = frm.doc.customer;\n    //     var count2 = [];\n    //     frappe.call({\n    //         async:false,\n    //         method: 'frappe.client.get',\n    //         args: {\n    //             doctype: 'Customer',\n    //             filters: { name: customer },\n    //             fieldname: 'custom_committees_you_would_like_to_join' \n    //         },\n    //         callback: function(r) {\n    //             count2 = r.message.custom_committees_you_would_like_to_join;\n                \n    //         }\n    //     });\n        \n\n    //     let counter_of_wakeel2 = 0;\n    //     let counter_of_ra2es2 = 0;\n    //     let counter_of_customer2 = 0;\n    //     let counter_of_serv2 = 0;\n        \n    //     for ( let i = 0 ; i < count2.length ; i++){\n    //         const temp = count2[i];\n    //         if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended'] !== 1  ){\n    //             counter_of_wakeel2 = counter_of_wakeel2+1;\n    //         }\n    //         if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] !==1 ){\n    //             counter_of_ra2es2 = counter_of_ra2es2+1;\n    //         }\n    //         if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && temp['ended'] !== 1){\n    //             counter_of_customer2 = counter_of_customer2+1;\n               \n    //         }\n    //          if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] !== 1){\n    //             counter_of_serv2 = counter_of_serv2+1;\n               \n    //         }\n    //     }\n        \n\t   //  console.log(\"Prod\" + counter_of_customer2);\n\t   //  console.log(\"Ra2es\" + counter_of_ra2es2);\n    //      console.log(\"wakeel\" + counter_of_wakeel2);\n\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    \n\t   // var serv_price2 = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t   // console.log('serv2' + serv_price2);\n\t   // var ra2es_price2 = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t   // console.log('ra2ees price' + '' + ra2es_price2);\n    //     var wakeel_price2 = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n    //     console.log('wakeel price' + '' + wakeel_price2);\n        \n        \n    //     let total_ra2es2 = ra2es_price * counter_of_ra2es;\n        \n    //     console.log(total_ra2es);\n        \n    //     let total_wakeel2 = counter_of_wakeel * wakeel_price;\n        \n    //     console.log(total_wakeel);\n        \n    //     let total_serv2 = serv_price * counter_of_serv;\n        \n        \n    //     let total_prod2 = 0;\n    //     if(counter_of_customer2 > 0){\n    //         let price_prod2 = getRateItemPrice(group);\n            \n    //         console.log('pord price' + '' + price_prod2.price_list_rate);\n            \n    //         total_prod2 = price_prod2.price_list_rate * counter_of_customer2;\n    //     }\n        \n    //     console.log(total_ra2es2+ total_wakeel2 + total_prod2);\n    \n    \n    ///Past Year//////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    for(let row of history){\n        let rowYearNumber = parseInt(row.year);\n        \n        if(rowYearNumber+1 < currentYear){\n            \n            ///past Year Calc////\n            \n        var customer2 = frm.doc.customer;\n        var count2 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count2 = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel2 = 0;\n        let counter_of_ra2es2 = 0;\n        let counter_of_customer2 = 0;\n        let counter_of_serv2 = 0;\n        \n        for ( let i = 0 ; i < count2.length ; i++){\n            const temp = count2[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended'] == 1){\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n               \n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n            \n            if(rowYearNumber+1 >= parseInt(fromYear) && rowYearNumber+1 <= parseInt(toYear)){\n                counter_of_wakeel2 = counter_of_wakeel2+1;\n              \n            }\n             if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n                counter_of_wakeel2 = counter_of_wakeel2 + 1;\n             }\n            \n            else{\n                console.log('is not here');\n            }\n                \n                \n                \n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] ==1 ){\n                \n                  var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n            if(rowYearNumber+1 >= parseInt(fromYear2) && rowYearNumber+1 <= parseInt(toYear2)){\n                counter_of_ra2es2 = counter_of_ra2es2+1;\n              \n            }\n               if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n                counter_of_ra2es2 = counter_of_ra2es2 + 1;\n             }\n            else{\n                console.log('is not here');\n            }\n                \n                \n                \n                \n                \n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && temp['ended'] == 1){\n                \n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            if(rowYearNumber+1 >= parseInt(fromYear3) && rowYearNumber+1 <= parseInt(toYear3)){\n                counter_of_customer2 = counter_of_customer2+1;\n              \n            }\n             if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear3) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear3)))) {\n                counter_of_customer2 = counter_of_customer2 + 1;\n             }\n            else{\n                console.log('is not here');\n            }\n                \n                \n                \n                \n                \n                \n               \n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] == 1){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            if(rowYearNumber+1 >= parseInt(fromYear3) && rowYearNumber+1 <= parseInt(toYear3)){\n                counter_of_serv2 = counter_of_serv2+1;\n              \n            }\n             if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear4) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear4)))) {\n                counter_of_serv2 = counter_of_serv2 + 1;\n             }\n            \n            else{\n                console.log('is not here');\n            }\n                 \n                 \n                 \n                 \n                 \n                 \n                \n               \n            }\n        }\n        \n\t     console.log(\"Prod\" + counter_of_customer2);\n\t     console.log(\"Ra2es\" + counter_of_ra2es2);\n         console.log(\"wakeel\" + counter_of_wakeel2);\n\n\t    \n\t     var rate = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');\n\t     \n\t     var total_new_wakeel = rate.price_list_rate * counter_of_wakeel2;\n\t    \n\t    \n\t    /////check price list for rate////\n\t    \n\t   // let total_wakeel_before_2021 = 0;\n\t   // let total_ra2ees_before_2021 = 0;\n\t   // let total_prod_beore_2021 = 0;\n\t   // let total_serv_rate_before_2021 = 0;\n\t    \n\t    \n\t    \n\t    let logs = frm.doc.custom_log;\n\t    \n\t    let total_prod_group = 0;\n\t    \n\t    for(row of logs){\n\t        \n\t        if(rowYearNumber+1 == parseInt(row.season_name.split('-')[0])){\n\t            \n\t            var group_customer = get_customer_group(row.value);\n\t            var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);\n\t            \n\t            console.log('customer_rate');\n\t            console.log(customer_rate.price_list_rate);\n\t            console.log('True');\n\t            total_prod_group = customer_rate.price_list_rate * counter_of_customer2;\n\t        }else{\n\t            var group_customer2 = get_customer_group(frm.doc.custom_volume_of_exports);\n\t            var customer_rate2 = getRateItemPriceAfter2021(group_customer2[0].name); \n\t            \n\t            total_prod_group = customer_rate2.price_list_rate * counter_of_customer2;\n\t        }\n\t       // if(frm.doc.custom_customer_group){\n\t            \n\t       // }\n\t        \n\t        \n\t        \n\t        \n\t    }\n\t   \n\t    \n\t    ///////////////////////////////////\n\t   // let total_wakeel_after_2021 = 0;\n\t   // let total_ra2ees_after_2021 = 0;\n\t   // let total_prod_after_2021 = 0;\n\t   // let total_serv_rate_after_2021 = 0;\n\t    \n\t    \n\t    \n\t   // total_counter = counter_of_serv2 + counter_of_customer2 + counter_of_ra2es2 + counter_of_wakeel2;\n\t    \n\t   //if(rowYearNumber+1 < 2021){\n\t       var wakeel_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');\n\t       var ra2ees_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629');\n\t       \n\t       var customer_group = get_customer_group(frm.doc.custom_volume_of_exports);\n\t       console.log('customer_group');\n\t       console.log(customer_group[0].name);\n\t       \n\t       var prod_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629-2');\n\t       //var serv_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t       \n\t        let total_wakeel_before_2021 = wakeel_rate_before_2021.price_list_rate * counter_of_wakeel2;\n\t        let total_ra2ees_before_2021 = ra2ees_rate_before_2021.price_list_rate * counter_of_ra2es2 ;\n\t        let total_prod_before_2021 = prod_rate_before_2021.price_list_rate * counter_of_customer2;\n\t        let total_serv_rate_before_2021 = 2000 * counter_of_serv2;\n\t       \n\t       \n\t       let total_all_before_2021 = total_wakeel_before_2021 + total_ra2ees_before_2021 + total_serv_rate_before_2021 + total_prod_before_2021;\n\t       \n\t   //}else{\n\t   \n\t   ///////////////////////\n\t       \n\t       var wakeel_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');\n\t       var ra2ees_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629');\n\t       //var prod_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629');\n\t       //var serv_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t       \n\t        let total_wakeel_after_2021 = wakeel_rate_after_2021.price_list_rate * counter_of_wakeel2;\n\t        let total_ra2ees_after_2021 = ra2ees_rate_after_2021.price_list_rate * counter_of_ra2es2 ;\n\t       // let total_prod_after_2021 = prod_rate_after_2021 * counter_of_customer2;\n\t        let total_serv_rate_after_2021 = 2000 * counter_of_serv2;\n\t       \n\t        let total_all_after_2021 = total_wakeel_after_2021 + total_ra2ees_after_2021 + total_serv_rate_after_2021 + total_prod_group;\n\t       \n\t   //}\n\t    \n\t    \n\t    \n\t    \n\t    \n\t   // var serv_price2 = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t   // console.log('serv2' + serv_price2);\n\t   // var ra2es_price2 = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t   // console.log('ra2ees price' + '' + ra2es_price2);\n    //     var wakeel_price2 = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n    //     console.log('wakeel price' + '' + wakeel_price2);\n        \n        \n    //     let total_ra2es2 = ra2es_price * counter_of_ra2es;\n        \n    //     console.log(total_ra2es);\n        \n    //     let total_wakeel2 = counter_of_wakeel * wakeel_price;\n        \n    //     console.log(total_wakeel);\n        \n    //     let total_serv2 = serv_price * counter_of_serv;\n        \n        \n    //     let total_prod2 = 0;\n    //     if(counter_of_customer2 > 0){\n    //         let price_prod2 = getRateItemPrice(group);\n            \n    //         console.log('pord price' + '' + price_prod2.price_list_rate);\n            \n    //         total_prod2 = price_prod2.price_list_rate * counter_of_customer2;\n    //     }\n        \n        // console.log(total_ra2es2+ total_wakeel2 + total_prod2);\n    \n    let expectedAmount2;\nif (rowYearNumber+1 < 2021) {\n    expectedAmount2 = total_all_before_2021;\n} else if (rowYearNumber+1 == 2021 && rowYearNumber <= 2023) {\n    expectedAmount2 = total_all_after_2021;\n} else {\n    // Handle other cases if needed\n    expectedAmount2 = 0; // Default value or any other handling\n}\n            \n            ///Past Year Calc///\n            \n            \n                        let nextYear = rowYearNumber + 1;\n            \t        frm.add_child(\"custom_recommendation_invoice\",{\n\t\t                         year:nextYear,\n\t\t                         expected_amount: expectedAmount2,\n\t\t                     })\n\t\t                     frm.refresh_field(\"custom_recommendation_invoice\");\n            \n        }\n        \n        \n        \n    }\t    \n\t    \n\t    \n\t}\n})\n\n\n\n\n\n\n\n\n\nfunction getRateItemPriceForRa2es(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfunction getRateItemPriceForWakel(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\nfunction getRateItemPrice(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\n\n\n\nfunction get_committees(customer){\n    var temp;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                name: customer,\n            },\n            callback: function(r) {\n                temp = r.message;\n            }\n        });\n        return temp ;\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction getRateafter2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRatebefore2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\nfunction getServPrice(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\n\n\n\n\nfunction get_customer_group(value){\n    var temp = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_customer_group',\n        args: {\n            value: value\n        },\n        callback: function(r) {\n            temp = r.message;\n        }\n    });\n    return temp ;\n}\n\n\n\n\n\nfunction getRateItemPriceBefore2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRateItemPriceAfter2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-04-07 14:00:24.323183",
  "module": null,
  "name": "End Of Joined Committe",
  "script": "frappe.ui.form.on('Committees you would like to join', {\n    to:function(frm,cdt,cdn){\n        \n        var d = locals[cdt][cdn]\n        \n        if(d.to){\n            frappe.confirm('Are You Sure you want to end this member Committe?',\n                    function(){\n                        // Yes button clicked\n                     d.ended = 1;\n                     refresh_field('ended', d.name, d.parentfield);\n                     frm.add_child('custom_committee_member_history', {\n                    'committee': d.committees,\n                    'salutation': d.salutation,\n                    'from' : d.from,\n                    'to': d.to,\n                });\n                frm.refresh_field('custom_committee_member_history');\n                //  frm.get_field('custom_committees_you_would_like_to_join').grid.remove_row(d.doctype, d.name);\n                 var row = frm.fields_dict['custom_committees_you_would_like_to_join'].grid.grid_rows_by_docname[d.name];\n                    row.remove();\n                    frm.save();\n                //  frm.reload();\n                    },\n                    function(){\n                        \n                        // frappe.throw(\"You Can't Import This Season with the same month\");\n                        console.log(\"No\");\n                    }\n                \n            );\n            \n        }\n        \n        \n        \n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production requirements card",
  "enabled": 0,
  "modified": "2024-04-01 18:39:04.378416",
  "module": null,
  "name": "Print Button for \"\u062a\u0639\u0647\u062f\"",
  "script": "frappe.ui.form.on('Production requirements card', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-04-08 11:20:04.207222",
  "module": null,
  "name": "Cash Mode Of Payment Print Button",
  "script": "frappe.ui.form.on('Payment Entry', {\n\tafter_save:function(frm) {\n\t    \n\t    \n\t\t  let print_format = '\u0633\u0646\u062f \u0635\u0631\u0641 \u0646\u0642\u062f\u064a\u0629';\n\t\t    if(frm.doc.mode_of_payment == 'Cash'){\n\t\t     frm.add_custom_button(__('\u0633\u0646\u062f \u0635\u0631\u0641 \u0646\u0642\u062f\u064a\u0629'), function() {\n                // var items = frm.doc.items;\n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    // frm.doc.letter_head\n                    \n                );\n\t\t     });\n\t\t    }\n\t\t   \n\t\t}\n\n// \t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-01 19:21:13.237765",
  "module": null,
  "name": "Price List Fetch Depend on Year",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tyear:function(frm){\n\t    \n\t    var year = frm.doc.year;\n\t    var price_list1 = '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021';\n\t    var price_list2 = '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023';\n\t    \n\t    if(year < '2021'){\n\t        frm.set_value('selling_price_list', price_list1);\n\t        refresh_field('selling_price_list');\n\t    }else{\n\t         frm.set_value('selling_price_list', price_list2);\n\t        refresh_field('selling_price_list'); \n\t    }\n\t   \n\t    \n\t    \n\t    \n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-04-07 12:41:39.101783",
  "module": null,
  "name": "Get Recommendations 2",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tcustom_get_recommendation:function(frm){\n\t    \n\t    \n\t    let invoices = frm.doc.custom_recommendation_invoice;\n\t    let history = frm.doc.custom_member_history;\n\t    var currentDate = new Date();\n\n\n        var currentYear = currentDate.getFullYear();\n\t    \n\t    \n\t    var committees = get_committees(frm.doc.customer);\n\t    var committees_you_would_like_to_join = committees.custom_committees_you_would_like_to_join;\n\t    let group = frm.doc.custom_customer_group;\n\t   // let price_prod = getRateItemPrice(group);\n\t    \n\t    \n\t    ////get customer data//////////\n\t    \n\t    \n\t    \n\t    var customer = frm.doc.customer;\n        var count = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel = 0;\n        let counter_of_ra2es = 0;\n        let counter_of_customer = 0;\n        let counter_of_serv = 0;\n        for ( let i = 0 ; i < count.length ; i++){\n            const temp = count[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended'] !== 1  ){\n                counter_of_wakeel = counter_of_wakeel+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] !==1 ){\n                counter_of_ra2es = counter_of_ra2es+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && temp['ended'] !== 1){\n                counter_of_customer = counter_of_customer+1;\n               \n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] !== 1){\n                counter_of_serv = counter_of_serv+1;\n               \n            }\n        }\n        \n\t     console.log(\"Prod\" + counter_of_customer);\n\t     console.log(\"Ra2es\" + counter_of_ra2es);\n         console.log(\"wakeel\" + counter_of_wakeel);\n         console.log(\"serv\" + counter_of_serv);\n\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    var serv_price = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t    console.log('serv' + '' + serv_price);\n\t    var ra2es_price = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t    console.log('ra2ees price' + '' + ra2es_price);\n        var wakeel_price = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n        console.log('wakeel price' + '' + wakeel_price);\n        \n        \n        let total_ra2es = ra2es_price * counter_of_ra2es;\n        console.log(total_ra2es);\n        let total_wakeel = counter_of_wakeel * wakeel_price;\n        console.log(total_wakeel);\n        \n        let total_serv = serv_price * counter_of_serv;\n        \n        let total_prod = 0;\n        if(counter_of_customer > 0){\n            let price_prod = getRateItemPrice(group);\n            \n            console.log('pord price' + '' + price_prod.price_list_rate);\n            total_prod = price_prod.price_list_rate * counter_of_customer;\n        }\n        \n        console.log(total_ra2es + total_wakeel + total_prod + total_serv);\n        \n        \n        \n    ////////////////////////////////////////////////////////DONE////////////////////////////////////////////////////////////   \n        \n\t   // let price_prod = getRateItemPrice(group);\n\t    //add current year\n\t        frm.add_child(\"custom_recommendation_invoice\",{\n\t\t                         year:currentYear.toString(),\n\t\t                         expected_amount: parseFloat(total_ra2es + total_wakeel + total_prod + total_serv),\n\t\t                     })\n\t\t                     frm.refresh_field(\"custom_recommendation_invoice\");\n\t    \n    \n    ///////////////////////////////////////////////////////////////////DONE///////////////////////////////////////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ///////Past Years//////////////////////\n    \n    \t    \n\t   // var customer2 = frm.doc.customer;\n    //     var count2 = [];\n    //     frappe.call({\n    //         async:false,\n    //         method: 'frappe.client.get',\n    //         args: {\n    //             doctype: 'Customer',\n    //             filters: { name: customer },\n    //             fieldname: 'custom_committees_you_would_like_to_join' \n    //         },\n    //         callback: function(r) {\n    //             count2 = r.message.custom_committees_you_would_like_to_join;\n                \n    //         }\n    //     });\n        \n\n    //     let counter_of_wakeel2 = 0;\n    //     let counter_of_ra2es2 = 0;\n    //     let counter_of_customer2 = 0;\n    //     let counter_of_serv2 = 0;\n        \n    //     for ( let i = 0 ; i < count2.length ; i++){\n    //         const temp = count2[i];\n    //         if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended'] !== 1  ){\n    //             counter_of_wakeel2 = counter_of_wakeel2+1;\n    //         }\n    //         if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] !==1 ){\n    //             counter_of_ra2es2 = counter_of_ra2es2+1;\n    //         }\n    //         if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && temp['ended'] !== 1){\n    //             counter_of_customer2 = counter_of_customer2+1;\n               \n    //         }\n    //          if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] !== 1){\n    //             counter_of_serv2 = counter_of_serv2+1;\n               \n    //         }\n    //     }\n        \n\t   //  console.log(\"Prod\" + counter_of_customer2);\n\t   //  console.log(\"Ra2es\" + counter_of_ra2es2);\n    //      console.log(\"wakeel\" + counter_of_wakeel2);\n\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    \n\t   // var serv_price2 = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t   // console.log('serv2' + serv_price2);\n\t   // var ra2es_price2 = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t   // console.log('ra2ees price' + '' + ra2es_price2);\n    //     var wakeel_price2 = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n    //     console.log('wakeel price' + '' + wakeel_price2);\n        \n        \n    //     let total_ra2es2 = ra2es_price * counter_of_ra2es;\n        \n    //     console.log(total_ra2es);\n        \n    //     let total_wakeel2 = counter_of_wakeel * wakeel_price;\n        \n    //     console.log(total_wakeel);\n        \n    //     let total_serv2 = serv_price * counter_of_serv;\n        \n        \n    //     let total_prod2 = 0;\n    //     if(counter_of_customer2 > 0){\n    //         let price_prod2 = getRateItemPrice(group);\n            \n    //         console.log('pord price' + '' + price_prod2.price_list_rate);\n            \n    //         total_prod2 = price_prod2.price_list_rate * counter_of_customer2;\n    //     }\n        \n    //     console.log(total_ra2es2+ total_wakeel2 + total_prod2);\n    \n    \n    ///Past Year///////////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    for(let row of history){\n        let rowYearNumber = parseInt(row.year);\n        \n        if(rowYearNumber < currentYear && rowYearNumber+1 !== currentYear){\n            \n            ///past Year Calc////\n            \n        var customer2 = frm.doc.customer;\n        var count2 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count2 = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel2 = 0;\n        let counter_of_ra2es2 = 0;\n        let counter_of_customer2 = 0;\n        let counter_of_serv2 = 0;\n        \n        for ( let i = 0 ; i < count2.length ; i++){\n            const temp = count2[i];\n            console.log('Length'+''+ count2.length);\n            console.log(temp['salutation']);\n            if (temp['salutation'].includes('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629') ) {\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                 if(toYear == 1970){\n                     toYear=== null;\n                     console.log(toYear);\n                 }\n            \n            if((rowYearNumber+1 >= parseInt(fromYear) && (rowYearNumber+1 <= parseInt(toYear) ) || toYear === 1970)){\n                counter_of_wakeel2 = counter_of_wakeel2+1;\n              \n            }\n            if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n                counter_of_wakeel2 = counter_of_wakeel2 +1;\n            }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_wakeel2 = counter_of_wakeel2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here1');\n            // }\n                \n                // && temp['ended'] ==1 ) || (temp['to']=== null || temp['ended'] ===0))\n                \n            }\n            else\n            {\n                console.log(\"in else \");\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" ) {\n                \n                  var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear2) && (rowYearNumber+1 <= parseInt(toYear2)) || toYear2=== 1970)){\n                counter_of_ra2es2 = counter_of_ra2es2+1;\n              \n            }\n            \n             if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n                counter_of_ra2es2 = counter_of_ra2es2 +1;\n            }\n            //   if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_ra2es2 = counter_of_ra2es2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here2');\n            // }\n                \n                \n                \n                \n                \n            }\n            if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" ){\n                \n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n                counter_of_customer2 = counter_of_customer2+1;\n              \n            }\n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer2 = counter_of_customer2 +1;\n            // }\n            \n            // if (((rowYearNumber + 1 >= parseInt(fromYear3) && rowYearNumber + 1 <= parseInt(toYear3)) || toYear3 === 1970) && rowYearNumber + 1 <= parseInt(toYear3)) {\n            //          counter_of_customer2 = counter_of_customer2 + 1;\n            // }\n\n            \n            \n            \n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear3) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear3)))) {\n            //     counter_of_customer2 = counter_of_customer2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here3');\n            // }\n                \n                \n                \n                \n                \n                \n               \n            }\n             if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear4) && ( rowYearNumber+1 <= parseInt(toYear4)) || toYear4 === 1970) ){\n                counter_of_serv2 = counter_of_serv2+1;\n              \n            }\n              if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n                counter_of_serv2 = counter_of_serv2 +1;\n            }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear4) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear4)))) {\n            //     counter_of_serv2 = counter_of_serv2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here4');\n            // }\n                 \n                 \n                 \n                 \n                 \n                 \n                \n               \n            }\n        }\n        \n\t     console.log(\"Prod2\" + counter_of_customer2);\n\t     console.log(\"Ra2es2\" + counter_of_ra2es2);\n         console.log(\"wakeel2\" + counter_of_wakeel2);\n         console.log(\"serv2\" + counter_of_serv2);\n\n\t    \n\t     var rate = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');\n\t     \n\t     var total_new_wakeel = rate.price_list_rate * counter_of_wakeel2;\n\t    \n\t    \n\t    /////check price list for rate////////\n\t    \n\t   // let total_wakeel_before_2021 = 0;\n\t   // let total_ra2ees_before_2021 = 0;\n\t   // let total_prod_beore_2021 = 0;\n\t   // let total_serv_rate_before_2021 = 0;\n\t    \n\t    \n\t    \n\t    let logs = frm.doc.custom_log;\n\t    \n\t    let total_prod_group = 0;\n\t    \n\t    for(row of logs){\n\t        \n\t        if(rowYearNumber+1 == parseInt(row.season_name.split('-')[0])){\n\t            \n\t            var group_customer = get_customer_group(row.value);\n\t            var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);\n\t            \n\t            console.log('customer_rate');\n\t            console.log(customer_rate.price_list_rate);\n\t            console.log('True');\n\t            total_prod_group = customer_rate.price_list_rate * counter_of_customer2;\n\t        }else{\n\t            var group_customer2 = get_customer_group(frm.doc.custom_volume_of_exports);\n\t            var customer_rate2 = getRateItemPriceAfter2021(group_customer2[0].name); \n\t            \n\t            total_prod_group = customer_rate2.price_list_rate * counter_of_customer2;\n\t        }\n\t       // if(frm.doc.custom_customer_group){\n\t            \n\t       // }\n\t        \n\t        \n\t        \n\t        \n\t    }\n\t   \n\t    \n\t    ///////////////////////////////////\n\t   // let total_wakeel_after_2021 = 0;\n\t   // let total_ra2ees_after_2021 = 0;\n\t   // let total_prod_after_2021 = 0;\n\t   // let total_serv_rate_after_2021 = 0;\n\t    \n\t   //\n\t    \n\t   // total_counter = counter_of_serv2 + counter_of_customer2 + counter_of_ra2es2 + counter_of_wakeel2;\n\t    \n\t   //if(rowYearNumber+1 < 2021){\n\t       var wakeel_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');  //1000\n\t       console.log(wakeel_rate_before_2021);\n\t       var ra2ees_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629');  //1000\n\t       console.log(ra2ees_rate_before_2021);\n\t       var customer_group = get_customer_group(frm.doc.custom_volume_of_exports);\n\t       console.log('customer_group');\n\t       console.log(customer_group[0].name);\n\t       \n\t       var prod_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629-2');\n\t       console.log(prod_rate_before_2021);\n\t       //var serv_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t       \n\t        let total_wakeel_before_2021 = wakeel_rate_before_2021.price_list_rate * counter_of_wakeel2;\n\t        \n\t        console.log(total_wakeel_before_2021 );\n\t        \n\t        \n\t        let total_ra2ees_before_2021 = ra2ees_rate_before_2021.price_list_rate * counter_of_ra2es2 ;\n\t        console.log(total_ra2ees_before_2021 );\n\t        \n\t        let total_prod_before_2021 = prod_rate_before_2021.price_list_rate * counter_of_customer2;\n\t        \n\t        console.log(total_prod_before_2021 );\n\t        \n\t        let total_serv_rate_before_2021 = 2000 * counter_of_serv2;\n\t       \n\t       console.log(total_serv_rate_before_2021 );\n\t       \n\t       let total_all_before_2021 = total_wakeel_before_2021 + total_ra2ees_before_2021 + total_serv_rate_before_2021 + total_prod_before_2021;\n\t       \n\t   //}else{\n\t   \n\t   ///////////////////////\n\t       \n\t       var wakeel_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');\n\t       \n\t       console.log(wakeel_rate_after_2021);\n\t       \n\t       var ra2ees_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629');\n\t       \n\t       \n\t       console.log(ra2ees_rate_after_2021);\n\t       //var prod_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629');\n\t       //var serv_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t       \n\t        let total_wakeel_after_2021 = wakeel_rate_after_2021.price_list_rate * counter_of_wakeel2;\n\t        \n\t        console.log(total_wakeel_after_2021);\n\t        \n\t        let total_ra2ees_after_2021 = ra2ees_rate_after_2021.price_list_rate * counter_of_ra2es2 ;\n\t        \n\t        console.log(total_ra2ees_after_2021);\n\t       // let total_prod_after_2021 = prod_rate_after_2021 * counter_of_customer2;\n\t        let total_serv_rate_after_2021 = 2000 * counter_of_serv2;\n\t       \n\t        console.log( total_serv_rate_after_2021);\n\t       \n\t        let total_all_after_2021 = total_wakeel_after_2021 + total_ra2ees_after_2021 + total_serv_rate_after_2021 + total_prod_group;\n\t       \n\t       console.log(total_prod_group);\n\t   //}\n\t    \n\t    \n\t    \n\t    \n\t    \n\t   // var serv_price2 = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t   // console.log('serv2' + serv_price2);\n\t   // var ra2es_price2 = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t   // console.log('ra2ees price' + '' + ra2es_price2);\n    //     var wakeel_price2 = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n    //     console.log('wakeel price' + '' + wakeel_price2);\n        \n        \n    //     let total_ra2es2 = ra2es_price * counter_of_ra2es;\n        \n    //     console.log(total_ra2es);\n        \n    //     let total_wakeel2 = counter_of_wakeel * wakeel_price;\n        \n    //     console.log(total_wakeel);\n        \n    //     let total_serv2 = serv_price * counter_of_serv;\n        \n        \n    //     let total_prod2 = 0;\n    //     if(counter_of_customer2 > 0){\n    //         let price_prod2 = getRateItemPrice(group);\n            \n    //         console.log('pord price' + '' + price_prod2.price_list_rate);\n            \n    //         total_prod2 = price_prod2.price_list_rate * counter_of_customer2;\n    //     }\n        \n        // console.log(total_ra2es2+ total_wakeel2 + total_prod2);\n    \n    let expectedAmount2;\nif (rowYearNumber+1 < 2021) {\n    expectedAmount2 = total_all_before_2021;\n    console.log('expected amount before 2021' + ' '+ expectedAmount2);\n} else if (rowYearNumber+1 == 2021 || rowYearNumber <= 2023) {\n    expectedAmount2 = total_all_after_2021;\n     console.log('expected amount After 2021' + ' '+ expectedAmount2);\n} else {\n    // Handle other cases if needed\n    expectedAmount2 = 0; // Default value or any other handling\n}\n            \n            ///Past Year Calc//////\n            \n            \n                        let nextYear = rowYearNumber + 1;\n            \t        frm.add_child(\"custom_recommendation_invoice\",{\n\t\t                         year:nextYear,\n\t\t                         expected_amount: expectedAmount2,\n\t\t                     })\n\t\t                     frm.refresh_field(\"custom_recommendation_invoice\");\n                        \n                        \n                        \n  \n                        \n                        \n                        \n        }\n        \n        \n        \n    }\t    \n    \n\t    \n\t}\n})\n\n\n\n\n\n\n\n\n\nfunction getRateItemPriceForRa2es(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfunction getRateItemPriceForWakel(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\nfunction getRateItemPrice(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\n\n\n\nfunction get_committees(customer){\n    var temp;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                name: customer,\n            },\n            callback: function(r) {\n                temp = r.message;\n            }\n        });\n        return temp ;\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction getRateafter2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRatebefore2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\nfunction getServPrice(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\n\n\n\n\nfunction get_customer_group(value){\n    var temp = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_customer_group',\n        args: {\n            value: value\n        },\n        callback: function(r) {\n            temp = r.message;\n        }\n    });\n    return temp ;\n}\n\n\n\n\n\nfunction getRateItemPriceBefore2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRateItemPriceAfter2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n// frappe.ui.form.on('Sales Invoice', {\n// \tyear:function(frm) {\n// \t    let history = frm.doc.custom_member_history;\n// \t    let row_year = frm.doc.custom_member_history[0].year;\n// \t    let nextYear = parseInt(row_year);\n// \t if(parseInt(frm.doc.year) == nextYear+1){\n//         console.log(\"now\");\n//         cur_frm.clear_table(\"items\");\n//         var items = [];\n//         frappe.call({\n//             async:false,\n//             method: 'frappe.client.get',\n//             args: {\n//                 doctype: 'Product Bundle',\n//                 filters: { name: custom_product_bundle },\n//                 fieldname: 'items' \n//             },\n//             callback: function(r) {\n//                 items = r.message.items;\n//             }\n//         });\n        \n//         var customer = frm.doc.customer;\n//         var count9 = [];\n//         frappe.call({\n//             async:false,\n//             method: 'frappe.client.get',\n//             args: {\n//                 doctype: 'Customer',\n//                 filters: { name: customer },\n//                 fieldname: 'custom_committees_you_would_like_to_join' \n//             },\n//             callback: function(r) {\n//                 count = r.message.custom_committees_you_would_like_to_join;\n                \n//             }\n//         });\n        \n\n//         let counter_of_wakeel9 = 0;\n//         let counter_of_ra2es9 = 0;\n//         let counter_of_customer9 = 0;\n//         let counter_of_products9 = 0\n//         for ( let i = 0 ; i < count9.length ; i++){\n//             const temp = count9[i];\n//             if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'){\n//                 counter_of_wakeel9 = counter_of_wakeel9+1;\n//             }\n//             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\"){\n//                 counter_of_ra2es9 = counter_of_ra2es9+1;\n//             }\n//              if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n//                 counter_of_products9 = counter_of_products9+1;\n//             }\n//             // if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n//             //     counter_of_customer = counter_of_customer+1;\n//             // }\n//         }\n        \n//             for (let i = 0 ; i < items.length ; i++){\n//             items[i]['qty'] = 0;\n//         }\n            \n\n        \n//         for (let i = 0 ; i < items.length ; i++){\n//              if ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"  || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629\") {\n//                  items[i]['qty'] = counter_of_customer9;\n//             }\n//             if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\"){\n//                  items[i]['qty'] = counter_of_ra2es9;\n//             }\n//             if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n//                 items[i]['qty'] = counter_of_wakeel9;\n//             }\n//             if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n//                 items[i]['qty'] = counter_of_products9;\n//             }\n//         }\n        \n//         const packed_items = frm.doc.packed_items;\n//         var amount_of_wakeel = 0;\n//         var amount_of_ra2es = 0;\n//         var amount_of_customer = 0;\n        \n//         cur_frm.clear_table(\"items\"); \n//         console.log(items);\n//         var customer_group = getCustomerGroup(frm);\n//         var price_rule;\n//         // var ge_rat_item_price = getRateItemPrice(\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" );\n//         var total;\n//         var ge_rate_item_price_for_ra2es = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n//         var ge_rate_item_price_for_wakel = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n//         var prod_item_price = getRateItemPriceForProd (\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" );\n        \n//         if (customer_group === '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0642\u0644 \u0645\u0646 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647'){\n//             // total = ge_rat_item_price;\n//         }else{\n//             // price_rule = getPriceRule(customer_group);\n//             // total = ge_rat_item_price + price_rule;\n//         }\n        \n\n        \n\n        \n        \n\n        \n//         for (let i = 0 ; i < items.length ; i++){\n//         let item = items[i];\n//         //  if (item['qty'] != 0 && ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code']) === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n//         // frm.add_child('items', {\n//         //     'item_name': item['item_code'],\n//         //     'qty': item['qty'],\n//         //     'item_code': item['item_code'],\n//         //     'rate':total,\n//         //     'amount': parseFloat(item['qty']) * total,\n//         //     'uom':item['uom'],\n//         //     'description':item['description'],\n//         //     'income_account': \"4110 - Sales - AEC\",\n\n//         //     });\n//         //  }\n//          if ( item['qty'] != 0 &&  ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\")){\n//         frm.add_child('items', {\n//             'item_name': item['item_code'],\n//             'qty': item['qty'],\n//             'item_code': item['item_code'],\n//             'rate':ge_rate_item_price_for_ra2es,\n//             'amount': parseFloat(item['qty']) * ge_rate_item_price_for_ra2es,\n//             'uom':item['uom'],\n//             'description':item['description'],\n//             'income_account': \"4113 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629 - AEC\",\n\n//             });\n//          }\n//          if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n//         frm.add_child('items', {\n//             'item_name': item['item_code'],\n//             'qty': item['qty'],\n//             'item_code': item['item_code'],\n//             'rate':ge_rate_item_price_for_wakel,\n//             'amount': parseFloat(item['qty']) *ge_rate_item_price_for_wakel,\n//             'uom':item['uom'],\n//             'description':item['description'],\n//             'income_account': \"\u0627\u0634\u062a\u0631\u0627\u0643 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629 - AEC\",\n\n//             });\n//          }\n//          ///New///\n//         if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n//         frm.add_child('items', {\n//             'item_name': item['item_code'],\n//             'qty': item['qty'],\n//             'item_code': item['item_code'],\n//             'rate':prod_item_price,\n//             'amount': parseFloat(item['qty']) * prod_item_price,\n//             'uom':item['uom'],\n//             'description':item['description'],\n//             'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n//             });\n//          }\n//         refresh_field('items');\n//         }\n        \n//     //   var committees = get_committees(frm.doc.customer);\n\n//     //     var committees_you_would_like_to_join = committees.custom_committees_you_would_like_to_join;\n//     //     var log = committees.volume_of_member_exports_for_three_years ; \n\n//     //     cur_frm.clear_table('custom_committees_customer_joined_');\n//     //     cur_frm.clear_table('custom_log');\n\n//     //     for (let z of committees_you_would_like_to_join) {\n//     //         var row = frappe.model.add_child(cur_frm.doc, 'custom_committees_customer_joined_');\n//     //         row.committees = z.committees;\n//     //         row.salutation = z.salutation;\n//     //     }\n        \n//         // for (let m of log) {\n//         //     var f = frappe.model.add_child(cur_frm.doc, 'custom_log');\n//         //     f.season = m.season;\n//         //     f.season_name = m.season_name;\n//         //     f.value = m.value;\n//         //     f.total_amount_in_usd = m.total_amount_in_usd ; \n//         //     f.quantity_in_tons = m.quantity_in_tons ; \n//         // }\n        \n//         // cur_frm.refresh_field('custom_committees_customer_joined_');\n//         // cur_frm.refresh_field('custom_log');\n//         } \t\n\t\t\n\t\t\n\t\t\n\t\t\n// \t}\n// })\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-04-07 12:42:26.453083",
  "module": null,
  "name": "Clac based Recommendation",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tyear:function(frm) {\n\t    let history = frm.doc.custom_member_history;\n\t    let row_year = frm.doc.custom_member_history[0].year;\n\t    let custom_product_bundle = frm.doc.custom_bundle_;\n\t    \n\t    let nextYear = parseInt(row_year);\n\t if(parseInt(frm.doc.year) == nextYear+1){\n        console.log(\"now\");\n        cur_frm.clear_table(\"items\");\n        var items = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Product Bundle',\n                filters: { name: custom_product_bundle },\n                fieldname: 'items' \n            },\n            callback: function(r) {\n                items = r.message.items;\n            }\n        });\n        \n        var customer = frm.doc.customer;\n        var count9 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count9 = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel9 = 0;\n        let counter_of_ra2es9 = 0;\n        let counter_of_customer9 = 0;\n        let counter_of_products9 = 0;\n        let counter_of_serv9 = 0;\n        \n        \n            //     var group_customer = get_customer_group(row.value);\n\t           // var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);/////////\n\t            \n\t           // console.log('customer_rate');\n\t           // console.log(customer_rate.price_list_rate);\n\t           // console.log('True');\n\t           // total_prod_group = customer_rate.price_list_rate * counter_of_customer9;\n            // let logs = frm.doc.custom_log;\n\t    \n\t   // let total_prod_group = 0;\n\t    \n\t   // for(let row of logs){\n\t        \n\t   //     if(rowYearNumber+1 == parseInt(row.season_name.split('-')[0])){\n\t            \n\t   //         var group_customer = get_customer_group(row.value);\n\t   //         var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);\n\t            \n\t   //         console.log('customer_rate');\n\t   //         console.log(customer_rate.price_list_rate);\n\t   //         console.log('True');\n\t   //         total_prod_group = customer_rate.price_list_rate * counter_of_customer2;\n\t   //     }else{\n\t   //         var group_customer2 = get_customer_group(frm.doc.custom_volume_of_exports);\n\t   //         var customer_rate2 = getRateItemPriceAfter2021(group_customer2[0].name); \n\t            \n\t   //         total_prod_group = customer_rate2.price_list_rate * counter_of_customer2;\n\t   //     }\n\t      \n\t        \n\t        \n\t        \n\t   // }\n        \n        \n        \n        \n        \n        let rowYearNumber = parseInt(frm.doc.custom_member_history[0].year);\n        for ( let i = 0 ; i < count9.length ; i++){\n            const temp = count9[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'){\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                \n              if((rowYearNumber+1 >= parseInt(fromYear) && (rowYearNumber+1 <= parseInt(toYear) ) || toYear === 1970)){\n                counter_of_wakeel9 = counter_of_wakeel9+1;\n              \n            }\n            if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n                counter_of_wakeel9 = counter_of_wakeel9 +1;\n            }   \n                \n                \n                // counter_of_wakeel9 = counter_of_wakeel9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\"){\n                \n                   var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n                   if((rowYearNumber+1 >= parseInt(fromYear2) && (rowYearNumber+1 <= parseInt(toYear2)) || toYear2=== 1970)){\n                counter_of_ra2es9 = counter_of_ra2es9+1;\n              \n            }\n            \n             if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n                counter_of_ra2es9 = counter_of_ra2es9 +1;\n            }\n                \n                \n                \n                // counter_of_ra2es9 = counter_of_ra2es9+1;\n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n                 \n                              var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear4) && ( rowYearNumber+1 <= parseInt(toYear4)) || toYear4 === 1970) ){\n                counter_of_serv9 = counter_of_serv9+1;\n              \n            }\n              if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n                counter_of_products9 = counter_of_products9 +1;\n            }\n                 \n                 \n                 \n                 \n                 \n                 \n                 \n                // counter_of_products9 = counter_of_products9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n                counter_of_customer9 = counter_of_customer9+1;\n              \n            }\n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer9 = counter_of_customer9 +1;\n            // }\n            \n                // counter_of_customer = counter_of_customer+1;\n            }\n        }\n        \n            for (let i = 0 ; i < items.length ; i++){\n            items[i]['qty'] = 0;\n        }\n            \n\n        \n        for (let i = 0 ; i < items.length ; i++){\n             if ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"  || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629\") {\n                 items[i]['qty'] = counter_of_customer9;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                 items[i]['qty'] = counter_of_ra2es9;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                items[i]['qty'] = counter_of_wakeel9;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                items[i]['qty'] = counter_of_products9;\n            }\n        }\n        \n        const packed_items = frm.doc.packed_items;\n        var amount_of_wakeel = 0;\n        var amount_of_ra2es = 0;\n        var amount_of_customer = 0;\n        \n        cur_frm.clear_table(\"items\"); \n        console.log(items);\n        var customer_group = getCustomerGroup(frm);\n        var price_rule;\n        // var ge_rat_item_price = getRateItemPrice(\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" );\n        var total;\n        var ge_rate_item_price_for_ra2es =  getRatebefore2021 (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n        var ge_rate_item_price_for_wakel =  getRatebefore2021(\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n        var prod_item_price = getRateItemPriceForProd (\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" );\n        \n        if (customer_group === '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0642\u0644 \u0645\u0646 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647'){\n            // total = ge_rat_item_price;\n        }else{\n            // price_rule = getPriceRule(customer_group);\n            // total = ge_rat_item_price + price_rule;\n        }\n        \n\n        \n     let group = frm.doc.custom_customer_group;\n    //  if(group === null || group === \"\"){\n    //       frappe.throw(\"\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u064a\u062c\u0628 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0645\u0646\u062a\u0645\u064a  \u0644\u0627\u062d\u062f \u0645\u0646 \u0641\u0626\u0627\u062a \u0627\u0644\u0627\u0639\u0636\u0627\u0621 \u0627\u0648\u0644\u0627\");\n    //       frappe.validated = false;\n    //  }else{\n     let price = getRateItemPrice(group);\n    //  console.log(\"price\" + price);\n    //  console.log('count' + count);\n     \n     if(frm.doc.custom_customer_group == price.custom_member_categories){\n        //  var income = getIncome(price.item_name);\n        // let price = getRateItemPrice(group);\n\n        //  console.log(income);\n        //  console.log(price.item_code);\n         console.log(price.price_list_rate);\n         frm.add_child('items', {\n            'item_name': price.item_name,\n            'qty':  counter_of_customer9,\n            'item_code': price.item_code,\n            // 'rate':price.price_list_rate,\n            // 'amount': parseFloat(count) * price.price_list_rate,\n            'uom':'Nos',\n            'description':'test',\n            'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         \n         \n     }\n    //  refresh_field('items');\n\n\n        \n        for (let i = 0 ; i < items.length ; i++){\n        let item = items[i];\n        //  if (item['qty'] != 0 && ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code']) === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n        // frm.add_child('items', {\n        //     'item_name': '\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629-2',\n        //     'qty': counter_of_customer9,\n        //     'item_code': item['item_code'],\n        //     // 'rate':total,\n        //     // 'amount': parseFloat(item['qty']) * total,\n        //     'uom':item['uom'],\n        //     'description':item['description'],\n        //     'income_account': \"4110 - Sales - AEC\",\n\n        //     });\n        //  }\n         if ( item['qty'] != 0 &&  ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            // 'rate':ge_rate_item_price_for_ra2es,\n            // 'amount': parseFloat(item['qty']) * ge_rate_item_price_for_ra2es,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"4113 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n         if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            // 'rate':ge_rate_item_price_for_wakel,\n            // 'amount': parseFloat(item['qty']) *ge_rate_item_price_for_wakel,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"\u0627\u0634\u062a\u0631\u0627\u0643 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n         ///New///\n        if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            // 'rate':prod_item_price,\n            // 'amount': parseFloat(item['qty']) * prod_item_price,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n        refresh_field('items');\n        }\n        \n\n        } \t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n})\n\n\n\n\n\n\n\n\n\nfunction getRateItemPriceForRa2es(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfunction getRateItemPriceForWakel(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\nfunction getRateItemPrice(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\n\n\n\nfunction get_committees(customer){\n    var temp;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                name: customer,\n            },\n            callback: function(r) {\n                temp = r.message;\n            }\n        });\n        return temp ;\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction getRateafter2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRatebefore2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\nfunction getServPrice(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\n\n\n\n\nfunction get_customer_group(value){\n    var temp = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_customer_group',\n        args: {\n            value: value\n        },\n        callback: function(r) {\n            temp = r.message;\n        }\n    });\n    return temp ;\n}\n\n\n\n\n\nfunction getRateItemPriceBefore2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRateItemPriceAfter2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-04-07 19:53:39.067329",
  "module": null,
  "name": "Get Recommendations 3",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tcustom_get_recommendation:function(frm){\n\t    \n\t    \n\t    let invoices = frm.doc.custom_recommendation_invoice;\n\t    let history = frm.doc.custom_member_history;\n\t    var currentDate = new Date();\n\n\n        var currentYear = currentDate.getFullYear();\n\t    \n\t    \n\t    var committees = get_committees(frm.doc.customer);\n\t    var committees_you_would_like_to_join = committees.custom_committees_you_would_like_to_join;\n\t    let group = frm.doc.custom_customer_group;\n\t   // let price_prod = getRateItemPrice(group);\n\t    \n\t    \n\t    ////get customer data//////////\n\t    \n\t    \n\t    \n\t    var customer = frm.doc.customer;\n        var count = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel = 0;\n        let counter_of_ra2es = 0;\n        let counter_of_customer = 0;\n        let counter_of_serv = 0;\n        for ( let i = 0 ; i < count.length ; i++){\n            const temp = count[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended'] !== 1  ){\n                counter_of_wakeel = counter_of_wakeel+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] !==1 ){\n                counter_of_ra2es = counter_of_ra2es+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && temp['ended'] !== 1){\n                counter_of_customer = counter_of_customer+1;\n               \n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] !== 1){\n                counter_of_serv = counter_of_serv+1;\n               \n            }\n        }\n        \n\t     console.log(\"Prod\" + counter_of_customer);\n\t     console.log(\"Ra2es\" + counter_of_ra2es);\n         console.log(\"wakeel\" + counter_of_wakeel);\n         console.log(\"serv\" + counter_of_serv);\n\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    var serv_price = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t    console.log('serv' + '' + serv_price);\n\t    var ra2es_price = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t    console.log('ra2ees price' + '' + ra2es_price);\n        var wakeel_price = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n        console.log('wakeel price' + '' + wakeel_price);\n        \n        \n        let total_ra2es = ra2es_price * counter_of_ra2es;\n        console.log(total_ra2es);\n        let total_wakeel = counter_of_wakeel * wakeel_price;\n        console.log(total_wakeel);\n        \n        let total_serv = serv_price * counter_of_serv;\n        \n        let total_prod = 0;\n        if(counter_of_customer > 0){\n            let price_prod = getRateItemPrice(group);\n            \n            console.log('pord price' + '' + price_prod.price_list_rate);\n            total_prod = price_prod.price_list_rate * counter_of_customer;\n        }\n        \n        console.log(total_ra2es + total_wakeel + total_prod + total_serv);\n        \n        \n        \n    ////////////////////////////////////////////////////////DONE////////////////////////////////////////////////////////////   \n        \n\t   // let price_prod = getRateItemPrice(group);\n\t    //add current year\n\t        frm.add_child(\"custom_recommendation_invoice\",{\n\t\t                         year:currentYear.toString(),\n\t\t                         expected_amount: parseFloat(total_ra2es + total_wakeel + total_prod + total_serv),\n\t\t                     })\n\t\t                     frm.refresh_field(\"custom_recommendation_invoice\");\n\t    \n    \n    ///////////////////////////////////////////////////////////////////DONE///////////////////////////////////////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ///////Past Years//////////////////////\n    \n    \t    \n\t   // var customer2 = frm.doc.customer;\n    //     var count2 = [];\n    //     frappe.call({\n    //         async:false,\n    //         method: 'frappe.client.get',\n    //         args: {\n    //             doctype: 'Customer',\n    //             filters: { name: customer },\n    //             fieldname: 'custom_committees_you_would_like_to_join' \n    //         },\n    //         callback: function(r) {\n    //             count2 = r.message.custom_committees_you_would_like_to_join;\n                \n    //         }\n    //     });\n        \n\n    //     let counter_of_wakeel2 = 0;\n    //     let counter_of_ra2es2 = 0;\n    //     let counter_of_customer2 = 0;\n    //     let counter_of_serv2 = 0;\n        \n    //     for ( let i = 0 ; i < count2.length ; i++){\n    //         const temp = count2[i];\n    //         if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended'] !== 1  ){\n    //             counter_of_wakeel2 = counter_of_wakeel2+1;\n    //         }\n    //         if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] !==1 ){\n    //             counter_of_ra2es2 = counter_of_ra2es2+1;\n    //         }\n    //         if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && temp['ended'] !== 1){\n    //             counter_of_customer2 = counter_of_customer2+1;\n               \n    //         }\n    //          if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] !== 1){\n    //             counter_of_serv2 = counter_of_serv2+1;\n               \n    //         }\n    //     }\n        \n\t   //  console.log(\"Prod\" + counter_of_customer2);\n\t   //  console.log(\"Ra2es\" + counter_of_ra2es2);\n    //      console.log(\"wakeel\" + counter_of_wakeel2);\n\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    \n\t   // var serv_price2 = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t   // console.log('serv2' + serv_price2);\n\t   // var ra2es_price2 = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t   // console.log('ra2ees price' + '' + ra2es_price2);\n    //     var wakeel_price2 = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n    //     console.log('wakeel price' + '' + wakeel_price2);\n        \n        \n    //     let total_ra2es2 = ra2es_price * counter_of_ra2es;\n        \n    //     console.log(total_ra2es);\n        \n    //     let total_wakeel2 = counter_of_wakeel * wakeel_price;\n        \n    //     console.log(total_wakeel);\n        \n    //     let total_serv2 = serv_price * counter_of_serv;\n        \n        \n    //     let total_prod2 = 0;\n    //     if(counter_of_customer2 > 0){\n    //         let price_prod2 = getRateItemPrice(group);\n            \n    //         console.log('pord price' + '' + price_prod2.price_list_rate);\n            \n    //         total_prod2 = price_prod2.price_list_rate * counter_of_customer2;\n    //     }\n        \n    //     console.log(total_ra2es2+ total_wakeel2 + total_prod2);\n    \n    \n    ///Past Year///////////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    for(let row of history){\n        let rowYearNumber = parseInt(row.year);\n        \n        if(rowYearNumber < currentYear && rowYearNumber+1 !== currentYear){\n            \n            ///past Year Calc////\n            \n        var customer2 = frm.doc.customer;\n        var count2 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count2 = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel2 = 0;\n        let counter_of_ra2es2 = 0;\n        let counter_of_customer2 = 0;\n        let counter_of_serv2 = 0;\n        \n        for ( let i = 0 ; i < count2.length ; i++){\n            const temp = count2[i];\n            console.log('Length'+''+ count2.length);\n            console.log(temp['salutation']);\n            if (temp['salutation'].includes('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629') ) {\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                 if(toYear == 1970){\n                     toYear=== null;\n                     console.log(toYear);\n                 }\n            \n            if((rowYearNumber+1 >= parseInt(fromYear) && (rowYearNumber+1 <= parseInt(toYear) ) || toYear === 1970)){\n                counter_of_wakeel2 = counter_of_wakeel2+1;\n              \n            }\n            if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n                counter_of_wakeel2 = counter_of_wakeel2 +1;\n            }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_wakeel2 = counter_of_wakeel2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here1');\n            // }\n                \n                // && temp['ended'] ==1 ) || (temp['to']=== null || temp['ended'] ===0))\n                \n            }\n            else\n            {\n                console.log(\"in else \");\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" ) {\n                \n                  var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear2) && (rowYearNumber+1 <= parseInt(toYear2)) || toYear2=== 1970)){\n                counter_of_ra2es2 = counter_of_ra2es2+1;\n              \n            }\n            \n             if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n                counter_of_ra2es2 = counter_of_ra2es2 +1;\n            }\n            //   if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_ra2es2 = counter_of_ra2es2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here2');\n            // }\n                \n                \n                \n                \n                \n            }\n            if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" ){\n                \n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n                counter_of_customer2 = counter_of_customer2+1;\n              \n            }\n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer2 = counter_of_customer2 +1;\n            // }\n            \n            // if (((rowYearNumber + 1 >= parseInt(fromYear3) && rowYearNumber + 1 <= parseInt(toYear3)) || toYear3 === 1970) && rowYearNumber + 1 <= parseInt(toYear3)) {\n            //          counter_of_customer2 = counter_of_customer2 + 1;\n            // }\n\n            \n            \n            \n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear3) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear3)))) {\n            //     counter_of_customer2 = counter_of_customer2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here3');\n            // }\n                \n                \n                \n                \n                \n                \n               \n            }\n             if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear4) && ( rowYearNumber+1 <= parseInt(toYear4)) || toYear4 === 1970) ){\n                counter_of_serv2 = counter_of_serv2+1;\n              \n            }\n              if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n                counter_of_serv2 = counter_of_serv2 +1;\n            }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear4) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear4)))) {\n            //     counter_of_serv2 = counter_of_serv2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here4');\n            // }\n                 \n                 \n                 \n                 \n                 \n                 \n                \n               \n            }\n        }\n        \n\t     console.log(\"Prod2\" + counter_of_customer2);\n\t     console.log(\"Ra2es2\" + counter_of_ra2es2);\n         console.log(\"wakeel2\" + counter_of_wakeel2);\n         console.log(\"serv2\" + counter_of_serv2);\n\n\t    \n\t     var rate = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');\n\t     \n\t     var total_new_wakeel = rate.price_list_rate * counter_of_wakeel2;\n\t    \n\t    \n\t    /////check price list for rate////////\n\t    \n\t   // let total_wakeel_before_2021 = 0;\n\t   // let total_ra2ees_before_2021 = 0;\n\t   // let total_prod_beore_2021 = 0;\n\t   // let total_serv_rate_before_2021 = 0;\n\t    \n\t    \n\t    \n\t    let logs = frm.doc.custom_log;\n\t    \n\t    let total_prod_group = 0;\n\t    \n\t    for(row of logs){\n\t        var history_results2 = getHistoryCount(frm.doc.customer,rowYearNumber);\n\t        if(rowYearNumber+1 == parseInt(row.season_name.split('-')[0])){\n\t            \n\t            var group_customer = get_customer_group(row.value);\n\t            var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);\n\t            \n\t            console.log('customer_rate');\n\t            console.log(customer_rate.price_list_rate);\n\t            console.log('True');\n\t            total_prod_group = customer_rate.price_list_rate * history_results2.prod;\n\t        }else{\n\t            var group_customer2 = get_customer_group(frm.doc.custom_volume_of_exports);\n\t            var customer_rate2 = getRateItemPriceAfter2021(group_customer2[0].name); \n\t            \n\t            total_prod_group = customer_rate2.price_list_rate * history_results2.prod;\n\t        }\n\t       // if(frm.doc.custom_customer_group){\n\t            \n\t       // }\n\t        \n\t        \n\t        \n\t        \n\t    }\n\t   \n\n\n\n\n\n        var history_results = getHistoryCount(frm.doc.customer,rowYearNumber);\n\n\n\n\n\n\t    \n\t   // total_counter = counter_of_serv2 + counter_of_customer2 + counter_of_ra2es2 + counter_of_wakeel2;\n\t    \n\t   //if(rowYearNumber+1 < 2021){\n\t       var wakeel_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');  //1000\n\t       console.log(wakeel_rate_before_2021);\n\t       var ra2ees_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629');  //1000\n\t       console.log(ra2ees_rate_before_2021);\n\t       var customer_group = get_customer_group(frm.doc.custom_volume_of_exports);\n\t       console.log('customer_group');\n\t       console.log(customer_group[0].name);\n\t       \n\t       var prod_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629-2');\n\t       console.log(prod_rate_before_2021);\n\t       //var serv_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t       \n\t        let total_wakeel_before_2021 = wakeel_rate_before_2021.price_list_rate * history_results.wakeel;\n\t        \n\t        console.log(total_wakeel_before_2021 );\n\t        \n\t        \n\t        let total_ra2ees_before_2021 = ra2ees_rate_before_2021.price_list_rate * history_results.ra2ees ;\n\t        console.log(total_ra2ees_before_2021 );\n\t        \n\t        let total_prod_before_2021 = prod_rate_before_2021.price_list_rate * history_results.prod;\n\t        \n\t        console.log(total_prod_before_2021 );\n\t        \n\t        let total_serv_rate_before_2021 = 2000 * history_results.serv;\n\t       \n\t       console.log(total_serv_rate_before_2021 );\n\t       \n\t       let total_all_before_2021 = total_wakeel_before_2021 + total_ra2ees_before_2021 + total_serv_rate_before_2021 + total_prod_before_2021;\n\t       \n\t   //}else{\n\t   \n\t   ///////////////////////\n\t       \n\t       var wakeel_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');\n\t       \n\t       console.log(wakeel_rate_after_2021);\n\t       \n\t       var ra2ees_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629');\n\t       \n\t       \n\t       console.log(ra2ees_rate_after_2021);\n\t       //var prod_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629');\n\t       //var serv_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t       \n\t        let total_wakeel_after_2021 = wakeel_rate_after_2021.price_list_rate * history_results.wakeel;\n\t        \n\t        console.log(total_wakeel_after_2021);\n\t        \n\t        let total_ra2ees_after_2021 = ra2ees_rate_after_2021.price_list_rate * history_results.ra2ees ;\n\t        \n\t        console.log(total_ra2ees_after_2021);\n\t       // let total_prod_after_2021 = prod_rate_after_2021 * counter_of_customer2;\n\t        let total_serv_rate_after_2021 = 2000 * history_results.serv;\n\t       \n\t        console.log( total_serv_rate_after_2021);\n\t       \n\t        let total_all_after_2021 = total_wakeel_after_2021 + total_ra2ees_after_2021 + total_serv_rate_after_2021 + total_prod_group;\n\t       \n\t       console.log(total_prod_group);\n\t   //}\n\t    \n\t    \n\t    \n\t    \n\t    \n\t   // var serv_price2 = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t   // console.log('serv2' + serv_price2);\n\t   // var ra2es_price2 = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t   // console.log('ra2ees price' + '' + ra2es_price2);\n    //     var wakeel_price2 = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n    //     console.log('wakeel price' + '' + wakeel_price2);\n        \n        \n    //     let total_ra2es2 = ra2es_price * counter_of_ra2es;\n        \n    //     console.log(total_ra2es);\n        \n    //     let total_wakeel2 = counter_of_wakeel * wakeel_price;\n        \n    //     console.log(total_wakeel);\n        \n    //     let total_serv2 = serv_price * counter_of_serv;\n        \n        \n    //     let total_prod2 = 0;\n    //     if(counter_of_customer2 > 0){\n    //         let price_prod2 = getRateItemPrice(group);\n            \n    //         console.log('pord price' + '' + price_prod2.price_list_rate);\n            \n    //         total_prod2 = price_prod2.price_list_rate * counter_of_customer2;\n    //     }\n        \n        // console.log(total_ra2es2+ total_wakeel2 + total_prod2);\n        \n        \n        var history_com = getHistoryCount(frm.doc.customer,rowYearNumber);\n        console.log(\"History Count\" + history_com);\n        console.log(history_com);\n        \n        \n        \n        \n        \n    \n    let expectedAmount2;\nif (rowYearNumber+1 < 2021) {\n    expectedAmount2 = total_all_before_2021;\n    console.log('expected amount before 2021' + ' '+ expectedAmount2);\n} else if (rowYearNumber+1 == 2021 || rowYearNumber <= 2023) {\n    expectedAmount2 = total_all_after_2021;\n     console.log('expected amount After 2021' + ' '+ expectedAmount2);\n} else {\n    // Handle other cases if needed\n    expectedAmount2 = 0; // Default value or any other handling\n}\n            \n            ///Past Year Calc//////\n            \n            \n                        let nextYear = rowYearNumber + 1;\n            \t        frm.add_child(\"custom_recommendation_invoice\",{\n\t\t                         year:nextYear,\n\t\t                         expected_amount: expectedAmount2,\n\t\t                     })\n\t\t                     frm.refresh_field(\"custom_recommendation_invoice\");\n                        \n                        \n                        \n  \n                        \n                        \n                        \n        }\n        \n        \n        \n    }\t    \n    \n\t    \n\t}\n})\n\n\n\n\n\n\n\n\n\nfunction getRateItemPriceForRa2es(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfunction getRateItemPriceForWakel(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\nfunction getRateItemPrice(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\n\n\n\nfunction get_committees(customer){\n    var temp;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                name: customer,\n            },\n            callback: function(r) {\n                temp = r.message;\n            }\n        });\n        return temp ;\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction getRateafter2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRatebefore2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\nfunction getServPrice(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\n\n\n\n\nfunction get_customer_group(value){\n    var temp = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_customer_group',\n        args: {\n            value: value\n        },\n        callback: function(r) {\n            temp = r.message;\n        }\n    });\n    return temp ;\n}\n\n\n\n\n\nfunction getRateItemPriceBefore2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRateItemPriceAfter2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n// frappe.ui.form.on('Sales Invoice', {\n// \tyear:function(frm) {\n// \t    let history = frm.doc.custom_member_history;\n// \t    let row_year = frm.doc.custom_member_history[0].year;\n// \t    let nextYear = parseInt(row_year);\n// \t if(parseInt(frm.doc.year) == nextYear+1){\n//         console.log(\"now\");\n//         cur_frm.clear_table(\"items\");\n//         var items = [];\n//         frappe.call({\n//             async:false,\n//             method: 'frappe.client.get',\n//             args: {\n//                 doctype: 'Product Bundle',\n//                 filters: { name: custom_product_bundle },\n//                 fieldname: 'items' \n//             },\n//             callback: function(r) {\n//                 items = r.message.items;\n//             }\n//         });\n        \n//         var customer = frm.doc.customer;\n//         var count9 = [];\n//         frappe.call({\n//             async:false,\n//             method: 'frappe.client.get',\n//             args: {\n//                 doctype: 'Customer',\n//                 filters: { name: customer },\n//                 fieldname: 'custom_committees_you_would_like_to_join' \n//             },\n//             callback: function(r) {\n//                 count = r.message.custom_committees_you_would_like_to_join;\n                \n//             }\n//         });\n        \n\n//         let counter_of_wakeel9 = 0;\n//         let counter_of_ra2es9 = 0;\n//         let counter_of_customer9 = 0;\n//         let counter_of_products9 = 0\n//         for ( let i = 0 ; i < count9.length ; i++){\n//             const temp = count9[i];\n//             if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'){\n//                 counter_of_wakeel9 = counter_of_wakeel9+1;\n//             }\n//             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\"){\n//                 counter_of_ra2es9 = counter_of_ra2es9+1;\n//             }\n//              if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n//                 counter_of_products9 = counter_of_products9+1;\n//             }\n//             // if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n//             //     counter_of_customer = counter_of_customer+1;\n//             // }\n//         }\n        \n//             for (let i = 0 ; i < items.length ; i++){\n//             items[i]['qty'] = 0;\n//         }\n            \n\n        \n//         for (let i = 0 ; i < items.length ; i++){\n//              if ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"  || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629\") {\n//                  items[i]['qty'] = counter_of_customer9;\n//             }\n//             if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\"){\n//                  items[i]['qty'] = counter_of_ra2es9;\n//             }\n//             if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n//                 items[i]['qty'] = counter_of_wakeel9;\n//             }\n//             if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n//                 items[i]['qty'] = counter_of_products9;\n//             }\n//         }\n        \n//         const packed_items = frm.doc.packed_items;\n//         var amount_of_wakeel = 0;\n//         var amount_of_ra2es = 0;\n//         var amount_of_customer = 0;\n        \n//         cur_frm.clear_table(\"items\"); \n//         console.log(items);\n//         var customer_group = getCustomerGroup(frm);\n//         var price_rule;\n//         // var ge_rat_item_price = getRateItemPrice(\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" );\n//         var total;\n//         var ge_rate_item_price_for_ra2es = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n//         var ge_rate_item_price_for_wakel = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n//         var prod_item_price = getRateItemPriceForProd (\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" );\n        \n//         if (customer_group === '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0642\u0644 \u0645\u0646 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647'){\n//             // total = ge_rat_item_price;\n//         }else{\n//             // price_rule = getPriceRule(customer_group);\n//             // total = ge_rat_item_price + price_rule;\n//         }\n        \n\n        \n\n        \n        \n\n        \n//         for (let i = 0 ; i < items.length ; i++){\n//         let item = items[i];\n//         //  if (item['qty'] != 0 && ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code']) === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n//         // frm.add_child('items', {\n//         //     'item_name': item['item_code'],\n//         //     'qty': item['qty'],\n//         //     'item_code': item['item_code'],\n//         //     'rate':total,\n//         //     'amount': parseFloat(item['qty']) * total,\n//         //     'uom':item['uom'],\n//         //     'description':item['description'],\n//         //     'income_account': \"4110 - Sales - AEC\",\n\n//         //     });\n//         //  }\n//          if ( item['qty'] != 0 &&  ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\")){\n//         frm.add_child('items', {\n//             'item_name': item['item_code'],\n//             'qty': item['qty'],\n//             'item_code': item['item_code'],\n//             'rate':ge_rate_item_price_for_ra2es,\n//             'amount': parseFloat(item['qty']) * ge_rate_item_price_for_ra2es,\n//             'uom':item['uom'],\n//             'description':item['description'],\n//             'income_account': \"4113 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629 - AEC\",\n\n//             });\n//          }\n//          if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n//         frm.add_child('items', {\n//             'item_name': item['item_code'],\n//             'qty': item['qty'],\n//             'item_code': item['item_code'],\n//             'rate':ge_rate_item_price_for_wakel,\n//             'amount': parseFloat(item['qty']) *ge_rate_item_price_for_wakel,\n//             'uom':item['uom'],\n//             'description':item['description'],\n//             'income_account': \"\u0627\u0634\u062a\u0631\u0627\u0643 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629 - AEC\",\n\n//             });\n//          }\n//          ///New///\n//         if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n//         frm.add_child('items', {\n//             'item_name': item['item_code'],\n//             'qty': item['qty'],\n//             'item_code': item['item_code'],\n//             'rate':prod_item_price,\n//             'amount': parseFloat(item['qty']) * prod_item_price,\n//             'uom':item['uom'],\n//             'description':item['description'],\n//             'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n//             });\n//          }\n//         refresh_field('items');\n//         }\n        \n//     //   var committees = get_committees(frm.doc.customer);\n\n//     //     var committees_you_would_like_to_join = committees.custom_committees_you_would_like_to_join;\n//     //     var log = committees.volume_of_member_exports_for_three_years ; \n\n//     //     cur_frm.clear_table('custom_committees_customer_joined_');\n//     //     cur_frm.clear_table('custom_log');\n\n//     //     for (let z of committees_you_would_like_to_join) {\n//     //         var row = frappe.model.add_child(cur_frm.doc, 'custom_committees_customer_joined_');\n//     //         row.committees = z.committees;\n//     //         row.salutation = z.salutation;\n//     //     }\n        \n//         // for (let m of log) {\n//         //     var f = frappe.model.add_child(cur_frm.doc, 'custom_log');\n//         //     f.season = m.season;\n//         //     f.season_name = m.season_name;\n//         //     f.value = m.value;\n//         //     f.total_amount_in_usd = m.total_amount_in_usd ; \n//         //     f.quantity_in_tons = m.quantity_in_tons ; \n//         // }\n        \n//         // cur_frm.refresh_field('custom_committees_customer_joined_');\n//         // cur_frm.refresh_field('custom_log');\n//         } \t\n\t\t\n\t\t\n\t\t\n\t\t\n// \t}\n// })\n\n\n\n\n\nfunction getHistoryCount(customer,rowYearNumber){\n    var count2 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committee_member_history' \n            },\n            callback: function(r) {\n                count2 = r.message.custom_committee_member_history;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel2 = 0;\n        let counter_of_ra2es2 = 0;\n        let counter_of_customer2 = 0;\n        let counter_of_serv2 = 0;\n        \n        for ( let i = 0 ; i < count2.length ; i++){\n            const temp = count2[i];\n            // console.log('Length'+''+ count2.length);\n            // console.log(temp['salutation']);\n            if (temp['salutation'] === ('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629') ) {\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                 if(toYear == 1970){\n                     toYear=== null;\n                     console.log(toYear);\n                 }\n                 \n                //   counter_of_wakeel2 = counter_of_wakeel2+1;\n                 \n            // if( rowYearNumber+1 <= parseInt(fromYear)){\n            //     console.log(\"Calc Done\");\n            //     counter_of_wakeel2 = counter_of_wakeel2+1;\n              \n            // }     \n                 \n                 \n            \n            if(parseInt(fromYear) <=  rowYearNumber+1  && parseInt(toYear) >= rowYearNumber+1 ){\n                counter_of_wakeel2 = counter_of_wakeel2+1;\n              \n            }\n            // if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n            //     counter_of_wakeel2 = counter_of_wakeel2 +1;\n            // }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_wakeel2 = counter_of_wakeel2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here1');\n            // }\n                \n                // && temp['ended'] ==1 ) || (temp['to']=== null || temp['ended'] ===0))\n                \n            }\n            else\n            {\n                console.log(\"in else \");\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" ) {\n                \n                  var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n            \n            \n            \n            if(parseInt(fromYear2) <=  rowYearNumber+1 && parseInt(toYear2) >= rowYearNumber+1){\n                counter_of_ra2es2 = counter_of_ra2es2+1;\n              \n            } \n            \n                \n            // if(rowYearNumber+1 <= parseInt(fromYear2) && rowYearNumber+1 >= parseInt(toYear2)){\n            //     counter_of_ra2es2 = counter_of_ra2es2+1;\n              \n            // }\n            \n            //  if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n            //     counter_of_ra2es2 = counter_of_ra2es2 +1;\n            // }\n            //   if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_ra2es2 = counter_of_ra2es2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here2');\n            // }\n                \n                \n                \n                \n                \n            }\n            if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" ){\n                \n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n             \n             \n             \n             if(parseInt(fromYear3) <= rowYearNumber+1  && parseInt(toYear3) >= rowYearNumber+1 ){\n                counter_of_customer2 = counter_of_customer2+1;\n              \n            } \n             \n             \n                \n            // if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n            //     counter_of_customer2 = counter_of_customer2+1;\n              \n            // }\n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer2 = counter_of_customer2 +1;\n            // }\n            \n            // if (((rowYearNumber + 1 >= parseInt(fromYear3) && rowYearNumber + 1 <= parseInt(toYear3)) || toYear3 === 1970) && rowYearNumber + 1 <= parseInt(toYear3)) {\n            //          counter_of_customer2 = counter_of_customer2 + 1;\n            // }\n\n            \n            \n            \n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear3) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear3)))) {\n            //     counter_of_customer2 = counter_of_customer2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here3');\n            // }\n                \n                \n                \n                \n                \n                \n               \n            }\n             if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n                \n                  \n                \n            if( parseInt(fromYear4) <= rowYearNumber+1 && parseInt(toYear4) >= rowYearNumber+1  ){\n                counter_of_serv2 = counter_of_serv2+1;\n              \n            }\n            //   if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n            //     counter_of_serv2 = counter_of_serv2 +1;\n            // }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear4) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear4)))) {\n            //     counter_of_serv2 = counter_of_serv2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here4');\n            // }\n                 \n                 \n                 \n                 \n                 \n                 \n                \n               \n            }\n        }\n        \n    \n    var result = {\n        'wakeel': counter_of_wakeel2,\n        'ra2ees': counter_of_ra2es2,\n        'prod': counter_of_customer2,\n        'serv':counter_of_serv2\n    }\n    \n    \n    return result;\n    \n    \n    \n    \n}\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-04-07 19:53:59.631988",
  "module": null,
  "name": "Clac based Recommendation 3",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tyear:function(frm) {\n\t    let history = frm.doc.custom_member_history;\n\t    let row_year = frm.doc.custom_member_history[0].year;\n\t    let custom_product_bundle = frm.doc.custom_bundle_;\n\t    \n\t    let nextYear = parseInt(row_year);\n\t if(parseInt(frm.doc.year) == nextYear+1){\n        console.log(\"now\");\n        cur_frm.clear_table(\"items\");\n        var items = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Product Bundle',\n                filters: { name: custom_product_bundle },\n                fieldname: 'items' \n            },\n            callback: function(r) {\n                items = r.message.items;\n            }\n        });\n        \n        var customer = frm.doc.customer;\n        var count9 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committee_member_history' \n            },\n            callback: function(r) {\n                count9 = r.message.custom_committee_member_history;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel9 = 0;\n        let counter_of_ra2es9 = 0;\n        let counter_of_customer9 = 0;\n        let counter_of_products9 = 0;\n        let counter_of_serv9 = 0;\n        \n        \n            //     var group_customer = get_customer_group(row.value);\n\t           // var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);/////////\n\t            \n\t           // console.log('customer_rate');\n\t           // console.log(customer_rate.price_list_rate);\n\t           // console.log('True');\n\t           // total_prod_group = customer_rate.price_list_rate * counter_of_customer9;\n            // let logs = frm.doc.custom_log;\n\t    \n\t   // let total_prod_group = 0;\n\t    \n\t   // for(let row of logs){\n\t        \n\t   //     if(rowYearNumber+1 == parseInt(row.season_name.split('-')[0])){\n\t            \n\t   //         var group_customer = get_customer_group(row.value);\n\t   //         var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);\n\t            \n\t   //         console.log('customer_rate');\n\t   //         console.log(customer_rate.price_list_rate);\n\t   //         console.log('True');\n\t   //         total_prod_group = customer_rate.price_list_rate * counter_of_customer2;\n\t   //     }else{\n\t   //         var group_customer2 = get_customer_group(frm.doc.custom_volume_of_exports);\n\t   //         var customer_rate2 = getRateItemPriceAfter2021(group_customer2[0].name); \n\t            \n\t   //         total_prod_group = customer_rate2.price_list_rate * counter_of_customer2;\n\t   //     }\n\t      \n\t        \n\t        \n\t        \n\t   // }\n        \n        \n        \n        \n        \n        let rowYearNumber = parseInt(frm.doc.custom_member_history[0].year);\n        for ( let i = 0 ; i < count9.length ; i++){\n            const temp = count9[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'){\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                \n            //   if((rowYearNumber+1 >= parseInt(fromYear) && (rowYearNumber+1 <= parseInt(toYear) ) || toYear === 1970)){\n            //     counter_of_wakeel9 = counter_of_wakeel9+1;\n              \n            // }\n            // if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n            //     counter_of_wakeel9 = counter_of_wakeel9 +1;\n            // }   \n                if(parseInt(fromYear) <=  rowYearNumber+1  && parseInt(toYear) >= rowYearNumber+1 ){\n                counter_of_wakeel9 = counter_of_wakeel9+1;\n              \n            }  \n                \n                // counter_of_wakeel9 = counter_of_wakeel9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\"){\n                \n                   var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n            //       if((rowYearNumber+1 >= parseInt(fromYear2) && (rowYearNumber+1 <= parseInt(toYear2)) || toYear2=== 1970)){\n            //     counter_of_ra2es9 = counter_of_ra2es9+1;\n              \n            // }\n            \n            //  if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n            //     counter_of_ra2es9 = counter_of_ra2es9 +1;\n            // }\n            \n            if(parseInt(fromYear2) <=  rowYearNumber+1 && parseInt(toYear2) >= rowYearNumber+1){\n                counter_of_ra2es9 = counter_of_ra2es9+1;\n              \n            }     \n               \n                \n                // counter_of_ra2es9 = counter_of_ra2es9+1;\n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear4) && ( rowYearNumber+1 <= parseInt(toYear4)) || toYear4 === 1970) ){\n            //     counter_of_serv9 = counter_of_serv9+1;\n              \n            // }\n            //   if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n            //     counter_of_products9 = counter_of_products9 +1;\n            // }\n                 \n            if( parseInt(fromYear4) <= rowYearNumber+1 && parseInt(toYear4) >= rowYearNumber+1  ){\n                counter_of_serv9 = counter_of_serv9+1;\n              \n            }   \n                 \n                 \n                 \n                 \n                 \n                // counter_of_products9 = counter_of_products9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n            //     counter_of_customer9 = counter_of_customer9+1;\n              \n            // }\n               if(parseInt(fromYear3) <= rowYearNumber+1  && parseInt(toYear3) >= rowYearNumber+1 ){\n                counter_of_customer9 = counter_of_customer9+1;\n              \n            } \n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer9 = counter_of_customer9 +1;\n            // }\n            \n                // counter_of_customer = counter_of_customer+1;\n            }\n        }\n        \n            for (let i = 0 ; i < items.length ; i++){\n            items[i]['qty'] = 0;\n        }\n            \n\n        \n        for (let i = 0 ; i < items.length ; i++){\n             if ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"  || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629\") {\n                 items[i]['qty'] = counter_of_customer9;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                 items[i]['qty'] = counter_of_ra2es9;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                items[i]['qty'] = counter_of_wakeel9;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n                items[i]['qty'] = counter_of_serv9;\n            }\n        }\n        \n        const packed_items = frm.doc.packed_items;\n        var amount_of_wakeel = 0;\n        var amount_of_ra2es = 0;\n        var amount_of_customer = 0;\n        \n        cur_frm.clear_table(\"items\"); \n        console.log(items);\n        var customer_group = getCustomerGroup(frm);\n        var price_rule;\n        // var ge_rat_item_price = getRateItemPrice(\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" );\n        var total;\n        var ge_rate_item_price_for_ra2es =  getRatebefore2021 (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n        var ge_rate_item_price_for_wakel =  getRatebefore2021(\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n        var prod_item_price = getRateItemPriceForProd (\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" );\n        \n        if (customer_group === '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0642\u0644 \u0645\u0646 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647'){\n            // total = ge_rat_item_price;\n        }else{\n            // price_rule = getPriceRule(customer_group);\n            // total = ge_rat_item_price + price_rule;\n        }\n        \n\n        \n     let group = frm.doc.custom_customer_group;\n    //  if(group === null || group === \"\"){\n    //       frappe.throw(\"\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u064a\u062c\u0628 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0645\u0646\u062a\u0645\u064a  \u0644\u0627\u062d\u062f \u0645\u0646 \u0641\u0626\u0627\u062a \u0627\u0644\u0627\u0639\u0636\u0627\u0621 \u0627\u0648\u0644\u0627\");\n    //       frappe.validated = false;\n    //  }else{\n     let price = getRateItemPrice(group);\n    //  console.log(\"price\" + price);\n    //  console.log('count' + count);\n     \n     if(frm.doc.custom_customer_group == price.custom_member_categories){\n        //  var income = getIncome(price.item_name);\n        // let price = getRateItemPrice(group);\n\n        //  console.log(income);\n        //  console.log(price.item_code);\n         console.log(price.price_list_rate);\n         frm.add_child('items', {\n            'item_name': price.item_name,\n            'qty':  counter_of_customer9,\n            'item_code': price.item_code,\n            // 'rate':price.price_list_rate,\n            // 'amount': parseFloat(count) * price.price_list_rate,\n            'uom':'Nos',\n            'description':'test',\n            'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         \n         \n     }\n    //  refresh_field('items');\n\n        console.log(\"counter_of_serv9\"  + \"\" + counter_of_serv9);\n        \n        for (let i = 0 ; i < items.length ; i++){\n        let item = items[i];\n        //  if (item['qty'] != 0 && ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code']) === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n        // frm.add_child('items', {\n        //     'item_name': '\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629-2',\n        //     'qty': counter_of_customer9,\n        //     'item_code': item['item_code'],\n        //     // 'rate':total,\n        //     // 'amount': parseFloat(item['qty']) * total,\n        //     'uom':item['uom'],\n        //     'description':item['description'],\n        //     'income_account': \"4110 - Sales - AEC\",\n\n        //     });\n        //  }\n         if ( item['qty'] != 0 &&  ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            // 'rate':ge_rate_item_price_for_ra2es,\n            // 'amount': parseFloat(item['qty']) * ge_rate_item_price_for_ra2es,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"4113 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n         if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            // 'rate':ge_rate_item_price_for_wakel,\n            // 'amount': parseFloat(item['qty']) *ge_rate_item_price_for_wakel,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"\u0627\u0634\u062a\u0631\u0627\u0643 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n         ///New///\n        if ( item['qty'] != 0 &&  items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ){\n            console.log(\"\u062e\u062f\u0645\u064a\u0629\");\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            // 'rate':prod_item_price,\n            // 'amount': parseFloat(item['qty']) * prod_item_price,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n        // if(counter_of_serv9 > 1){\n        //     console.log(\"service comm\");\n        // frm.add_child('items', {\n        //     'item_name': '\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629',\n        //     'qty': counter_of_serv9,\n        //     // 'item_code': item['item_code'],\n        //     // 'rate':prod_item_price,\n        //     // 'amount': parseFloat(item['qty']) * prod_item_price,\n        //     // 'uom':item['uom'],\n        //     // 'description':item['description'],\n        //     // 'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n        //     });\n        // }\n        refresh_field('items');\n        }\n        \n\n        } \t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n})\n\n\n\n\n\n\n\n\n\nfunction getRateItemPriceForRa2es(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfunction getRateItemPriceForWakel(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\nfunction getRateItemPrice(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\n\n\n\nfunction get_committees(customer){\n    var temp;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                name: customer,\n            },\n            callback: function(r) {\n                temp = r.message;\n            }\n        });\n        return temp ;\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction getRateafter2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRatebefore2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\nfunction getServPrice(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\n\n\n\n\nfunction get_customer_group(value){\n    var temp = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_customer_group',\n        args: {\n            value: value\n        },\n        callback: function(r) {\n            temp = r.message;\n        }\n    });\n    return temp ;\n}\n\n\n\n\n\nfunction getRateItemPriceBefore2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRateItemPriceAfter2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 1,
  "modified": "2024-05-14 16:36:22.955677",
  "module": null,
  "name": "DASHBOARD",
  "script": "frappe.ui.form.on('Committee', {\n    onload_post_render: function(frm) {\n        var htmlContent = frm.doc.dashboard_card;\n        let total = frm.doc.total_members || 0;\n        let active = frm.doc.total_active_members || 0;\n        let inactive = frm.doc.total_inactive_members || 0;\n        let annual = frm.doc.annual_meeting || 0;\n        let meeting = frm.doc.annual_meeting_per_year || 0;\n        var filters = [[\"committe_code\", \"=\", frm.doc.name],];\n        let product_count = 0;\n        \n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                \"doctype\" : \"Product\",\n                \"filters\": {\n                    'committe_code': frm.doc.name,\n                },\n                \"limit_page_length\": 500,\n                // 'fields': ['name']\n            },\n            callback: function(response) {\n                if (response.message) {\n                    product_count = response.message.length;\n                    console.log(\"product count\");\n                    renderHTML();\n                }\n            }\n        });\n        \n        \nfrappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getActiveMembers',\n    args: {\n        com: frm.doc.name_of_committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message[0].total_count);\n        var Active = r.message[0].total_count;\n        frm.set_value('total_active_members', Active);\n        // frm.doc.total_active_members = r.message.total_count;\n        \n    }\n});\n\n\tfrappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getTotalMembers',\n    args: {\n        com: frm.doc.name_of_committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message[0].total_count);\n        var total = r.message[0].total_count;\n        frm.set_value('total_members', total);\n        // frm.doc.total_active_members = r.message.total_count;\n        \n    }\n});\n\n\n\n\tfrappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getInactiveMembers',\n    args: {\n        com: frm.doc.name_of_committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message[0].total_count);\n        var total = r.message[0].total_count;\n        frm.set_value('total_inactive_members', total);\n        // frm.doc.total_active_members = r.message.total_count;\n        \n    }\n});\n     \n     \n    frappe.call({\n            async: false,\n            method: 'barcode_aec.barcode.get_meeting_plan_count',\n            args: {\n                committee: frm.doc.name\n            },\n            callback: function(r) {\n                if (!r.exc) {\n                    console.log(r.message.count_by_committee);\n                    var total = r.message.count_by_committee[frm.doc.name] || 0;\n                    frm.set_value('annual_meeting', total);\n                    console.log('total',total);\n                    // frappe.msgprint('Meeting count updated successfully.');\n                } else {\n                    frappe.msgprint('Error calculating meeting count.');\n                }\n            }\n        });   \n        \n    \n    frappe.call({\n            async: false,\n            method: 'barcode_aec.barcode.get_meeting_count',\n            args: {\n                committee1: frm.doc.name\n            },\n            callback: function(response) {\n                if (!response.exc) {\n                    var count = response.message.count_by_committee[frm.doc.name] || 0;\n                    frm.set_value('annual_meeting_per_year', count);\n                    // frappe.msgprint('Another field updated successfully.');\n                } else {\n                    frappe.msgprint('Error calculating another field.');\n                }\n            }\n        });\n        \n        \n        \n        \n        \n        \n        \n\n        function renderHTML() {\n            frm.fields_dict.dashboard_card.$wrapper.html(`\n                <html>\n                <head>\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\n                </head>\n                <body>\n                    <div class=\"row justify-content-center\" style=\"margin-bottom: 30px;\">\n                        <div class=\"column\" style=\"width: 23%; text-align: center; margin-right: 2%; margin-left: 2%;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-users\" style=\"font-size: 36px; color: #007bff; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Total Members\")}</h5> \n                                    <p class=\"total\" style=\"font-size: 18px;\">${frm.doc.total_members}</p> \n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"column\" style=\"width: 23%; text-align: center; margin-right: 2%;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-user-check\" style=\"font-size: 36px; color: green; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Active Members\")}</h5> \n                                    <p class=\"active\" style=\"font-size: 18px;\">${active}</p> \n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"column\" style=\"width: 23%; text-align: center;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-user-times\" style=\"font-size: 36px; color: red; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Inactive Members\")}</h5> \n                                    <p class=\"inactive\" style=\"font-size: 18px;\">${frm.doc.total_inactive_members}</p> \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row justify-content-center\" style=\"margin-bottom: 30px;\">\n                        <div class=\"column\" style=\"width: 23%; text-align: center; margin-right: 2%; margin-left: 2%;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-calendar-alt\" style=\"font-size: 36px; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Annual meeting\")}</h5> \n                                    <p class=\"num\" style=\"font-size: 18px;\">${frm.doc.annual_meeting}</p> \n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"column\" style=\"width: 23%; text-align: center; margin-right: 2%;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-handshake\" style=\"font-size: 36px; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Meeting\")}</h5> \n                                    <p class=\"num\" style=\"font-size: 18px;\">${meeting}</p> \n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"column\" style=\"width: 23%; text-align: center;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-cube\" style=\"font-size: 36px; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Products\")}</h5> \n                                    <p class=\"num\" style=\"font-size: 18px;\">${product_count}</p> \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </body>\n                </html>\n            `);\n        }\n    // frm.save();    \n    }\n    \n});\n// frm.save();\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-08 11:12:18.109889",
  "module": null,
  "name": "Get Recommendations 4",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tcustom_get_recommendation:function(frm){\n\t    \n\t    \n\t    let invoices = frm.doc.custom_recommendation_invoice;\n\t    let history = frm.doc.custom_member_history;\n\t    var currentDate = new Date();\n\n\n        var currentYear = currentDate.getFullYear();\n\t    \n\t    \n\t    var committees = get_committees(frm.doc.customer);\n\t    var committees_you_would_like_to_join = committees.custom_committees_you_would_like_to_join;\n\t    let group = frm.doc.custom_customer_group;\n\t   // let price_prod = getRateItemPrice(group);\n\t    \n\t    \n\t    ////get customer data//////////\n\t    \n\t    \n\t    \n\t    var customer = frm.doc.customer;\n        var count = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel = 0;\n        let counter_of_ra2es = 0;\n        let counter_of_customer = 0;\n        let counter_of_serv = 0;\n        for ( let i = 0 ; i < count.length ; i++){\n            const temp = count[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended'] !== 1  ){\n                counter_of_wakeel = counter_of_wakeel+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] !==1 ){\n                counter_of_ra2es = counter_of_ra2es+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && temp['ended'] !== 1){\n                counter_of_customer = counter_of_customer+1;\n               \n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] !== 1){\n                counter_of_serv = counter_of_serv+1;\n               \n            }\n        }\n        \n\t     console.log(\"Prod\" + counter_of_customer);\n\t     console.log(\"Ra2es\" + counter_of_ra2es);\n         console.log(\"wakeel\" + counter_of_wakeel);\n         console.log(\"serv\" + counter_of_serv);\n\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    var serv_price = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t    console.log('serv' + '' + serv_price);\n\t    var ra2es_price = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t    console.log('ra2ees price' + '' + ra2es_price);\n        var wakeel_price = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n        console.log('wakeel price' + '' + wakeel_price);\n        \n        \n        let total_ra2es = ra2es_price * counter_of_ra2es;\n        console.log(total_ra2es);\n        let total_wakeel = counter_of_wakeel * wakeel_price;\n        console.log(total_wakeel);\n        \n        let total_serv = serv_price * counter_of_serv;\n        \n        let total_prod = 0;\n        if(counter_of_customer > 0){\n            let price_prod = getRateItemPrice(group);\n            \n            console.log('pord price' + '' + price_prod.price_list_rate);\n            total_prod = price_prod.price_list_rate * counter_of_customer;\n        }\n        \n        console.log(total_ra2es + total_wakeel + total_prod + total_serv);\n        \n        \n        let vol = 0.0;\n        let vol_logs = frm.doc.custom_log;\n        let customer_group5;\n        let member_group;\n        \n        for(let row of vol_logs){\n            if(row.season_name.includes('2023')){\n                vol = row.value;\n                let customer_group5 = get_customer_group(row.value);\n                member_group = customer_group5[0].name;\n            }\n        }\n    ////////////////////////////////////////////////////////DONE////////////////////////////////////////////////////////////   \n        \n\t   // let price_prod = getRateItemPrice(group);\n\t    //add current year\n\t        frm.add_child(\"custom_recommendation_invoice\",{\n\t\t                         year:currentYear.toString(),\n\t\t                         volume_of_exports: vol,\n\t\t                         member_category: member_group,\n\t\t                         expected_amount: parseFloat(total_ra2es + total_wakeel + total_prod + total_serv),\n\t\t                     })\n\t\t                     frm.refresh_field(\"custom_recommendation_invoice\");\n\t    \n    \n    ///////////////////////////////////////////////////////////////////DONE///////////////////////////////////////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ///////Past Years//////////////////////\n    \n    \t    \n\t   // var customer2 = frm.doc.customer;\n    //     var count2 = [];\n    //     frappe.call({\n    //         async:false,\n    //         method: 'frappe.client.get',\n    //         args: {\n    //             doctype: 'Customer',\n    //             filters: { name: customer },\n    //             fieldname: 'custom_committees_you_would_like_to_join' \n    //         },\n    //         callback: function(r) {\n    //             count2 = r.message.custom_committees_you_would_like_to_join;\n                \n    //         }\n    //     });\n        \n\n    //     let counter_of_wakeel2 = 0;\n    //     let counter_of_ra2es2 = 0;\n    //     let counter_of_customer2 = 0;\n    //     let counter_of_serv2 = 0;\n        \n    //     for ( let i = 0 ; i < count2.length ; i++){\n    //         const temp = count2[i];\n    //         if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629' && temp['ended'] !== 1  ){\n    //             counter_of_wakeel2 = counter_of_wakeel2+1;\n    //         }\n    //         if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" && temp['ended'] !==1 ){\n    //             counter_of_ra2es2 = counter_of_ra2es2+1;\n    //         }\n    //         if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" && temp['ended'] !== 1){\n    //             counter_of_customer2 = counter_of_customer2+1;\n               \n    //         }\n    //          if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" && temp['ended'] !== 1){\n    //             counter_of_serv2 = counter_of_serv2+1;\n               \n    //         }\n    //     }\n        \n\t   //  console.log(\"Prod\" + counter_of_customer2);\n\t   //  console.log(\"Ra2es\" + counter_of_ra2es2);\n    //      console.log(\"wakeel\" + counter_of_wakeel2);\n\n\t    \n\t    \n\t    \n\t    \n\t    \n\t    \n\t   // var serv_price2 = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t   // console.log('serv2' + serv_price2);\n\t   // var ra2es_price2 = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t   // console.log('ra2ees price' + '' + ra2es_price2);\n    //     var wakeel_price2 = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n    //     console.log('wakeel price' + '' + wakeel_price2);\n        \n        \n    //     let total_ra2es2 = ra2es_price * counter_of_ra2es;\n        \n    //     console.log(total_ra2es);\n        \n    //     let total_wakeel2 = counter_of_wakeel * wakeel_price;\n        \n    //     console.log(total_wakeel);\n        \n    //     let total_serv2 = serv_price * counter_of_serv;\n        \n        \n    //     let total_prod2 = 0;\n    //     if(counter_of_customer2 > 0){\n    //         let price_prod2 = getRateItemPrice(group);\n            \n    //         console.log('pord price' + '' + price_prod2.price_list_rate);\n            \n    //         total_prod2 = price_prod2.price_list_rate * counter_of_customer2;\n    //     }\n        \n    //     console.log(total_ra2es2+ total_wakeel2 + total_prod2);\n    \n    \n    ///Past Year///////////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    for(let row of history){\n        let rowYearNumber = parseInt(row.year);\n        \n        if(rowYearNumber < currentYear && rowYearNumber+1 !== currentYear){\n            \n            ///past Year Calc////\n            \n        var customer2 = frm.doc.customer;\n        var count2 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count2 = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel2 = 0;\n        let counter_of_ra2es2 = 0;\n        let counter_of_customer2 = 0;\n        let counter_of_serv2 = 0;\n        \n        for ( let i = 0 ; i < count2.length ; i++){\n            const temp = count2[i];\n            console.log('Length'+''+ count2.length);\n            console.log(temp['salutation']);\n            if (temp['salutation'].includes('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629') ) {\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                 if(toYear == 1970){\n                     toYear=== null;\n                     console.log(toYear);\n                 }\n            \n            if((rowYearNumber+1 >= parseInt(fromYear) && (rowYearNumber+1 <= parseInt(toYear) ) || toYear === 1970)){\n                counter_of_wakeel2 = counter_of_wakeel2+1;\n              \n            }\n            if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n                counter_of_wakeel2 = counter_of_wakeel2 +1;\n            }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_wakeel2 = counter_of_wakeel2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here1');\n            // }\n                \n                // && temp['ended'] ==1 ) || (temp['to']=== null || temp['ended'] ===0))\n                \n            }\n            else\n            {\n                console.log(\"in else \");\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" ) {\n                \n                  var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear2) && (rowYearNumber+1 <= parseInt(toYear2)) || toYear2=== 1970)){\n                counter_of_ra2es2 = counter_of_ra2es2+1;\n              \n            }\n            \n             if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n                counter_of_ra2es2 = counter_of_ra2es2 +1;\n            }\n            //   if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_ra2es2 = counter_of_ra2es2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here2');\n            // }\n                \n                \n                \n                \n                \n            }\n            if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" ){\n                \n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n                counter_of_customer2 = counter_of_customer2+1;\n              \n            }\n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer2 = counter_of_customer2 +1;\n            // }\n            \n            // if (((rowYearNumber + 1 >= parseInt(fromYear3) && rowYearNumber + 1 <= parseInt(toYear3)) || toYear3 === 1970) && rowYearNumber + 1 <= parseInt(toYear3)) {\n            //          counter_of_customer2 = counter_of_customer2 + 1;\n            // }\n\n            \n            \n            \n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear3) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear3)))) {\n            //     counter_of_customer2 = counter_of_customer2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here3');\n            // }\n                \n                \n                \n                \n                \n                \n               \n            }\n             if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            if((rowYearNumber+1 >= parseInt(fromYear4) && ( rowYearNumber+1 <= parseInt(toYear4)) || toYear4 === 1970) ){\n                counter_of_serv2 = counter_of_serv2+1;\n              \n            }\n              if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n                counter_of_serv2 = counter_of_serv2 +1;\n            }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear4) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear4)))) {\n            //     counter_of_serv2 = counter_of_serv2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here4');\n            // }\n                 \n                 \n                 \n                 \n                 \n                 \n                \n               \n            }\n        }\n        \n\t     console.log(\"Prod2\" + counter_of_customer2);\n\t     console.log(\"Ra2es2\" + counter_of_ra2es2);\n         console.log(\"wakeel2\" + counter_of_wakeel2);\n         console.log(\"serv2\" + counter_of_serv2);\n\n\t    \n\t     var rate = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');\n\t     \n\t     var total_new_wakeel = rate.price_list_rate * counter_of_wakeel2;\n\t    \n\t    \n\t    /////check price list for rate////////\n\t    \n\t   // let total_wakeel_before_2021 = 0;\n\t   // let total_ra2ees_before_2021 = 0;\n\t   // let total_prod_beore_2021 = 0;\n\t   // let total_serv_rate_before_2021 = 0;\n\t    \n\t    \n\t    \n\t    let logs = frm.doc.custom_log;\n\t    \n\t    let total_prod_group = 0;\n\t    \n\t    for(row of logs){\n\t        var history_results2 = getHistoryCount(frm.doc.customer,rowYearNumber);\n\t        var comm2 = getComCalc(frm.doc.customer,rowYearNumber);\n\t        if(rowYearNumber+1 == parseInt(row.season_name.split('-')[0])){\n\t            \n\t            var group_customer = get_customer_group(row.value);\n\t            var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);\n\t            \n\t            console.log('customer_rate');\n\t            console.log(customer_rate.price_list_rate);\n\t            console.log('True');\n\t            total_prod_group = customer_rate.price_list_rate * history_results2.prod;\n\t        }else{\n\t            var group_customer2 = get_customer_group(frm.doc.custom_volume_of_exports);\n\t            var customer_rate2 = getRateItemPriceAfter2021(group_customer2[0].name); \n\t            \n\t            total_prod_group = customer_rate2.price_list_rate * ( history_results2.prod + comm2.prod);\n\t        }\n\t       // if(frm.doc.custom_customer_group){\n\t            \n\t       // }\n\t        \n\t        \n\t        \n\t        \n\t    }\n\t   \n\n\n\n\n\n        var history_results = getHistoryCount(frm.doc.customer,rowYearNumber);\n\n        var comm = getComCalc(frm.doc.customer,rowYearNumber);\n\n\n\n\t    \n\t   // total_counter = counter_of_serv2 + counter_of_customer2 + counter_of_ra2es2 + counter_of_wakeel2;\n\t    \n\t   //if(rowYearNumber+1 < 2021){\n\t       var wakeel_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');  //1000\n\t       console.log(wakeel_rate_before_2021);\n\t       var ra2ees_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629');  //1000\n\t       console.log(ra2ees_rate_before_2021);\n\t       var customer_group = get_customer_group(frm.doc.custom_volume_of_exports);\n\t       console.log('customer_group');\n\t       console.log(customer_group[0].name);\n\t       \n\t       var prod_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629-2');\n\t       console.log(prod_rate_before_2021);\n\t       //var serv_rate_before_2021 = getRatebefore2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t       \n\t        let total_wakeel_before_2021 = wakeel_rate_before_2021.price_list_rate * ( history_results.wakeel + comm.wakeel);\n\t        \n\t        console.log(total_wakeel_before_2021 );\n\t        \n\t        \n\t        let total_ra2ees_before_2021 = ra2ees_rate_before_2021.price_list_rate * (history_results.ra2ees + comm.ra2ees);\n\t        console.log(total_ra2ees_before_2021 );\n\t        \n\t        let total_prod_before_2021 = prod_rate_before_2021.price_list_rate * ( history_results.prod + comm.prod);\n\t        \n\t        console.log(total_prod_before_2021 );\n\t        \n\t        let total_serv_rate_before_2021 = 2000 * (history_results.serv + comm.serv);\n\t       \n\t       console.log(total_serv_rate_before_2021 );\n\t       \n\t       let total_all_before_2021 = total_wakeel_before_2021 + total_ra2ees_before_2021 + total_serv_rate_before_2021 + total_prod_before_2021;\n\t       \n\t   //}else{\n\t   \n\t   ///////////////////////\n\t       \n\t       var wakeel_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629');\n\t       \n\t       console.log(wakeel_rate_after_2021);\n\t       \n\t       var ra2ees_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629');\n\t       \n\t       \n\t       console.log(ra2ees_rate_after_2021);\n\t       //var prod_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629');\n\t       //var serv_rate_after_2021 = getRateafter2021('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t       \n\t        let total_wakeel_after_2021 = wakeel_rate_after_2021.price_list_rate * (history_results.wakeel + comm.wakeel);\n\t        \n\t        console.log(total_wakeel_after_2021);\n\t        \n\t        let total_ra2ees_after_2021 = ra2ees_rate_after_2021.price_list_rate * ( history_results.ra2ees + comm.ra2ees) ;\n\t        \n\t        console.log(total_ra2ees_after_2021);\n\t       // let total_prod_after_2021 = prod_rate_after_2021 * counter_of_customer2;\n\t        let total_serv_rate_after_2021 = 2000 * (history_results.serv + comm.serv);\n\t       \n\t        console.log( total_serv_rate_after_2021);\n\t       \n\t        let total_all_after_2021 = total_wakeel_after_2021 + total_ra2ees_after_2021 + total_serv_rate_after_2021 + total_prod_group;\n\t       \n\t       console.log(total_prod_group);\n\t   //}\n\t    \n\t    \n\t    \n\t    \n\t    \n\t   // var serv_price2 = getServPrice('\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629');\n\t   // console.log('serv2' + serv_price2);\n\t   // var ra2es_price2 = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n\t   // console.log('ra2ees price' + '' + ra2es_price2);\n    //     var wakeel_price2 = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n    //     console.log('wakeel price' + '' + wakeel_price2);\n        \n        \n    //     let total_ra2es2 = ra2es_price * counter_of_ra2es;\n        \n    //     console.log(total_ra2es);\n        \n    //     let total_wakeel2 = counter_of_wakeel * wakeel_price;\n        \n    //     console.log(total_wakeel);\n        \n    //     let total_serv2 = serv_price * counter_of_serv;\n        \n        \n    //     let total_prod2 = 0;\n    //     if(counter_of_customer2 > 0){\n    //         let price_prod2 = getRateItemPrice(group);\n            \n    //         console.log('pord price' + '' + price_prod2.price_list_rate);\n            \n    //         total_prod2 = price_prod2.price_list_rate * counter_of_customer2;\n    //     }\n        \n        // console.log(total_ra2es2+ total_wakeel2 + total_prod2);\n        \n        \n        var history_com = getHistoryCount(frm.doc.customer,rowYearNumber);\n        console.log(\"History Count\" + history_com);\n        console.log(history_com);\n        \n        \n        \n        \n        \n    \n    let expectedAmount2;\nif (rowYearNumber+1 < 2021) {\n    expectedAmount2 = total_all_before_2021;\n    console.log('expected amount before 2021' + ' '+ expectedAmount2);\n} else if (rowYearNumber+1 == 2021 || rowYearNumber <= 2023) {\n    expectedAmount2 = total_all_after_2021;\n     console.log('expected amount After 2021' + ' '+ expectedAmount2);\n} else {\n    // Handle other cases if needed\n    expectedAmount2 = 0; // Default value or any other handling\n}\n            \n            ///Past Year Calc//////\n            \n            \n        let vol2 = 0.0;\n        let vol_logs2 = frm.doc.custom_log;\n        let customer_group6;\n        let member_group2;    \n        \n        let customer_g = get_customer_group(frm.doc.custom_member_history[0].volume_of_exports);     \n            \n        for(let row of vol_logs2){\n            if(row.season_name.includes(rowYearNumber)){\n                vol2 = row.value;\n                let customer_group6 = get_customer_group(row.value);\n                member_group2 = customer_group6[0].name;\n            }\n        }\n            \n            \n            \n            \n            \n                        let nextYear = rowYearNumber + 1;\n            \t        frm.add_child(\"custom_recommendation_invoice\",{\n\t\t                         year:nextYear,\n\t\t                         volume_of_exports: frm.doc.custom_member_history[0].volume_of_exports,\n\t\t                         member_category: customer_g[0].name,\n\t\t                         expected_amount: expectedAmount2,\n\t\t                     })\n\t\t                     frm.refresh_field(\"custom_recommendation_invoice\");\n                        \n                        \n                        \n  \n                        \n                        \n                        \n        }\n        \n        \n        \n    }\t    \n    \n\t    \n\t}\n})\n\n\n\n\n\n\n\n\n\nfunction getRateItemPriceForRa2es(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfunction getRateItemPriceForWakel(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\nfunction getRateItemPrice(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\n\n\n\nfunction get_committees(customer){\n    var temp;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                name: customer,\n            },\n            callback: function(r) {\n                temp = r.message;\n            }\n        });\n        return temp ;\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction getRateafter2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRatebefore2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\nfunction getServPrice(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\n\n\n\n\nfunction get_customer_group(value){\n    var temp = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_customer_group',\n        args: {\n            value: value\n        },\n        callback: function(r) {\n            temp = r.message;\n        }\n    });\n    return temp ;\n}\n\n\n\n\n\nfunction getRateItemPriceBefore2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRateItemPriceAfter2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n// frappe.ui.form.on('Sales Invoice', {\n// \tyear:function(frm) {\n// \t    let history = frm.doc.custom_member_history;\n// \t    let row_year = frm.doc.custom_member_history[0].year;\n// \t    let nextYear = parseInt(row_year);\n// \t if(parseInt(frm.doc.year) == nextYear+1){\n//         console.log(\"now\");\n//         cur_frm.clear_table(\"items\");\n//         var items = [];\n//         frappe.call({\n//             async:false,\n//             method: 'frappe.client.get',\n//             args: {\n//                 doctype: 'Product Bundle',\n//                 filters: { name: custom_product_bundle },\n//                 fieldname: 'items' \n//             },\n//             callback: function(r) {\n//                 items = r.message.items;\n//             }\n//         });\n        \n//         var customer = frm.doc.customer;\n//         var count9 = [];\n//         frappe.call({\n//             async:false,\n//             method: 'frappe.client.get',\n//             args: {\n//                 doctype: 'Customer',\n//                 filters: { name: customer },\n//                 fieldname: 'custom_committees_you_would_like_to_join' \n//             },\n//             callback: function(r) {\n//                 count = r.message.custom_committees_you_would_like_to_join;\n                \n//             }\n//         });\n        \n\n//         let counter_of_wakeel9 = 0;\n//         let counter_of_ra2es9 = 0;\n//         let counter_of_customer9 = 0;\n//         let counter_of_products9 = 0\n//         for ( let i = 0 ; i < count9.length ; i++){\n//             const temp = count9[i];\n//             if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'){\n//                 counter_of_wakeel9 = counter_of_wakeel9+1;\n//             }\n//             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\"){\n//                 counter_of_ra2es9 = counter_of_ra2es9+1;\n//             }\n//              if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n//                 counter_of_products9 = counter_of_products9+1;\n//             }\n//             // if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n//             //     counter_of_customer = counter_of_customer+1;\n//             // }\n//         }\n        \n//             for (let i = 0 ; i < items.length ; i++){\n//             items[i]['qty'] = 0;\n//         }\n            \n\n        \n//         for (let i = 0 ; i < items.length ; i++){\n//              if ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"  || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629\") {\n//                  items[i]['qty'] = counter_of_customer9;\n//             }\n//             if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\"){\n//                  items[i]['qty'] = counter_of_ra2es9;\n//             }\n//             if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n//                 items[i]['qty'] = counter_of_wakeel9;\n//             }\n//             if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n//                 items[i]['qty'] = counter_of_products9;\n//             }\n//         }\n        \n//         const packed_items = frm.doc.packed_items;\n//         var amount_of_wakeel = 0;\n//         var amount_of_ra2es = 0;\n//         var amount_of_customer = 0;\n        \n//         cur_frm.clear_table(\"items\"); \n//         console.log(items);\n//         var customer_group = getCustomerGroup(frm);\n//         var price_rule;\n//         // var ge_rat_item_price = getRateItemPrice(\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" );\n//         var total;\n//         var ge_rate_item_price_for_ra2es = getRateItemPriceForRa2es (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n//         var ge_rate_item_price_for_wakel = getRateItemPriceForWakel (\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n//         var prod_item_price = getRateItemPriceForProd (\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" );\n        \n//         if (customer_group === '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0642\u0644 \u0645\u0646 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647'){\n//             // total = ge_rat_item_price;\n//         }else{\n//             // price_rule = getPriceRule(customer_group);\n//             // total = ge_rat_item_price + price_rule;\n//         }\n        \n\n        \n\n        \n        \n\n        \n//         for (let i = 0 ; i < items.length ; i++){\n//         let item = items[i];\n//         //  if (item['qty'] != 0 && ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code']) === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n//         // frm.add_child('items', {\n//         //     'item_name': item['item_code'],\n//         //     'qty': item['qty'],\n//         //     'item_code': item['item_code'],\n//         //     'rate':total,\n//         //     'amount': parseFloat(item['qty']) * total,\n//         //     'uom':item['uom'],\n//         //     'description':item['description'],\n//         //     'income_account': \"4110 - Sales - AEC\",\n\n//         //     });\n//         //  }\n//          if ( item['qty'] != 0 &&  ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\")){\n//         frm.add_child('items', {\n//             'item_name': item['item_code'],\n//             'qty': item['qty'],\n//             'item_code': item['item_code'],\n//             'rate':ge_rate_item_price_for_ra2es,\n//             'amount': parseFloat(item['qty']) * ge_rate_item_price_for_ra2es,\n//             'uom':item['uom'],\n//             'description':item['description'],\n//             'income_account': \"4113 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629 - AEC\",\n\n//             });\n//          }\n//          if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n//         frm.add_child('items', {\n//             'item_name': item['item_code'],\n//             'qty': item['qty'],\n//             'item_code': item['item_code'],\n//             'rate':ge_rate_item_price_for_wakel,\n//             'amount': parseFloat(item['qty']) *ge_rate_item_price_for_wakel,\n//             'uom':item['uom'],\n//             'description':item['description'],\n//             'income_account': \"\u0627\u0634\u062a\u0631\u0627\u0643 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629 - AEC\",\n\n//             });\n//          }\n//          ///New///\n//         if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n//         frm.add_child('items', {\n//             'item_name': item['item_code'],\n//             'qty': item['qty'],\n//             'item_code': item['item_code'],\n//             'rate':prod_item_price,\n//             'amount': parseFloat(item['qty']) * prod_item_price,\n//             'uom':item['uom'],\n//             'description':item['description'],\n//             'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n//             });\n//          }\n//         refresh_field('items');\n//         }\n        \n//     //   var committees = get_committees(frm.doc.customer);\n\n//     //     var committees_you_would_like_to_join = committees.custom_committees_you_would_like_to_join;\n//     //     var log = committees.volume_of_member_exports_for_three_years ; \n\n//     //     cur_frm.clear_table('custom_committees_customer_joined_');\n//     //     cur_frm.clear_table('custom_log');\n\n//     //     for (let z of committees_you_would_like_to_join) {\n//     //         var row = frappe.model.add_child(cur_frm.doc, 'custom_committees_customer_joined_');\n//     //         row.committees = z.committees;\n//     //         row.salutation = z.salutation;\n//     //     }\n        \n//         // for (let m of log) {\n//         //     var f = frappe.model.add_child(cur_frm.doc, 'custom_log');\n//         //     f.season = m.season;\n//         //     f.season_name = m.season_name;\n//         //     f.value = m.value;\n//         //     f.total_amount_in_usd = m.total_amount_in_usd ; \n//         //     f.quantity_in_tons = m.quantity_in_tons ; \n//         // }\n        \n//         // cur_frm.refresh_field('custom_committees_customer_joined_');\n//         // cur_frm.refresh_field('custom_log');\n//         } \t\n\t\t\n\t\t\n\t\t\n\t\t\n// \t}\n// })\n\n\n\n\n\nfunction getHistoryCount(customer,rowYearNumber){\n    var count2 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committee_member_history' \n            },\n            callback: function(r) {\n                count2 = r.message.custom_committee_member_history;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel2 = 0;\n        let counter_of_ra2es2 = 0;\n        let counter_of_customer2 = 0;\n        let counter_of_serv2 = 0;\n        \n        for ( let i = 0 ; i < count2.length ; i++){\n            const temp = count2[i];\n            // console.log('Length'+''+ count2.length);\n            // console.log(temp['salutation']);\n            if (temp['salutation'] === ('\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629') ) {\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                 if(toYear == 1970){\n                     toYear=== null;\n                     console.log(toYear);\n                 }\n                 \n                //   counter_of_wakeel2 = counter_of_wakeel2+1;\n                 \n            // if( rowYearNumber+1 <= parseInt(fromYear)){\n            //     console.log(\"Calc Done\");\n            //     counter_of_wakeel2 = counter_of_wakeel2+1;\n              \n            // }     \n                 \n                 \n            \n            if(parseInt(fromYear) <=  rowYearNumber+1  && parseInt(toYear) >= rowYearNumber+1 ){\n                counter_of_wakeel2 = counter_of_wakeel2+1;\n              \n            }\n            // if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n            //     counter_of_wakeel2 = counter_of_wakeel2 +1;\n            // }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_wakeel2 = counter_of_wakeel2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here1');\n            // }\n                \n                // && temp['ended'] ==1 ) || (temp['to']=== null || temp['ended'] ===0))\n                \n            }\n            else\n            {\n                console.log(\"in else \");\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" ) {\n                \n                  var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n            \n            \n            \n            if(parseInt(fromYear2) <=  rowYearNumber+1 && parseInt(toYear2) >= rowYearNumber+1){\n                counter_of_ra2es2 = counter_of_ra2es2+1;\n              \n            } \n            \n                \n            // if(rowYearNumber+1 <= parseInt(fromYear2) && rowYearNumber+1 >= parseInt(toYear2)){\n            //     counter_of_ra2es2 = counter_of_ra2es2+1;\n              \n            // }\n            \n            //  if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n            //     counter_of_ra2es2 = counter_of_ra2es2 +1;\n            // }\n            //   if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear2) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear2)))) {\n            //     counter_of_ra2es2 = counter_of_ra2es2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here2');\n            // }\n                \n                \n                \n                \n                \n            }\n            if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" ){\n                \n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n             \n             \n             \n             if(parseInt(fromYear3) <= rowYearNumber+1  && parseInt(toYear3) >= rowYearNumber+1 ){\n                counter_of_customer2 = counter_of_customer2+1;\n              \n            } \n             \n             \n                \n            // if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n            //     counter_of_customer2 = counter_of_customer2+1;\n              \n            // }\n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer2 = counter_of_customer2 +1;\n            // }\n            \n            // if (((rowYearNumber + 1 >= parseInt(fromYear3) && rowYearNumber + 1 <= parseInt(toYear3)) || toYear3 === 1970) && rowYearNumber + 1 <= parseInt(toYear3)) {\n            //          counter_of_customer2 = counter_of_customer2 + 1;\n            // }\n\n            \n            \n            \n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear3) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear3)))) {\n            //     counter_of_customer2 = counter_of_customer2 + 1;\n            //  }\n            // else{\n            //     console.log('is not here3');\n            // }\n                \n                \n                \n                \n                \n                \n               \n            }\n             if (temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n                \n                  \n                \n            if( parseInt(fromYear4) <= rowYearNumber+1 && parseInt(toYear4) >= rowYearNumber+1  ){\n                counter_of_serv2 = counter_of_serv2+1;\n              \n            }\n            //   if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n            //     counter_of_serv2 = counter_of_serv2 +1;\n            // }\n            //  if ((temp['to'] === \"\") || (rowYearNumber + 1 >= parseInt(fromYear4) && (temp['to'] !== \"\" && rowYearNumber + 1 <= parseInt(toYear4)))) {\n            //     counter_of_serv2 = counter_of_serv2 + 1;\n            //  }\n            \n            // else{\n            //     console.log('is not here4');\n            // }\n                 \n                 \n                 \n                 \n                 \n                 \n                \n               \n            }\n        }\n        \n    \n    var result = {\n        'wakeel': counter_of_wakeel2,\n        'ra2ees': counter_of_ra2es2,\n        'prod': counter_of_customer2,\n        'serv':counter_of_serv2\n    }\n    \n    \n    return result;\n    \n    \n    \n    \n}\n\n\n\n\n\n\n\n\n\n\nfunction getComCalc(customer,rowYearNumber){\n        var count9 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count9 = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n    \n        let counter_of_wakeel9 = 0;\n        let counter_of_ra2es9 = 0;\n        let counter_of_customer9 = 0;\n        let counter_of_products9 = 0;\n        let counter_of_serv9 = 0;\n    \n    for ( let i = 0 ; i < count9.length ; i++){\n            const temp = count9[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'){\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                \n            //   if((rowYearNumber+1 >= parseInt(fromYear) && (rowYearNumber+1 <= parseInt(toYear) ) || toYear === 1970)){\n            //     counter_of_wakeel9 = counter_of_wakeel9+1;\n              \n            // }\n            // if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n            //     counter_of_wakeel9 = counter_of_wakeel9 +1;\n            // }   \n            if(parseInt(fromYear) <=  rowYearNumber+1  && parseInt(toYear) == 1970 ){\n                counter_of_wakeel9 = counter_of_wakeel9+1;\n              \n            }  \n                \n                // counter_of_wakeel9 = counter_of_wakeel9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\"){\n                \n                   var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n            //       if((rowYearNumber+1 >= parseInt(fromYear2) && (rowYearNumber+1 <= parseInt(toYear2)) || toYear2=== 1970)){\n            //     counter_of_ra2es9 = counter_of_ra2es9+1;\n              \n            // }\n            \n            //  if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n            //     counter_of_ra2es9 = counter_of_ra2es9 +1;\n            // }\n            \n            if(parseInt(fromYear2) <=  rowYearNumber+1 && parseInt(toYear2) == 1970){\n                counter_of_ra2es9 = counter_of_ra2es9+1;\n              \n            }     \n               \n                \n                // counter_of_ra2es9 = counter_of_ra2es9+1;\n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear4) && ( rowYearNumber+1 <= parseInt(toYear4)) || toYear4 === 1970) ){\n            //     counter_of_serv9 = counter_of_serv9+1;\n              \n            // }\n            //   if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n            //     counter_of_products9 = counter_of_products9 +1;\n            // }\n                 \n            if( parseInt(fromYear4) <= rowYearNumber+1 && parseInt(toYear4) == 1970  ){\n                counter_of_serv9 = counter_of_serv9+1;\n              \n            }   \n                 \n                 \n                 \n                 \n                 \n                // counter_of_products9 = counter_of_products9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n            //     counter_of_customer9 = counter_of_customer9+1;\n              \n            // }\n               if(parseInt(fromYear3) <= rowYearNumber+1  && parseInt(toYear3) == 1970 ){\n                counter_of_customer9 = counter_of_customer9+1;\n              \n            } \n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer9 = counter_of_customer9 +1;\n            // }\n            \n                // counter_of_customer = counter_of_customer+1;\n            }\n        }\n\n    \n    var result = {\n        'wakeel': counter_of_wakeel9,\n        'ra2ees': counter_of_ra2es9,\n        'prod': counter_of_customer9,\n        'serv':counter_of_serv9\n    }\n    \n    \n    return result;\n    \n    \n    \n    \n}\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-04-17 13:02:57.876764",
  "module": null,
  "name": "Clac based Recommendation 4",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\tyear:function(frm) {\n\t    let history = frm.doc.custom_member_history;\n\t    let row_year = frm.doc.custom_member_history[0].year;\n\t    let custom_product_bundle = frm.doc.custom_bundle_;\n\t    \n\t    let nextYear = parseInt(row_year);\n\t if(parseInt(frm.doc.year) == nextYear+1){\n        console.log(\"now\");\n        cur_frm.clear_table(\"items\");\n        var items = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Product Bundle',\n                filters: { name: custom_product_bundle },\n                fieldname: 'items' \n            },\n            callback: function(r) {\n                items = r.message.items;\n            }\n        });\n        \n        var customer = frm.doc.customer;\n        var count9 = [];\n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committee_member_history' \n            },\n            callback: function(r) {\n                count9 = r.message.custom_committee_member_history;\n                \n            }\n        });\n        \n\n        let counter_of_wakeel9 = 0;\n        let counter_of_ra2es9 = 0;\n        let counter_of_customer9 = 0;\n        let counter_of_products9 = 0;\n        let counter_of_serv9 = 0;\n        \n        \n            //     var group_customer = get_customer_group(row.value);\n\t           // var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);/////////\n\t            \n\t           // console.log('customer_rate');\n\t           // console.log(customer_rate.price_list_rate);\n\t           // console.log('True');\n\t           // total_prod_group = customer_rate.price_list_rate * counter_of_customer9;\n            // let logs = frm.doc.custom_log;\n\t    \n\t   // let total_prod_group = 0;\n\t    \n\t   // for(let row of logs){\n\t        \n\t   //     if(rowYearNumber+1 == parseInt(row.season_name.split('-')[0])){\n\t            \n\t   //         var group_customer = get_customer_group(row.value);\n\t   //         var customer_rate = getRateItemPriceAfter2021(group_customer[0].name);\n\t            \n\t   //         console.log('customer_rate');\n\t   //         console.log(customer_rate.price_list_rate);\n\t   //         console.log('True');\n\t   //         total_prod_group = customer_rate.price_list_rate * counter_of_customer2;\n\t   //     }else{\n\t   //         var group_customer2 = get_customer_group(frm.doc.custom_volume_of_exports);\n\t   //         var customer_rate2 = getRateItemPriceAfter2021(group_customer2[0].name); \n\t            \n\t   //         total_prod_group = customer_rate2.price_list_rate * counter_of_customer2;\n\t   //     }\n\t      \n\t        \n\t        \n\t        \n\t   // }\n        \n        \n        \n        let comm_pay = [];\n        \n        \n        var committeeNames=[];\n        var salutationValues = [];\n        var committeeSalutations = [];\n        \n        \n        // let comms = {};\n        // let pay_comm = {};\n        let rowYearNumber = parseInt(frm.doc.custom_member_history[0].year);\n        \n        \n        var res = getComCalc(frm.doc.customer,rowYearNumber);\n        console.log('Committe Results' + \" \" + res);\n        console.log(res);\n        \n        \n        \n        for ( let i = 0 ; i < count9.length ; i++){\n            const temp = count9[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'){\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                \n            //   if((rowYearNumber+1 >= parseInt(fromYear) && (rowYearNumber+1 <= parseInt(toYear) ) || toYear === 1970)){\n            //     counter_of_wakeel9 = counter_of_wakeel9+1;\n              \n            // }\n            // if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n            //     counter_of_wakeel9 = counter_of_wakeel9 +1;\n            // }   \n            if(parseInt(fromYear) <=  rowYearNumber+1  && parseInt(toYear) >= rowYearNumber+1 ){\n                counter_of_wakeel9 = counter_of_wakeel9+1;\n                comm_pay.push(temp['committee']);\n                \n                \n                      committeeNames.push(temp['committee']);\n                salutationValues.push(temp['salutation']);\n                \n                \n                // comms.temp['committee'] = temp['salutation'];\n            }  \n                \n                // counter_of_wakeel9 = counter_of_wakeel9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\"){\n                \n                   var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n            //       if((rowYearNumber+1 >= parseInt(fromYear2) && (rowYearNumber+1 <= parseInt(toYear2)) || toYear2=== 1970)){\n            //     counter_of_ra2es9 = counter_of_ra2es9+1;\n              \n            // }\n            \n            //  if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n            //     counter_of_ra2es9 = counter_of_ra2es9 +1;\n            // }\n            \n            if(parseInt(fromYear2) <=  rowYearNumber+1 && parseInt(toYear2) >= rowYearNumber+1){\n                counter_of_ra2es9 = counter_of_ra2es9+1;\n                comm_pay.push(temp['committee']);\n                \n                      committeeNames.push(temp['committee']);\n                salutationValues.push(temp['salutation']);\n                \n                \n              \n            }     \n               \n                \n                // counter_of_ra2es9 = counter_of_ra2es9+1;\n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear4) && ( rowYearNumber+1 <= parseInt(toYear4)) || toYear4 === 1970) ){\n            //     counter_of_serv9 = counter_of_serv9+1;\n              \n            // }\n            //   if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n            //     counter_of_products9 = counter_of_products9 +1;\n            // }\n                 \n            if( parseInt(fromYear4) <= rowYearNumber+1 && parseInt(toYear4) >= rowYearNumber+1  ){\n                counter_of_serv9 = counter_of_serv9+1;\n                comm_pay.push(temp['committee']);\n                \n                \n                      committeeNames.push(temp['committee']);\n                salutationValues.push(temp['salutation']);\n              \n            }   \n                 \n                 \n                 \n                 \n                 \n                // counter_of_products9 = counter_of_products9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n            //     counter_of_customer9 = counter_of_customer9+1;\n              \n            // }\n               if(parseInt(fromYear3) <= rowYearNumber+1  && parseInt(toYear3) >= rowYearNumber+1 ){\n                counter_of_customer9 = counter_of_customer9+1;\n                comm_pay.push(temp['committee']);\n                \n                \n                committeeNames.push(temp['committee']);\n                salutationValues.push(temp['salutation']);\n                \n                \n            } \n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer9 = counter_of_customer9 +1;\n            // }\n            \n                // counter_of_customer = counter_of_customer+1;\n            }\n        }\n        \n    for (var i = 0; i < committeeNames.length; i++) {\n    // Create a new dictionary for each committee\n    var committeeDict = {};\n    \n    // Assign the committee name and its corresponding salutation value to the dictionary\n    committeeDict['committee'] = committeeNames[i];\n    committeeDict['salutation'] = salutationValues[i];\n    \n    // Add the dictionary to the array\n    committeeSalutations.push(committeeDict);\n    // console.log(committeeSalutations);\n}\n        \n        \n        // console.log(\"all committes\");\n        \n        var com_sal = getComAndSal(frm.doc.customer,rowYearNumber);\n        \n        console.log(\"all committes history\");\n        console.log(committeeSalutations);\n        console.log(\"all committes original\");\n        console.log(com_sal);\n        // console.log(comm_pay);\n        \n            for (let i = 0 ; i < items.length ; i++){\n            items[i]['qty'] = 0;\n        }\n            \n\n        \n        for (let i = 0 ; i < items.length ; i++){\n             if ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"  || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629\") {\n                 items[i]['qty'] = counter_of_customer9 + res.prod;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                 items[i]['qty'] = counter_of_ra2es9 + res.ra2ees;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\"){\n                items[i]['qty'] = counter_of_wakeel9 + res.wakeel;\n            }\n            if (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ||  items[i]['item_code'] ===  \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n                items[i]['qty'] = counter_of_serv9 + res.serv;\n            }\n        }\n        \n        const packed_items = frm.doc.packed_items;\n        var amount_of_wakeel = 0;\n        var amount_of_ra2es = 0;\n        var amount_of_customer = 0;\n        \n        cur_frm.clear_table(\"items\"); \n        // console.log(items);\n        var customer_group = getCustomerGroup(frm);\n        var price_rule;\n        // var ge_rat_item_price = getRateItemPrice(\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" );\n        var total;\n        var ge_rate_item_price_for_ra2es =  getRatebefore2021 (\"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" );\n        var ge_rate_item_price_for_wakel =  getRatebefore2021(\"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" );\n        var prod_item_price = getRateItemPriceForProd (\"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" );\n        \n        if (customer_group === '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0642\u0644 \u0645\u0646 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647'){\n            // total = ge_rat_item_price;\n        }else{\n            // price_rule = getPriceRule(customer_group);\n            // total = ge_rat_item_price + price_rule;\n        }\n        \n\n        \n     let group = frm.doc.custom_customer_group;\n    //  if(group === null || group === \"\"){\n    //       frappe.throw(\"\u0647\u0630\u0627 \u0627\u0644\u0639\u0636\u0648 \u064a\u062c\u0628 \u0627\u0646 \u064a\u0643\u0648\u0646 \u0645\u0646\u062a\u0645\u064a  \u0644\u0627\u062d\u062f \u0645\u0646 \u0641\u0626\u0627\u062a \u0627\u0644\u0627\u0639\u0636\u0627\u0621 \u0627\u0648\u0644\u0627\");\n    //       frappe.validated = false;\n    //  }else{\n     let price = getRateItemPrice(group);\n    //  console.log(\"price\" + price);\n    //  console.log('count' + count);\n     \n     if(frm.doc.custom_customer_group == price.custom_member_categories && counter_of_customer9 > 0){\n        //  var income = getIncome(price.item_name);\n        // let price = getRateItemPrice(group);\n\n        //  console.log(income);\n        //  console.log(price.item_code);\n         console.log(price.price_list_rate);\n         frm.add_child('items', {\n            'item_name': price.item_name,\n            'qty':  counter_of_customer9 + res.prod,\n            'item_code': price.item_code,\n            // 'rate':price.price_list_rate,\n            // 'amount': parseFloat(count) * price.price_list_rate,\n            'uom':'Nos',\n            'description':'test',\n            'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         \n         \n     }\n    //  refresh_field('items');\n\n        console.log(\"counter_of_serv9\"  + \"\" + counter_of_serv9);\n        \n        for (let i = 0 ; i < items.length ; i++){\n        let item = items[i];\n        //  if (item['qty'] != 0 && ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\" || items[i]['item_code']) === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n        // frm.add_child('items', {\n        //     'item_name': '\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629-2',\n        //     'qty': counter_of_customer9,\n        //     'item_code': item['item_code'],\n        //     // 'rate':total,\n        //     // 'amount': parseFloat(item['qty']) * total,\n        //     'uom':item['uom'],\n        //     'description':item['description'],\n        //     'income_account': \"4110 - Sales - AEC\",\n\n        //     });\n        //  }\n         if ( item['qty'] != 0 &&  ( items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\" || items[i]['item_code'] === \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0631\u0626\u064a\u0633  \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            // 'rate':ge_rate_item_price_for_ra2es,\n            // 'amount': parseFloat(item['qty']) * ge_rate_item_price_for_ra2es,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"4113 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n         if ( item['qty'] != 0 &&  (items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629\" ||  items[i]['item_code'] ===  \"\u0627\u0634\u062a\u0631\u0627\u0643 - \u062a\u062c\u062f\u064a\u062f \u0639\u0636\u0648\u064a\u0629  \u0648\u0643\u064a\u0644 \u0627\u0644\u0644\u062c\u0646\u0629\")){\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            // 'rate':ge_rate_item_price_for_wakel,\n            // 'amount': parseFloat(item['qty']) *ge_rate_item_price_for_wakel,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"\u0627\u0634\u062a\u0631\u0627\u0643 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n         ///New///\n        if ( item['qty'] != 0 &&  items[i]['item_code'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\" ){\n            console.log(\"\u062e\u062f\u0645\u064a\u0629\");\n        frm.add_child('items', {\n            'item_name': item['item_code'],\n            'qty': item['qty'],\n            'item_code': item['item_code'],\n            // 'rate':prod_item_price,\n            // 'amount': parseFloat(item['qty']) * prod_item_price,\n            'uom':item['uom'],\n            'description':item['description'],\n            'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n            });\n         }\n        // if(counter_of_serv9 > 1){\n        //     console.log(\"service comm\");\n        // frm.add_child('items', {\n        //     'item_name': '\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629',\n        //     'qty': counter_of_serv9,\n        //     // 'item_code': item['item_code'],\n        //     // 'rate':prod_item_price,\n        //     // 'amount': parseFloat(item['qty']) * prod_item_price,\n        //     // 'uom':item['uom'],\n        //     // 'description':item['description'],\n        //     // 'income_account': \"4111 - \u0627\u0634\u062a\u0631\u0627\u0643 \u0639\u0636\u0648 \u0644\u062c\u0646\u0629 - AEC\",\n\n        //     });\n        // }\n        refresh_field('items');\n        }\n        \n\n        } \t\n\t\t\n\tcur_frm.clear_table(\"custom_committees_customer_joined_\");\n\t\n\tfor(let row of com_sal){\n\t\tfrm.add_child('custom_committees_customer_joined_', {\n            'committees': row.committee,\n            'salutation':  row.salutation,\n            });\n\t\t\n\t}\n\tfor(let row of committeeSalutations){\n\t\tfrm.add_child('custom_committees_customer_joined_', {\n            'committees': row.committee,\n            'salutation':  row.salutation,\n            });\n\t\t\n\t}\n\trefresh_field('custom_committees_customer_joined_');\n\t\t\n\t}\n})\n\n\n\n\n\n\n\n\n\nfunction getRateItemPriceForRa2es(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\nfunction getRateItemPriceForWakel(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\nfunction getRateItemPrice(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\n\n\n\nfunction get_committees(customer){\n    var temp;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                name: customer,\n            },\n            callback: function(r) {\n                temp = r.message;\n            }\n        });\n        return temp ;\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction getRateafter2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRatebefore2021(item){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                    'item_code': item,\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\n\nfunction getServPrice(name){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { 'item_code': name },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message.price_list_rate;\n            }\n        });\n        return memo;\n}\n\n\n\n\n\n\n\n\n\nfunction get_customer_group(value){\n    var temp = [] ;\n    frappe.call({\n        async:false,\n        method: 'barcode_aec.barcode.get_customer_group',\n        args: {\n            value: value\n        },\n        callback: function(r) {\n            temp = r.message;\n        }\n    });\n    return temp ;\n}\n\n\n\n\n\nfunction getRateItemPriceBefore2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0642\u0628\u0644 2021',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getRateItemPriceAfter2021(group){\n    var memo;\n    frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Item Price',\n                filters: { \n                    'custom_member_categories': group,\n                    'price_list': '\u0642\u0627\u0626\u0645\u0629 \u0627\u0633\u0639\u0627\u0631 \u0627\u0644\u062e\u062f\u0645\u0627\u062a \u0645\u0646 2021 \u0627\u0644\u0649 2023',\n                },\n                fieldname: 'price_list_rate' \n            },\n            callback: function(r) {\n                memo = r.message;\n            }\n        });\n        return memo;\n// }\n}\n\n\n\n\n\n\nfunction getComCalc(customer,rowYearNumber){\n        var count9 = [];\n        let comm_pay2 = [];\n        var comms = {};\n        \n        var committeeNames=[];\n        var salutationValues = [];\n        var committeeSalutations = [];\n        \n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count9 = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n    \n        let counter_of_wakeel9 = 0;\n        let counter_of_ra2es9 = 0;\n        let counter_of_customer9 = 0;\n        let counter_of_products9 = 0;\n        let counter_of_serv9 = 0;\n    \n    for ( let i = 0 ; i < count9.length ; i++){\n            const temp = count9[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'){\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                \n            //   if((rowYearNumber+1 >= parseInt(fromYear) && (rowYearNumber+1 <= parseInt(toYear) ) || toYear === 1970)){\n            //     counter_of_wakeel9 = counter_of_wakeel9+1;\n              \n            // }\n            // if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n            //     counter_of_wakeel9 = counter_of_wakeel9 +1;\n            // }   \n            if(parseInt(fromYear) <=  rowYearNumber+1  && parseInt(toYear) == 1970 ){\n                counter_of_wakeel9 = counter_of_wakeel9+1;\n                comm_pay2.push(temp['committees']);\n                //  comms.temp['committees'] = temp['salutation'];\n                \n                committeeNames.push(temp['committees']);\n                salutationValues.push(temp['salutation']);\n                \n                var comm_name = temp['committees'];\n                \n                comms[comm_name] = temp['salutation'];\n            }  \n                \n                // counter_of_wakeel9 = counter_of_wakeel9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\"){\n                \n                   var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n            //       if((rowYearNumber+1 >= parseInt(fromYear2) && (rowYearNumber+1 <= parseInt(toYear2)) || toYear2=== 1970)){\n            //     counter_of_ra2es9 = counter_of_ra2es9+1;\n              \n            // }\n            \n            //  if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n            //     counter_of_ra2es9 = counter_of_ra2es9 +1;\n            // }\n            \n            if(parseInt(fromYear2) <=  rowYearNumber+1 && parseInt(toYear2) == 1970){\n                counter_of_ra2es9 = counter_of_ra2es9+1;\n                comm_pay2.push(temp['committees']);\n                \n                \n                 committeeNames.push(temp['committees']);\n                salutationValues.push(temp['salutation']);\n                \n                var comm_name2 = temp['committees'];\n                \n                comms[comm_name2] = temp['salutation'];\n              \n            }     \n               \n                \n                // counter_of_ra2es9 = counter_of_ra2es9+1;\n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear4) && ( rowYearNumber+1 <= parseInt(toYear4)) || toYear4 === 1970) ){\n            //     counter_of_serv9 = counter_of_serv9+1;\n              \n            // }\n            //   if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n            //     counter_of_products9 = counter_of_products9 +1;\n            // }\n                 \n            if( parseInt(fromYear4) <= rowYearNumber+1 && parseInt(toYear4) == 1970  ){\n                counter_of_serv9 = counter_of_serv9+1;\n                comm_pay2.push(temp['committees']);\n                \n                \n                 committeeNames.push(temp['committees']);\n                salutationValues.push(temp['salutation']);\n                \n                \n                        var comm_name3 = temp['committees'];\n                \n                comms[comm_name3] = temp['salutation'];\n              \n            }   \n                 \n                 \n                 \n                 \n                 \n                // counter_of_products9 = counter_of_products9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n            //     counter_of_customer9 = counter_of_customer9+1;\n              \n            // }\n               if(parseInt(fromYear3) <= rowYearNumber+1  && parseInt(toYear3) == 1970 ){\n                counter_of_customer9 = counter_of_customer9+1;\n                comm_pay2.push(temp['committees']);\n                \n                \n                 committeeNames.push(temp['committees']);\n                salutationValues.push(temp['salutation']);\n                \n                \n                var comm_name4 = temp['committees'];\n                \n                comms[comm_name4] = temp['salutation'];\n              \n            } \n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer9 = counter_of_customer9 +1;\n            // }\n            \n                // counter_of_customer = counter_of_customer+1;\n            }\n        }\n\n    console.log(\"all committees\");\n    console.log(comm_pay2);\n    console.log(\"all comms\");\n    console.log(comms);\n    \n    for (var i = 0; i < committeeNames.length; i++) {\n    // Create a new dictionary for each committee\n    var committeeDict = {};\n    \n    // Assign the committee name and its corresponding salutation value to the dictionary\n    committeeDict['committee'] = committeeNames[i];\n    committeeDict['salutation'] = salutationValues[i];\n    \n    // Add the dictionary to the array\n    committeeSalutations.push(committeeDict);\n}\n\nconsole.log(committeeSalutations);\nconsole.log(\"committe salutations\");\n    \n    \n    \n    \n    var result = {\n        'wakeel': counter_of_wakeel9,\n        'ra2ees': counter_of_ra2es9,\n        'prod': counter_of_customer9,\n        'serv':counter_of_serv9\n    }\n    \n    \n    return result;\n    \n    \n    \n    \n}\n\n\n\n\n\n\n\nfunction getComAndSal(customer,rowYearNumber){\n        var count9 = [];\n        let comm_pay2 = [];\n        var comms = {};\n        \n        var committeeNames=[];\n        var salutationValues = [];\n        var committeeSalutations = [];\n        \n        frappe.call({\n            async:false,\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Customer',\n                filters: { name: customer },\n                fieldname: 'custom_committees_you_would_like_to_join' \n            },\n            callback: function(r) {\n                count9 = r.message.custom_committees_you_would_like_to_join;\n                \n            }\n        });\n    \n        let counter_of_wakeel9 = 0;\n        let counter_of_ra2es9 = 0;\n        let counter_of_customer9 = 0;\n        let counter_of_products9 = 0;\n        let counter_of_serv9 = 0;\n    \n    for ( let i = 0 ; i < count9.length ; i++){\n            const temp = count9[i];\n            if ( temp['salutation'] === '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'){\n                \n                var from = new Date(temp['from']);\n                console.log('from' + from);\n                var to = new Date (temp['to']);\n                console.log('to' + to);\n                \n              console.log(\"HERE in if\");\n                var fromYear = from.getFullYear();\n                 console.log('fromYear' + fromYear);\n                var toYear = to.getFullYear();\n                 console.log('fromYear' + toYear);\n                \n            //   if((rowYearNumber+1 >= parseInt(fromYear) && (rowYearNumber+1 <= parseInt(toYear) ) || toYear === 1970)){\n            //     counter_of_wakeel9 = counter_of_wakeel9+1;\n              \n            // }\n            // if(parseInt(fromYear) >= rowYearNumber+1 && toYear === 1970){\n            //     counter_of_wakeel9 = counter_of_wakeel9 +1;\n            // }   \n            if(parseInt(fromYear) <=  rowYearNumber+1  && parseInt(toYear) == 1970 ){\n                counter_of_wakeel9 = counter_of_wakeel9+1;\n                comm_pay2.push(temp['committees']);\n                //  comms.temp['committees'] = temp['salutation'];\n                \n                committeeNames.push(temp['committees']);\n                salutationValues.push(temp['salutation']);\n                \n                var comm_name = temp['committees'];\n                \n                comms[comm_name] = temp['salutation'];\n            }  \n                \n                // counter_of_wakeel9 = counter_of_wakeel9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629\"){\n                \n                   var from2 = new Date(temp['from']);\n                console.log('from' + from2);\n                var to2 = new Date (temp['to']);\n                console.log('to' + to2);\n                 var fromYear2 = from2.getFullYear();\n                 console.log('fromYear' + fromYear2);\n                var toYear2 = to2.getFullYear();\n                 console.log('fromYear' + toYear2);\n                \n            //       if((rowYearNumber+1 >= parseInt(fromYear2) && (rowYearNumber+1 <= parseInt(toYear2)) || toYear2=== 1970)){\n            //     counter_of_ra2es9 = counter_of_ra2es9+1;\n              \n            // }\n            \n            //  if(parseInt(fromYear2) >= rowYearNumber+1 && toYear2 === 1970){\n            //     counter_of_ra2es9 = counter_of_ra2es9 +1;\n            // }\n            \n            if(parseInt(fromYear2) <=  rowYearNumber+1 && parseInt(toYear2) == 1970){\n                counter_of_ra2es9 = counter_of_ra2es9+1;\n                comm_pay2.push(temp['committees']);\n                \n                \n                 committeeNames.push(temp['committees']);\n                salutationValues.push(temp['salutation']);\n                \n                var comm_name2 = temp['committees'];\n                \n                comms[comm_name2] = temp['salutation'];\n              \n            }     \n               \n                \n                // counter_of_ra2es9 = counter_of_ra2es9+1;\n            }\n             if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u062e\u062f\u0645\u064a\u0629\"){\n                 \n                var from4 = new Date(temp['from']);\n                console.log('from' + from4);\n                var to4 = new Date (temp['to']);\n                console.log('to' + to4);\n                 var fromYear4 = from4.getFullYear();\n                 console.log('fromYear' + fromYear4);\n                var toYear4 = to4.getFullYear();\n                 console.log('fromYear' + toYear4);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear4) && ( rowYearNumber+1 <= parseInt(toYear4)) || toYear4 === 1970) ){\n            //     counter_of_serv9 = counter_of_serv9+1;\n              \n            // }\n            //   if(parseInt(fromYear4) >= rowYearNumber+1 && toYear4 === 1970){\n            //     counter_of_products9 = counter_of_products9 +1;\n            // }\n                 \n            if( parseInt(fromYear4) <= rowYearNumber+1 && parseInt(toYear4) == 1970  ){\n                counter_of_serv9 = counter_of_serv9+1;\n                comm_pay2.push(temp['committees']);\n                \n                \n                 committeeNames.push(temp['committees']);\n                salutationValues.push(temp['salutation']);\n                \n                \n                        var comm_name3 = temp['committees'];\n                \n                comms[comm_name3] = temp['salutation'];\n              \n            }   \n                 \n                 \n                 \n                 \n                 \n                // counter_of_products9 = counter_of_products9+1;\n            }\n            if ( temp['salutation'] === \"\u0639\u0636\u0648\u064a\u0629 \u0644\u062c\u0646\u0629 \u0633\u0644\u0639\u064a\u0629\"){\n                var from3 = new Date(temp['from']);\n                console.log('from' + from3);\n                var to3 = new Date (temp['to']);\n                console.log('to' + to3);\n                 var fromYear3 = from3.getFullYear();\n                 console.log('fromYear' + fromYear3);\n                var toYear3 = to3.getFullYear();\n                 console.log('fromYear' + toYear3);\n                \n            // if((rowYearNumber+1 >= parseInt(fromYear3) && (rowYearNumber+1 <= parseInt(toYear3)) || toYear3 === 1970)){\n            //     counter_of_customer9 = counter_of_customer9+1;\n              \n            // }\n               if(parseInt(fromYear3) <= rowYearNumber+1  && parseInt(toYear3) == 1970 ){\n                counter_of_customer9 = counter_of_customer9+1;\n                comm_pay2.push(temp['committees']);\n                \n                \n                 committeeNames.push(temp['committees']);\n                salutationValues.push(temp['salutation']);\n                \n                \n                var comm_name4 = temp['committees'];\n                \n                comms[comm_name4] = temp['salutation'];\n              \n            } \n            // if(parseInt(fromYear3) >= rowYearNumber+1 && toYear3 === 1970){\n            //     counter_of_customer9 = counter_of_customer9 +1;\n            // }\n            \n                // counter_of_customer = counter_of_customer+1;\n            }\n        }\n\n    console.log(\"all committees\");\n    console.log(comm_pay2);\n    console.log(\"all comms\");\n    console.log(comms);\n    \n    for (var i = 0; i < committeeNames.length; i++) {\n    // Create a new dictionary for each committee\n    var committeeDict = {};\n    \n    // Assign the committee name and its corresponding salutation value to the dictionary\n    committeeDict['committee'] = committeeNames[i];\n    committeeDict['salutation'] = salutationValues[i];\n    \n    // Add the dictionary to the array\n    committeeSalutations.push(committeeDict);\n}\n\nconsole.log(committeeSalutations);\nconsole.log(\"committe salutations\");\n    \n    \n    \n    \n    // var result = {\n    //     'wakeel': counter_of_wakeel9,\n    //     'ra2ees': counter_of_ra2es9,\n    //     'prod': counter_of_customer9,\n    //     'serv':counter_of_serv9\n    // }\n    \n    \n    return committeeSalutations;\n    \n    \n    \n    \n}\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 0,
  "modified": "2024-05-14 13:40:17.498078",
  "module": null,
  "name": "contact3",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\n    onload: function(frm) {\n        // Set filters on load\n        frm.set_query(\"authority\", \"custom_contacts\", function(doc, cdt, cdn) {\n            return {\n                filters: [\n                    ['parent_authority', '=', 'All Authority']\n                ]\n            };\n        });\n\n        frm.set_query(\"sector\", \"custom_contacts\", function(doc, cdt, cdn) {\n            let d = locals[cdt][cdn];\n            if (d.authority) {\n                return {\n                    filters: [\n                        ['parent_authority', '=', d.authority]\n                    ]\n                };\n            }else {\n                return {\n                    filters: []\n                }\n\t\t    }   \n        });\n\n        frm.set_query(\"center_management\", \"custom_contacts\", function(doc, cdt, cdn) {\n            let d = locals[cdt][cdn];\n            if (d.sector) {\n                return {\n                    filters: [\n                        ['parent_authority', '=', d.sector]\n                    ]\n                };\n            } else {\n                return {\n                    filters: []\n                };\n            }\n        });\n\n        frm.set_query(\"branch_management\", \"custom_contacts\", function(doc, cdt, cdn) {\n            let d = locals[cdt][cdn];\n            return {\n                filters: [\n                    ['parent_authority', '=', d.center_management]\n                ]\n            };\n        });\n    },\n\n    custom_get_contact: function(frm) {\n        let filter = '';\n        if(frm.doc.custom_contacts[0].branch_management) {\n            filter = frm.doc.custom_contacts[0].branch_management;\n        }else if(frm.doc.custom_contacts[0].center_management) {\n            filter = frm.doc.custom_contacts[0].center_management;\n        }else if(frm.doc.custom_contacts[0].sector){\n            filter = frm.doc.custom_contacts[0].sector;\n        }else if(frm.doc.custom_contacts[0].authority) {\n            filter = frm.doc.custom_contacts[0].authority;\n        }\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Contact\",\n                fields: ['*'],\n                filters:{'custom_authority' : filter}\n            },\n            callback: function(response) {\n                let msg = response.message;\n             \n                 console.log(\"getlist\",msg);\n                 for (let row of msg) {\n                    frappe.call({\n                        method: \"frappe.client.get\",\n                        args: {\n                            doctype: \"Contact\",\n                            name: row.name,\n                        },\n                        callback: function(r) {\n                            let contact  = r.message;\n               \n                             let phoneNos = r.message.phone_nos;\n                             let emails =r.message.email_ids;\n                             if(phoneNos.length >= emails.length) {\n                                 for(let pp of phoneNos) {\n                                     let child = frm.add_child(\"custom_the_contact\");\n                                     child.authority = contact.custom_authority;\n                                     child.contact = pp.phone;\n                                     if(pp.idx <= emails.length) {\n                                        child.email = emails[pp.idx - 1].email_id;\n                                     }\n                                 }\n                             }else if(emails.length >= phoneNos.length){\n                                  for(let ee of emails) {\n                                  let child = frm.add_child(\"custom_the_contact\");\n                                     child.authority = contact.custom_authority;\n                                     child.email = ee.email_id;\n                                     if(ee.idx <= phoneNos.length){\n                                        child.contact = phoneNos[ee.idx - 1].phone; \n                                     }\n                                  }\n                             }\n                            //////////////////////////////////\n                    refresh_field(\"custom_the_contact\");\n     \n                }\n            });\n        }\n    }\n});\n}\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 0,
  "modified": "2024-04-24 13:10:24.330582",
  "module": null,
  "name": "contact4",
  "script": "// frappe.ui.form.on('Authorities Generalization 2', {\n//     custom_get_contact: function(frm) {\n//         let filter = {};\n//         if (frm.doc.authorities_committees && frm.doc.authorities_committees[0].status === 'Active') {\n//             filter = {'custom_customer_status': 'Active'};\n//         }\n\n//         frappe.call({\n//             method: \"frappe.client.get_list\",\n//             args: {\n//                 doctype: \"Customer\",\n//                 fields: ['name', 'customer_primary_contact', 'custom_committees_you_would_like_to_join'],\n//                 filters: filter\n//             },\n//             callback: function(response) {\n//                 let customers = response.message;\n//                 for (let customer of customers) {\n//                     let committees = customer.custom_committees_you_would_like_to_join;\n//                     if (!committees) continue;  // Skip if no committees\n//                     let authorities_committees = frm.doc.authorities_committees || [];\n//                     let match = committees.some(committee => \n//                         authorities_committees.some(ac => ac.committee === committee.committees));\n\n//                     if (match) {\n//                         let child = frappe.model.add_child(frm.doc, \"Customer Newsletter\", \"customer_email\");\n//                         child.email = customer.customer_primary_contact;\n//                         frm.refresh_field(\"customer_email\");\n//                     }\n//                 }\n//             }\n//         });\n//     }\n// });\nfrappe.ui.form.on('Authorities Generalization 2', {\n    custom_get_contact: function(frm) {\n        let filter = {};\n        if (frm.doc.authorities_committees[0].status === 'Active') {\n            filter = {'custom_customer_status': 'Active'};\n        }\n\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Customer\",\n                fields: ['*'],\n                filters: filter\n            },\n            callback: function(response) {\n                console.log(\"Response from get_list:\", response);\n                let msg = response.message;\n                for (let row of msg) {\n                    //   let filter = {};\n                    //     if (frm.doc.authorities_committees[0].committee) {\n                    //         filter = {\n                    //             'custom_committees_you_would_like_to_join': frm.doc.authorities_committees[0].committee,\n                            \n                    //         };\n                    //     }\n                    frappe.call({\n                        method: \"frappe.client.get\",\n                        args: {\n                            doctype: \"Customer\",\n                            name: row.name,\n                            filters: filter\n                        },\n                        callback: function(response) {\n                            \n                            let data = response.message;\n                            let committees = data.custom_committees_you_would_like_to_join;\n                            let authorities_committees = frm.doc.authorities_committees;\n                            let authorities_committees_members = frm.doc.authorities_committees_members;\n                            console.log(\"daaaaaaaaaaaaaaaaaaaata\",data.custom_committees_you_would_like_to_join);\n                            \n                            for (let row of committees ){\n                                for (let pp of authorities_committees){\n                               \n                                if(row.committees === pp.committee){\n                         \n                                     frappe.new_doc(\"Customer Newsletter\", {\n                                              }).then(() => {\n                                            \n                                                  let child = cur_frm.add_child(\"customer_email\");\n                                                  child.email = data.customer_primary_contact;\n                                                  \n                                                \n                                                cur_frm.refresh_fields(\"customer_email\");\n                                              });\n                               \n                                }   }\n                            }\n                            \n                            \n                 \n                        }\n                    });\n                }\n            }\n        });\n    }\n});    \nfrappe.ui.form.on('Authorities Generalization 2', {    \n custom_get_contact: function(frm) {\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Customer\",\n                fields: ['*'],\n            },\n            callback: function(response) {\n                console.log(\"Response from get_list:\", response);\n                let msg = response.message;\n                for (let row of msg) {\n                    frappe.call({\n                        method: \"frappe.client.get\",\n                        args: {\n                            doctype: \"Customer\",\n                            name: row.name,\n                            // Assuming filter needs to be defined based on certain conditions\n                            // Make sure to define `filter` variable\n                        },\n                        callback: function(response) {\n                            let customer = response.message; // Changed variable name from `customers` to `customer`\n                            let authorities_committees_members = frm.doc.authorities_committees_members;\n                            console.log(\"customer data:\", customer.name); // Changed `data` to `customer`\n                            for (let mm of authorities_committees_members) {\n                                if (mm.member === customer.name ) {\n                                    frappe.new_doc(\"Customer Newsletter\").then(() => {\n                                        let child = cur_frm.add_child(\"customer_email\");\n                                        child.email = customer.customer_primary_contact;\n                                        cur_frm.refresh_fields(\"customer_email\");\n                                    });\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    }    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-04-08 11:29:44.756510",
  "module": null,
  "name": "Cheques Print Button After Submit",
  "script": "frappe.ui.form.on('Payment Entry', {\n\ton_submit:function(frm) {\n\t    \n\t    \n\t\t  let print_format = '\u0627\u064a\u0635\u0627\u0644 \u0627\u0633\u062a\u0644\u0627\u0645 \u0634\u064a\u0643';\n\t\t    if(frm.doc.mode_of_payment == '\u0627\u0648\u0631\u0627\u0642 \u062f\u0641\u0639' || frm.doc.mode_of_payment == '\u0627\u0648\u0631\u0627\u0642 \u0627\u0644\u0642\u0628\u0636'){\n\t\t     frm.add_custom_button(__('\u0625\u064a\u0635\u0627\u0644 \u0625\u0633\u062a\u0644\u0627\u0645 \u0634\u064a\u0643'), function() {\n                // var items = frm.doc.items;\n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    // frm.doc.letter_head\n                    \n                );\n\t\t     });\n\t\t    }\n\t\t   \n\t\t}\n\n// \t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-04-17 22:15:51.409536",
  "module": null,
  "name": "Council Entites",
  "script": "frappe.ui.form.on('Meeting', {\nbefore_save:function(frm){\n        \n//   if(frm.doc.workflow_state == 'Pending' ){      \n   var filter = {\n    'designation': ['in', ['\u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a', '\u0646\u0627\u0626\u0628 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a']]\n};\n        \n       if(frm.doc.custom_council_entity !== 1){ \n           \n           \n           \n          frappe.call({\n\t\t        method:\"frappe.client.get_list\",\n\t\t        args:{\n\t\t             doctype:\"Employee\",\n\t\t             filters: filter\n\t\t            \n\t\t        },\n\t\t        callback:function(r){\n\t\t          // console.log(`the invoice list are ${r.message}`);\n\t\t          console.log(`the invoice list are ${JSON.stringify(r.message)}`);\n\t\t          //invoices=JSON.stringify(r.message);\n\t\t          \n\t\t          var council = r.message;\n\t\t          console.log(council);\n\t\t          \n\t\t          \n\t\t         if(r.message && r.message.length>0)\n\t\t         {\n\t\t             console.log(r.message[0].name)\n\t\t             const invoice_name=r.message[0].name\n\t\t             \n\t\t         for(let row of council){    \n\t\t             \n\t\t             frappe.call({\n\t\t                 method:\"frappe.client.get\",\n\t\t                 args:{\n\t\t                     doctype:\"Employee\",\n\t\t                     name:row.name\n\t\t                 },\n\t\t                 callback:function(r){\n\t\t                  //   console.log(`the data is ${JSON.stringify(r.message)}`)\n\t\t                  //   console.log(r.message);\n\t\t                  //   console.log(`log is ${r.message.custom_log[0]}`)\n\t\t                     frm.add_child(\"council_entities\",{\n\t\t                         entity:r.message.name,\n\t\t                         designation:r.message.designation,\n\t\t                         email:r.message.personal_email,\n\t\t                         phone:r.message.cell_number\n\t\t                     })\n\t\t                     frm.refresh_field(\"council_entities\");\n\t\t                     frm.set_value('custom_council_entity', 1);\n\t\t                     \n\t\t                 }\n\t\t                 \n\t\t                 \n\t\t             })\n\t\t             \n\t\t          //  frm.refresh_field(\"council_entities\");\n                    // mina was here\n\t\t             \n\t\t         }\n\t\t         }\n\t\t          \n\n\t\t        }\n\t\t       \n\t\t    })\n        \n        \n        \n       }\n        \n//   }   \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 0,
  "modified": "2024-04-15 16:18:55.601062",
  "module": null,
  "name": "Send Mail Testing",
  "script": "frappe.ui.form.on('Meeting', {\n  refresh: function(frm) {\n    if(!frm.doc.__unsaved) {\n      frm.add_custom_button(__('Send Email'), function(){\n        frm.call(\"send_email\").then(() => {\n          cosnole.log(\"done\");\n        });\n      }, __(\"\"));\n    }\n  },\n//   get_customer_didnt_subscribe(frm) {\n//     frm.call(\"get_customers_didnt_subscribe\").then((r) => {\n//       let contacts = r.message;\n//       for (let contact of contacts) {\n//         cur_frm.add_child(\"customer_email\", {\n//           email: contact.email,\n//           customer_name: contact.name,\n//         });\n//       }\n//       cur_frm.refresh_fields();\n//     });\n//   }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-05-07 14:22:02.556163",
  "module": null,
  "name": "showand update customer -popup",
  "script": "frappe.listview_settings[\"Customer\"] = {\n    \"hide_name_column\": true,\n    \"add_fields\": [\"item_code\"],\n    \"button\": {\n        \"show\": function(doc) {\n            return '<i class=\"fa fa-edit\"></i> Show  & Update';\n        },\n        \"get_label\": function() {\n            return __('<i class=\"fa fa-edit\"></i> Show  & Update', null, \"Access\");\n        },\n        \"get_description\": function(doc) {\n            return __(\"Add/Edit \" + doc.name);\n        },\n        \"action\": function(doc) {\n            frappe.db.get_list('Customer', {\n                fields: ['customer_name'],\n            }).then(function(members) {\n                let d = new frappe.ui.Dialog({\n                    title: __('Show Member'),\n                    fields: [\n                        {\n                            label: 'customer',\n                            fieldname: 'customer',\n                            fieldtype: 'Link',\n                            options: 'Customer',\n                            reqd: 1,\n                        },\n                    ],\n                    primary_action_label: 'Fetch Contacts',\n                    primary_action(member){\n                        console.log(\"fetch\",member);     \n                        var data = d.get_values().customer;\n                        if (data) {\n                            frappe.set_route(\"Form\", \"Customer\", data);\n                        } else {\n                            frappe.msgprint(__(\"Please select a customer.\"));\n                        }\n                        d.hide();\n                     },\n            secondary_action_label:__('Update'),\n            secondary_action(member){\n                var data = d.get_values().customer;\n                 if (data) {\n                            frappe.set_route(\"Form\", \"Company Profile\", data);\n                        \n                        } else {\n                            frappe.msgprint(__(\"Please select a customer.\"));\n                        }\n                \n            }\n                 \n                });\n                d.show();\n            }\n            \n            );\n        }\n    },\n\n  };\n\n\n\n\n\n        ",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-04-18 09:22:35.127055",
  "module": null,
  "name": "showand update customer -popup 2",
  "script": "frappe.listview_settings[\"Customer\"] = {\n    \"hide_name_column\": true,\n    \"add_fields\": [\"item_code\"],\n    \"button\": {\n        \"show\": function(doc) {\n            return '<i class=\"fa fa-edit\"></i> Show  & Update';\n        },\n        \"get_label\": function() {\n            return __('<i class=\"fa fa-edit\"></i> Show  & Update', null, \"Access\");\n        },\n        \"get_description\": function(doc) {\n            return __(\"Add/Edit \" + doc.name);\n        },\n        \"action\": function(doc) {\n            frappe.db.get_list('Customer', {\n                fields: ['customer_name'],\n            }).then(function(members) {\n                let d = new frappe.ui.Dialog({\n                    title: __('Show Member'),\n                    // fields: [\n                 \n                    // ],\n                    primary_action_label: 'Show',\n                    primary_action(member){\n                        console.log(\"fetch\",member);     \n                        var data = d.get_values().customer;\n                        // var data = listview.get_checked_items();\n                        if (data) {\n                            frappe.set_route(\"Form\", \"Customer\", doc.name);\n                        } else {\n                            frappe.msgprint(__(\"Please select a customer.\"));\n                        }\n                        d.hide();\n                     },\n            secondary_action_label:__('Update'),\n            secondary_action(member){\n                var data = d.get_values().customer;\n                 if (data) {\n                            frappe.set_route(\"Form\", \"Company Profile\", data);\n                        \n                        } else {\n                            frappe.msgprint(__(\"Please select a customer.\"));\n                        }\n                \n            }\n                 \n                });\n                d.show();\n            }\n            \n            );\n        }\n    },\n\n  };\n\n\n\n\n\n        ",
  "view": "List"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2024-05-14 09:29:33.547384",
  "module": null,
  "name": "3",
  "script": "frappe.listview_settings[\"Customer\"] = {\n    refresh: function(listview) {\n\t    $(\".indicator-pill.blue\").hide();\n\n$(document).ready(function() {\n    $(\".list-row-head:contains('Status')\").each(function() {\n        $(this).html(function(_, html) {\n            return html.replace(/(Status)/g, '<span style=\"display:none\">$1</span>');\n        });\n    });\n});\n\n\t},\n    \n    \n    \n    \"hide_name_column\": false,\n    \"add_fields\": [\"show\"],\n    \"button\": {\n        \"show\": function(doc) {\n            return '<i class=\"fa fa-eye\"></i> Show';\n        },\n        \"get_label\": function() {\n            return __('<i class=\"fa fa-eye\"></i> Show','<i class=\"fa fa-eye\"></i> update', null, \"Access\");\n        },\n        \"get_description\": function(doc) {\n            return __(\"Show Member \" + doc.customer_name);\n        },\n        \"action\": function(doc) {\n            var data = doc.name;\n            frappe.set_route(\"Form\", \"Company Profile\", data);\n        }\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 1,
  "modified": "2024-05-01 12:03:27.914037",
  "module": null,
  "name": "Pie Chart MOM",
  "script": "\n\n// frappe.ui.form.on('Minutes Of Meeting', {\n//     refresh: function(frm) {\n//         let books = frm.doc.committee_member;\n//         let absentCount = 0;\n//         let presentCount = 0;\n//         for (let row of books) {\n//             if (row.meeting_status === \"Absent\") {\n//                 absentCount++;\n//             } else if (row.meeting_status === \"Present\") {\n//                 presentCount++;\n//             }\n//         }\n\n//         console.log(\"Count of Absent:\", absentCount);\n//         console.log(\"Count of Present:\", presentCount);\n\n//         const chartData = {\n//             labels: [\"Absent\", \"Present\"],\n//             datasets: [\n//                 {\n//                     name: \"Attendance\",\n//                     type: \"pie\",\n//                     values: [absentCount, presentCount]\n//                 }\n//             ]\n//         };\n\n//         const chartHtml = `\n//             <div class=\"title\">Member Attendance</div>\n//             <div id=\"chart\"></div>\n//         `;\n\n//         frm.fields_dict.custom_pie_chart.$wrapper.html(chartHtml);\n\n//         // Check if the chart container exists in the DOM\n//         if (document.getElementById('chart1')) {\n//             // Initialize the chart\n//             const chart = new frappe.Chart(\"#chart1\", {\n//                 data: chartData,\n//                 type: 'pie',\n//                 height: 300,\n//                 colors: [\"red\", \"green\"]\n//             });\n//         } else {\n//             // If the container doesn't exist, wait for the DOM to be ready\n//             document.addEventListener('DOMContentLoaded', (event) => {\n//                 const chart = new frappe.Chart(\"#chart1\", {\n//                     data: chartData,\n//                     type: 'pie',\n//                     height: 300,\n//                     colors: [\"red\", \"green\"]\n//                 });\n//             });\n//         }\n        \n//     /////////////////////////////helloe\n//      let books2 = frm.doc.meeting_agenda;\n//     let absentCount2 = 0;\n//     let presentCount2 = 0;\n//     for (let row of books2) {\n//       if (row.status === \"Completed\") {\n//         absentCount2++;\n//       } else if (row.status === \"Not Completed\") {\n//         presentCount2++;\n//       }\n//     }\n\n//     console.log(\"Count of Completed:\", absentCount2);\n//     console.log(\"Count of Not Completed:\", presentCount2);\n\n//     const chartData2 = {\n//       labels: [\"Complete\", \"Incomplete\"],\n//       datasets: [\n//         {\n//           name: \"Agenda\",\n//           type: \"pie\",\n//           values: [absentCount2, presentCount2],\n//         },\n//       ],\n//     };\n\n//     const chartHtml2 = `\n//     <div class=\"title\">Member Agenda</div>\n//     <div id=\"chart\"></div>\n// `;\n\n//     frm.fields_dict.custom_agenda_pie.$wrapper.html(chartHtml2);\n\n//     if (document.getElementById(\"chart\")) {\n//       // Initialize the chart\n//       const chart = new frappe.Chart(\"#chart\", {\n//         data: chartData2,\n//         type: \"pie\",\n//         height: 300,\n//         colors: [\"red\", \"green\"],\n//       });\n//     } else {\n//       // If the container doesn't exist, wait for the DOM to be ready\n//       document.addEventListener(\"DOMContentLoaded\", (event) => {\n//         const chart = new frappe.Chart(\"#chart\", {\n//           data: chartData,\n//           type: \"pie\",\n//           height: 300,\n//           colors: [\"red\", \"green\"],\n//         });\n//       });\n//     }\n//     }\n// });\n\nfrappe.ui.form.on('Minutes Of Meeting', {\n    refresh: function(frm) {\n        let books = frm.doc.committee_member;\n        let absentCount = 0;\n        let presentCount = 0;\n        for (let row of books) {\n            if (row.meeting_status === \"Absent\") {\n                absentCount++;\n            } else if (row.meeting_status === \"Present\") {\n                presentCount++;\n            }\n        }\n\n        console.log(\"Count of Absent:\", absentCount);\n        console.log(\"Count of Present:\", presentCount);\n\n        const chartData = {\n            labels: [\"Absent\", \"Present\"],\n            datasets: [\n                {\n                    name: \"Attendance\",\n                    type: \"pie\",\n                    values: [absentCount, presentCount]\n                }\n            ]\n        };\n\n        const chartHtml = `\n            <div class=\"title\">Member Attendance</div>\n            <div id=\"chartAttendance\"></div>\n        `;\n\n        frm.fields_dict.custom_pie_chart.$wrapper.html(chartHtml);\n\n        // Check if the chart container exists in the DOM\n        if (document.getElementById('chartAttendance')) {\n            // Initialize the chart\n            const chart = new frappe.Chart(\"#chartAttendance\", {\n                data: chartData,\n                type: 'pie',\n                height: 300,\n                colors: [\"red\", \"green\"]\n            });\n        } else {\n            // If the container doesn't exist, wait for the DOM to be ready\n            document.addEventListener('DOMContentLoaded', (event) => {\n                const chart = new frappe.Chart(\"#chartAttendance\", {\n                    data: chartData,\n                    type: 'pie',\n                    height: 300,\n                    colors: [\"red\", \"green\"]\n                });\n            });\n        }\n        \n        /////////////////////////////helloe\n        let books2 = frm.doc.meeting_agenda;\n        let absentCount2 = 0;\n        let presentCount2 = 0;\n        for (let row of books2) {\n            if (row.status === \"Completed\") {\n                absentCount2++;\n            } else if (row.status === \"Not Completed\") {\n                presentCount2++;\n            }\n        }\n\n        console.log(\"Count of Completed:\", absentCount2);\n        console.log(\"Count of Not Completed:\", presentCount2);\n\n        const chartData2 = {\n            labels: [\"Complete\", \"Incomplete\"],\n            datasets: [\n                {\n                    name: \"Agenda\",\n                    type: \"pie\",\n                    values: [absentCount2, presentCount2],\n                },\n            ],\n        };\n\n        const chartHtml2 = `\n            <div class=\"title\">Member Agenda</div>\n            <div id=\"chartAgenda\"></div>\n        `;\n\n        frm.fields_dict.custom_agenda_pie.$wrapper.html(chartHtml2);\n\n        if (document.getElementById(\"chartAgenda\")) {\n            // Initialize the chart\n            const chart = new frappe.Chart(\"#chartAgenda\", {\n                data: chartData2,\n                type: \"pie\",\n                height: 300,\n                colors: [\"green\", \"red\"],\n            });\n        } else {\n            // If the container doesn't exist, wait for the DOM to be ready\n            document.addEventListener(\"DOMContentLoaded\", (event) => {\n                const chart = new frappe.Chart(\"#chartAgenda\", {\n                    data: chartData,\n                    type: \"pie\",\n                    height: 300,\n                    colors: [\"green\", \"red\"],\n                });\n            });\n        }\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue Assignment",
  "enabled": 1,
  "modified": "2024-04-18 11:18:56.873555",
  "module": null,
  "name": "click event to the plus connection button",
  "script": "\nfrappe.ui.form.on('Issue Assignment', {\n    onload: function(frm) {\n        // Bind a click event handler to the connection link button\n        frm.page.wrapper.on('click', '[data-doctype=\"Issue\"].btn.icon-btn', function() {\n            console.log(\"Connection link button clicked\");\n            let docfield = frm.doc.issue;\n                   console.log(docfield);\n            //   frm.set_value('status', 'Open'); \n            // Your additional code here\n                 frappe.call({\n                        method: \"frappe.client.get\",\n                        args: {\n                            doctype: \"Issue\",\n                            name: docfield\n                            \n                        },\n                        callback: function(response) {\n                             \n                             let mohamed = response.message.name;\n                              console.log(\"re\",response);\n                             console.log(\"mohamed\",response.message.name);\n                             let subject = response.message.subject;\n                             let issue = response.message;\n                             let links = response.message.custom_links;\n                              let dc = frappe.new_doc(\"Issue\", {\n                                  'subject':subject,\n                                  \n                              }).then(() => {\n                       \n                                    // console.log(\"links:\", links);\n                                    // for(let row of links){\n                                        // console.log(\"Subjecsdsddddddddddddddddd\");\n                                        let child = cur_frm.add_child('custom_links');\n                                        child.link_name = mohamed;\n                                        cur_frm.refresh_fields('custom_links');\n                                        \n                                    // }\n                                });\n                                // let child = cur_frm.add_child('custom_links');\n                                // child.link_name = 'mohamed';\n                                // cur_frm.refresh_fields('custom_links');\n                               \n                             \n                        }});\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-04-18 13:39:27.449290",
  "module": null,
  "name": "custom button change issued to incoming for issue",
  "script": "frappe.ui.form.on('Issue', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tlet dest = frm.doc.custom_destination;\n\t\tlet type = frm.doc.custom_incoming_type;\n\t\tconsole.log(\"out\",dest);\n\t\tif(dest === \"Issued\" && type === \"internal\"){\n\t\t    cur_frm.add_custom_button(__(\"Incoming Internal\"),function(){\n\t\t           let dc = frappe.new_doc(\"Issue\", {\n                                  'custom_destination':\"Incoming\",\n                                  'custom_incoming_type':\"internal\"\n                              });\n\t\t        \n\t\t    });\n\t\t     \n\t\t    \n\t\t}\n\t\tif(dest === \"Issued\" && type === \"external\"){\n\t    \tcur_frm.add_custom_button(__(\"Incoming External\"),function(){\n\t\t            let dc = frappe.new_doc(\"Issue\", {\n                                  'custom_destination':\"Incoming\",\n                                  'custom_incoming_type':\"external\"\n                              });\n\t\t        \n\t\t    });\n\t\t}\n\t\tif(dest === \"Incoming\" && type === \"external\"){\n\t    \tcur_frm.add_custom_button(__(\"Issued External\"),function(){\n\t\t            let dc = frappe.new_doc(\"Issue\", {\n                                  'custom_destination':\"Issued\",\n                                  'custom_incoming_type':\"external\"\n                              });\n\t\t        \n\t\t    });\n\t\t}\n\t\tif(dest === \"Incoming\" && type === \"internal\"){\n\t    \tcur_frm.add_custom_button(__(\"Issued Internal\"),function(){\n\t\t            let dc = frappe.new_doc(\"Issue\", {\n                                  'custom_destination':\"Issued\",\n                                  'custom_incoming_type':\"internal\"\n                              });\n\t\t        \n\t\t    });\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 0,
  "modified": "2024-04-24 18:14:34.354580",
  "module": null,
  "name": "Pie Chart MOM 2 Agenda",
  "script": "\n\nfrappe.ui.form.on(\"Minutes Of Meeting\", {\n  refresh: function (frm) {\n    let books2 = frm.doc.meeting_agenda;\n    let absentCount2 = 0;\n    let presentCount2 = 0;\n    for (let row of books2) {\n      if (row.status === \"Completed\") {\n        absentCount2++;\n      } else if (row.status === \"Not Completed\") {\n        presentCount2++;\n      }\n    }\n\n    console.log(\"Count of Completed:\", absentCount2);\n    console.log(\"Count of Not Completed:\", presentCount2);\n\n    const chartData = {\n      labels: [\"Complete\", \"Incomplete\"],\n      datasets: [\n        {\n          name: \"Agenda\",\n          type: \"pie\",\n          values: [absentCount2, presentCount2],\n        },\n      ],\n    };\n\n    const chartHtml = `\n    <div class=\"title\">Member Agenda</div>\n    <div id=\"chart\"></div>\n`;\n\n    frm.fields_dict.custom_agenda_pie.$wrapper.html(chartHtml);\n\n    if (document.getElementById(\"chart\")) {\n      // Initialize the chart\n      const chart = new frappe.Chart(\"#chart\", {\n        data: chartData,\n        type: \"pie\",\n        height: 300,\n        colors: [\"red\", \"green\"],\n      });\n    } else {\n      // If the container doesn't exist, wait for the DOM to be ready\n      document.addEventListener(\"DOMContentLoaded\", (event) => {\n        const chart = new frappe.Chart(\"#chart\", {\n          data: chartData,\n          type: \"pie\",\n          height: 300,\n          colors: [\"red\", \"green\"],\n        });\n      });\n    }\n  },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 0,
  "modified": "2024-04-21 17:08:55.911921",
  "module": null,
  "name": "Original Dup MOM",
  "script": "frappe.ui.form.on('Minutes Of Meeting', {\n    refresh: function(frm) {\n        let books = cur_frm.doc.committee_member;\n        let absentCount = 0;\n        let presentCount = 0;\n        for (let row of books) {\n            if (row.meeting_status === \"Absent\") {\n                absentCount++;\n            } else if (row.meeting_status === \"Present\") {\n                presentCount++;\n            }\n        }\n\n        console.log(\"Count of Absent:\", absentCount);\n        console.log(\"Count of Present:\", presentCount);\n        \n        // Remaining code for chart generation...\n\n\n        \n       \n        const script = `<script src=\"https://cdn.jsdelivr.net/npm/frappe-charts@1.2.4/dist/frappe-charts.min.iife.js\"></script>`;\n\n        const data = {\n            labels: [\"Absent\", \"Present\"],\n            datasets: [\n                {\n                    name: \"Some Data\", type: \"pie\", // Change type to 'pie'\n                    values: [absentCount,presentCount]\n                }\n            ]\n        };\n\n        frm.fields_dict.custom_pie_chart.$wrapper.html(`\n            <html>\n            <head>\n                ${script}\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                <style>\n                    .title {\n                        font-size: 20px;\n                        text-align: center;\n                    }\n                    #chart {\n                        width: 100%;\n                        max-width: 700px;\n                        margin: 0 auto;\n                    }\n                </style>\n            </head>\n            <body>\n                <div class=\"title\">My Awesome Pie Chart</div>\n                <div id=\"chart\"></div>\n\n                <script>\n                    const data = ${JSON.stringify(data)};\n                    const chart = new frappe.Chart(\"#chart\", {\n                      \n                        data: data,\n                        type: 'pie', // Change chart type to 'pie'\n                        height: 300,\n                        colors: [\"red\", \"green\"]\n                    });\n                </script>\n            </body>\n            </html>\n        `);\n        \n    }\n});       \n\n\n\n\n\n\n\n\n\n// frappe.ui.form.on('Minutes Of Meeting', {\n//     refresh: function(frm) {\n        \n//         var pie = frm.doc.custom_pie_chart;\n//         const xValues = [\"Italy\", \"France\", \"Spain\", \"USA\", \"Argentina\"];\n//         const yValues = [55, 49, 44, 24, 15];\n//         const barColors = [\"red\", \"green\",\"blue\",\"orange\",\"brown\"];\n//         const script = `<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\"></script>`;\n\n        \n//         let chart = frappe.Chart(\"myChart\", {\n//           type: \"pie\",\n//           data: {\n//             labels: xValues,\n//             datasets: [{\n//               backgroundColor: barColors,\n//               data: yValues\n//             }]\n//           },\n//           options: {\n//             title: {\n//               display: true,\n//               text: \"World Wide Wine Production\"\n//             }\n//           }\n//         });\n        \n//         frm.fields_dict.custom_pie_chart.$wrapper.html(`\n        \n\n//         <html>\n//         <head>\n//         ${script}\n//         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n//         <style>\n        \n//         .title{\n//             font-size: 20px;\n//             text-align: center;\n//         }\n        \n//         </style>\n//         </head>\n//         <body>\n        \n//         <p>${chart}</p>\n        \n//         </body>\n//         </html>\n            \n                \n//                 `);\n                \n//             }\n//         });\n        \n                \n        \n// //         console.log(\"Filter Here\");\n// //         if (frm.doc.custom_bundle_ === '\u0631\u0633\u0648\u0645 \u0637\u0644\u0628 \u062c\u062f\u064a\u062f'){  \n// //             console.log(\"We are Here\");\n// //          frm.set_query(\"customer\", function() {\n        \n// //     \t\t\treturn {\n// //     \t\t\t\tfilters: [\n// //     \t\t\t\t\t['Customer','custom_customer_status','=', 'Requested']\n// //     \t\t\t\t]\n// //     \t\t\t};\n              \n// // \t\t});\n// // }",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 0,
  "modified": "2024-04-21 19:38:11.723465",
  "module": null,
  "name": "Merge",
  "script": "frappe.ui.form.on('Minutes Of Meeting', {\n    refresh: function(frm) {\n        let books = cur_frm.doc.committee_member;\n        let absentCount = 0;\n        let presentCount = 0;\n        for (let row of books) {\n            if (row.meeting_status === \"Absent\") {\n                absentCount++;\n            } else if (row.meeting_status === \"Present\") {\n                presentCount++;\n            }\n        }\n\n        console.log(\"Count of Absent:\", absentCount);\n        console.log(\"Count of Present:\", presentCount);\n        \n        let books2 = cur_frm.doc.meeting_agenda;\n        let absentCount2 = 0;\n        let presentCount2 = 0;\n        for (let row of books2) {\n            if (row.status === \"Completed\") {\n                absentCount2++;\n            } else if (row.status === \"Not Completed\") {\n                presentCount2++;\n            }\n        }\n\n        console.log(\"Count of Completed:\", absentCount2);\n        console.log(\"Count of Not Completed:\", presentCount2);\n        \n        const script = `<script src=\"https://cdn.jsdelivr.net/npm/frappe-charts@1.2.4/dist/frappe-charts.min.iife.js\"></script>`;\n\n        const data = {\n            labels: [\"Absent\", \"Present\"],\n            datasets: [\n                {\n                    name: \"Meeting Status\", type: \"pie\",\n                    values: [absentCount, presentCount]\n                }\n            ]\n        };\n\n        const meetingData2 = {\n            labels: [\"Completed\", \"Not Completed\"],\n            datasets: [\n                {\n                    name: \"Agenda Status\", type: \"pie\",\n                    values: [absentCount2, presentCount2]\n                }\n            ]\n        };\n\n        frm.fields_dict.custom_pie_chart.$wrapper.html(`\n            <html>\n            <head>\n                ${script}\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                <style>\n                    .container {\n                        display: flex;\n                        justify-content: space-around;\n                        flex-wrap: wrap;\n                    }\n                    .chart-container {\n                        width: 45%;\n                        margin: 10px;\n                    }\n                    .title {\n                        font-size: 20px;\n                        text-align: center;\n                    }\n                    .chart {\n                        width: 100%;\n                        max-width: 350px;\n                        margin: 0 auto;\n                    }\n                </style>\n            </head>\n            <body>\n                <div class=\"container\">\n                    <div class=\"chart-container\">\n                        <div class=\"title\">Meeting Status</div>\n                        <div class=\"chart\" id=\"chart1\"></div>\n                    </div>\n                    <div class=\"chart-container\">\n                        <div class=\"title\">Meeting Agenda</div>\n                        <div class=\"chart\" id=\"chart2\"></div>\n                    </div>\n                </div>\n\n                <script>\n                    const data = ${JSON.stringify(data)};\n                    const chart1 = new frappe.Chart(\"#chart1\", {\n                        data: data,\n                        type: 'pie',\n                        height: 300,\n                        colors: [\"red\", \"green\"]\n                    });\n\n                    const data2 = ${JSON.stringify(meetingData2)};\n                    const chart2 = new frappe.Chart(\"#chart2\", {\n                        data: data2,\n                        type: 'pie',\n                        height: 300,\n                        colors: [\"blue\", \"orange\"]\n                    });\n                </script>\n            </body>\n            </html>\n        `);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 1,
  "modified": "2024-04-26 00:28:02.217396",
  "module": null,
  "name": "popup -btn get contacts2",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\n    refresh: function (frm) {\n        frm.add_custom_button(__(\"Contact Of Authority\"), function() {\n            var d = new frappe.ui.Dialog({\n                title: __('Advanced Search Contacts Of Authority'),\n                fields: [\n                    {\n                        fieldname: \"authority\",\n                        fieldtype: \"Link\",\n                        label: __(\"Authority\"),\n                        options: \"Authority\",\n                        get_query: function () {\n                            return {\n                                filters: [\n                                    ['parent_authority', '=', '\u0627\u0644\u062c\u0647\u0627\u062a']\n                                ]\n                            };\n                        }\n                    },\n                    {\n                        fieldname: \"sector\",\n                        fieldtype: \"Link\",\n                        label: __(\"Sector\"),\n                        options: \"Authority\",\n                        get_query: function () {\n                            let authority = d.get_value('authority');\n                             if (authority) {\n                                 return {\n                                        filters: [\n                                            ['parent_authority', '=', authority]\n                                        ]\n                                         };\n                            }\n\n                        }\n                    },\n                    {\n                        fieldname: \"center_management\",\n                        fieldtype: \"Link\",\n                        label: __(\"Center Management\"),\n                        options: \"Authority\",\n                        reqd: 0,\n                        get_query: function () {\n                            let sector = d.get_values().sector;\n                            if (sector) {\n                                return {\n                                    filters: [\n                                        ['parent_authority', '=', sector]\n                                    ]\n                                };\n                            } \n                        }\n                    },\n                    {\n                        fieldname: \"branch_management\",\n                        fieldtype: \"Link\",\n                        label: __(\"Branch Management\"),\n                        options: \"Authority\",\n                        get_query: function () {\n                            let center_management = d.get_values().center_management;;\n                            if (center_management) {\n                                return {\n                                    filters: [\n                                        ['parent_authority', '=', center_management]\n                                    ]\n                                };\n                            }\n                        }\n                    },\n                    {\n                        fieldtype: \"Table\",\n                        fieldname: 'contact_tab',\n                        label: __(\"Table Contact\"),\n                        fields: [\n                             {\n                                fieldtype: \"Check\",\n                                fieldname: \"select\",\n                                label: __(\"Select\"),\n                                in_list_view: 1\n                            },\n                            {\n                                label: \"Authority\",\n                                fieldtype: \"Data\",\n                                fieldname: \"authority\",\n                                in_list_view: 1\n                            },\n                            {\n                                label: 'Phone',\n                                fieldtype: \"Data\",\n                                fieldname: \"phone\",\n                                in_list_view: 1\n                            },\n                            {\n                                label: \"Email\",\n                                fieldtype: \"Data\",\n                                fieldname: \"email\",\n                                in_list_view: 1\n                            }\n                        ]\n                    },\n                    \n                ],\n                primary_action_label: __('Search'),\n                primary_action: function () {\n                    var val = d.get_values();\n                    var fil = val.branch_management || val.center_management || val.sector || val.authority;\n                    searchContact(fil);\n                },\n               secondary_action_label: __('Append to Table'),\n                secondary_action: function () {\n                    console.log(d.get_values().contact_tab);\n                    //  const data = $JSON.stringify(data)\n                    let contactTableData = d.get_values().contact_tab;\n                    for (let row of contactTableData) {\n                       if (row.select) {\n                            let child = frm.add_child(\"custom_the_contact\");\n                            child.authority = row.authority;\n                            child.contact = row.phone;\n                            child.email = row.email;\n                            refresh_field(\"custom_the_contact\");\n                             console.log(row.__checked);\n                              console.log(row.email);\n                               console.log(row.phone);\n                           d.hide();\n                       }\n                     }\n                                \n                },\n                size: 'large',\n\n            });\n            d.show();\n\n            function searchContact(fil) {\n                frappe.call({\n                    method: \"frappe.client.get_list\",\n                    args: {\n                        doctype: \"Contact\",\n                        fields: ['*'],\n                        filters: { 'custom_authority': fil }\n                    },\n                    callback: function(response) {\n                        let msg = response.message;\n                        let html = '';\n                        for (let row of msg) {\n                            frappe.call({\n                                method: \"frappe.client.get\",\n                                args: {\n                                    doctype: \"Contact\",\n                                    name: row.name,\n                                },\n                                callback: function(r) {\n                                      \n                                  let contact = r.message;\n                                  let phoneNos = contact.phone_nos;\n                                  let emails = contact.email_ids;\n                                  let authority = contact.custom_authority;\n                                  // Update the table in the dialog\n                                  if (d.fields_dict.contact_tab.df) {\n                                      if (!d.fields_dict.contact_tab.df.data) {\n                                          d.fields_dict.contact_tab.df.data = [];\n                                      }\n                                   \n                                  }\n                                   if (phoneNos.length >= emails.length) {\n                                        for (let pp of phoneNos) {\n                                            d.fields_dict.contact_tab.df.data.push({\n                                                name: contact.name,\n                                                authority: authority,\n                                                phone: pp.phone,\n                                                email: (pp.idx <= emails.length) ? emails[pp.idx - 1].email_id :'',\n                                            });\n                                        }\n                                    } else if (emails.length >= phoneNos.length) {\n                                        for (let ee of emails) {\n                                            d.fields_dict.contact_tab.df.data.push({\n                                                name: contact.name,\n                                                authority: authority,\n                                                phone: (ee.idx <= phoneNos.length) ? phoneNos[ee.idx - 1].phone : '',\n                                                email: ee.email_id\n                                            });\n                                        }\n                                    }\n                                    d.fields_dict.contact_tab.grid.refresh();\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Member Export Volume Update",
  "enabled": 1,
  "modified": "2024-04-22 13:57:52.632278",
  "module": null,
  "name": "Update Member Product Volume",
  "script": "frappe.ui.form.on('Member Export Volume Update', {\n\tupdate_member_product_volume:function(frm){\n\t    \n\t    \n\t    \t\tfrappe.call({\n                async:false,\n                method: 'barcode_aec.update_customer_products.functiongdidaa',\n                args: {\n            },\n            callback: function(r) {\n                    // msgprint(\"Updated\");\n                }\n            });\n\t    \n\t   frm.set_value('last_update_member_product_volume',frappe.datetime.now_datetime());\n\n\t    \n\t    \n\t}\n})\n\n\n\n//update_customer_products\n//update_products",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 0,
  "modified": "2024-04-23 16:37:01.847318",
  "module": null,
  "name": "test authorirty",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 0,
  "modified": "2024-05-09 08:52:32.753502",
  "module": null,
  "name": "contact 3 in 1",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Sent to NewsLetters'), function() {\r\n             let totalCalls = 3;\r\n        frappe.show_progress(\"Getting Contacts..\", 90, 100, \"Please wait\");\r\n           if (!frm.doc.authorities_committees) {\r\n                my_second_full(frm, totalCalls);\r\n                my_third(frm, totalCalls);\r\n            } else if (!frm.doc.authorities_committees_members) {\r\n                my_full(frm, totalCalls);\r\n                my_third(frm, totalCalls);\r\n            } else if (!frm.doc.custom_the_contact) {\r\n                my_second_full(frm, totalCalls);\r\n                my_full(frm, totalCalls);\r\n            } else {\r\n                my_third(frm, totalCalls);\r\n                my_second_full(frm, totalCalls);\r\n                my_full(frm, totalCalls);\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n\r\n\r\nfunction my_full(frm, totalCalls) {\r\n    let filter = {};\r\n    let authorities_committees = frm.doc.authorities_committees;\r\n    let emailes = []; // Declare emails array outside to make it accessible to both functions\r\n    let emos =[];\r\n    for (let AC of authorities_committees) {\r\n        if (AC.status === 'Active') {\r\n            let filter = {'custom_customer_status': 'Active'};\r\n            let filter2 = AC.committee;\r\n            // console.log(\"filter2\",filter2);\r\n            // console.log(\"is active\",AC.status === 'Active');\r\n            frappe.call({\r\n                \r\n                method: \"frappe.client.get_list\",\r\n                args: {\r\n                    doctype: \"Customer\",\r\n                    limit_page_length:5000,\r\n                    fields: ['*'],\r\n                    filters: {'custom_customer_status':'Active'}\r\n                },\r\n                callback: function(response) {\r\n                    let customers = response.message;\r\n                    \r\n                    // console.log(\"customers\",customers.length);\r\n                    \r\n                    for (let customer of customers) {\r\n                        // console.log(\"MY22\",customer);\r\n                        let name1 = customer.name;\r\n                        // console.log(\"memo\",customer.name);  \r\n                        let memo = customer.custom_email;\r\n                        frappe.call({\r\n                            method: \"frappe.client.get\",\r\n                            args: {\r\n                                doctype: \"Customer\",\r\n                                name: name1\r\n                            },\r\n                            callback: function(response) {\r\n                                let cus = response.message;\r\n                                let zik =[];\r\n                                let committees = cus.custom_committees_you_would_like_to_join;\r\n                                for (let committee of committees) {\r\n                                    zik.push(committee);\r\n                                     if (committee.committees === filter2 && memo !== null) {\r\n                                        \r\n                                        emailes.push(memo);      \r\n                                     }\r\n                                    \r\n                                }\r\n                                            \r\n                                    \r\n                                \r\n                            }\r\n                        });\r\n                    }\r\n                    \r\n                                        \r\n                    \r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // After all emails are collected, create the newsletter\r\n    console.log(\"emos\",emos);\r\n    console.log(\"emails1\",emailes);\r\n    console.log(\"length\",emailes.length);\r\n    frappe.new_doc(\"Customer Newsletter\").then(() => {\r\n                                                        for (let email of emailes){\r\n                                                        let child = cur_frm.add_child(\"customer_email\");\r\n                                                        child.email = email;\r\n                                                        cur_frm.refresh_fields(\"customer_email\");                                                                        \r\n                                                  } \r\n                           frappe.hide_progress();\r\n                    });\r\nconsole.log(\"function1\");\r\n}\r\n\r\n\r\n\r\nfunction my_second_full(frm, totalCalls) {\r\n    let authorities_committees_members = frm.doc.authorities_committees_members;\r\n    let emaills = []; // Define emaills array outside of loops\r\n\r\n    for (let ACM of authorities_committees_members) {\r\n        let filter3 = ACM.committee;\r\n\r\n        frappe.call({\r\n            async: true,\r\n            method: \"frappe.client.get_list\",\r\n            args: {\r\n                doctype: \"Customer\",\r\n                limit_page_length: 5000,\r\n                fields: ['*'],\r\n                filters: {'custom_customer_status': 'Active'}\r\n            },\r\n            callback: function(response) {\r\n                let customers = response.message;\r\n\r\n                for (let customer of customers) {\r\n                    emos.push(customer.custom_email);\r\n                    frappe.call({\r\n                        async: true,\r\n                        method: \"frappe.client.get\",\r\n                        args: {\r\n                            doctype: \"Customer\",\r\n                            name: customer.name,\r\n                        },\r\n                        callback: function(response) {\r\n                            let customer = response.message;\r\n                            let committees = customer.custom_committees_you_would_like_to_join;\r\n                            let meme = customer.custom_email;\r\n                            for (let committee of committees) {\r\n                            if (committee.committees === filter3 && meme !== null && ACM.member === customer.name) {\r\n                                // console.log(\"validation\",committee.committees === filter3 && meme !== null && ACM.member === customer.name);\r\n                                emaills.push(meme);\r\n                            }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n     \r\n    }\r\nconsole.log(\"emails2\", emaills);\r\n\r\n        // Add your subsequent logic here, like creating new documents\r\n        frappe.new_doc(\"Customer Newsletter\").then(() => {\r\n            for (let email of emaills) {\r\n                let child = cur_frm.add_child(\"customer_email\");\r\n                child.email = email;\r\n                console.log(\"emaillllllllllllllll\", email);\r\n                cur_frm.refresh_fields(\"customer_email\");\r\n            }\r\n               frappe.hide_progress();\r\n        });\r\n        \r\n   console.log(\"function2\"); \r\n}\r\n\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\nfunction my_third(frm, totalCalls){\r\n    let contacts = cur_frm.doc.custom_the_contact;\r\n    let emails3 = [];\r\n    for(let contact of contacts){\r\n        let email = contact.email;\r\n         emails3.push(email);\r\n          frappe.new_doc(\"Customer Newsletter\").then(() => {\r\n              for(let email of emails3){\r\n                  let child = cur_frm.add_child(\"customer_email\");\r\n                        child.email = email;\r\n                      \r\n                        cur_frm.refresh_fields(\"customer_email\");\r\n                   \r\n                }\r\n                   frappe.hide_progress();\r\n            });\r\n        \r\n    }\r\n    \r\n   \r\n    console.log(\"function3\");\r\n    console.log(\"emails3\",emails3);\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Annual Meeting Plan",
  "enabled": 1,
  "modified": "2024-04-24 16:54:40.460741",
  "module": null,
  "name": "annual plan for year",
  "script": "frappe.ui.form.on('Annual Meeting Plan', {\n    validate: function(frm) {\n        let ye = frm.doc.custom_year;\n        // your code here\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Annual Meeting Plan\",\n                fields: ['name', 'custom_year', 'workflow_state'],\n                filters: { 'custom_year': ye },\n            },\n            callback: function(response) {\n                let plans = response.message;\n                for (let plan of plans) {\n                    console.log(\"Workflow State:\", plan.workflow_state);\n                    if (plan.workflow_state === \"\u0645\u0648\u0627\u0641\u0642\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\" || \n                        plan.workflow_state === '\u062a\u062d\u062a \u0645\u0631\u0627\u062c\u0639\u0629 \u0645\u062f\u064a\u0631 \u0627\u0644\u0627\u062f\u0627\u0631\u0647' ||\n                        plan.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\") {\n                        frappe.msgprint({\n                            title: __('Message'),\n                            indicator: 'red',\n                            message: __(\"It is not possible to make more than one plan for the same {0} year\", [frm.doc.custom_year])\n                        });\n                        frappe.validated = false; // Prevent saving the Sales Invoice\n                        return;\n                    }\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-06-20 15:37:45.527347",
  "module": null,
  "name": "Hide status",
  "script": "frappe.listview_settings['Customer'] = {\r\n  onload: function() {\r\n    // Attempt to get the list view object with error handling\r\n    var listview = frappe.listview.get('Customer');\r\n    if (!listview) {\r\n      console.error(\"Failed to get list view object using frappe.listview.get!\");\r\n      // **New addition:** Retry after a slight delay\r\n      setTimeout(function() {\r\n        listview = frappe.listview.get('Customer');\r\n        if (listview) {\r\n          console.log(\"List view object retrieved successfully after delay!\");\r\n          // Now you can access the listview object for hiding logic...\r\n        } else {\r\n          console.error(\"Failed to retrieve list view object even after delay!\");\r\n        }\r\n      }, 100); // Adjust delay if needed (in milliseconds)\r\n      return; // Exit if listview not available (initially or after delay)\r\n    } else {\r\n      console.log(\"List view object retrieved successfully!\");\r\n      // Now you can access the listview object for hiding logic...\r\n    }\r\n\r\n    // Rest of your script logic to hide the Status column using listview... (assuming Status is the third column)\r\n    var status_col_index = 2;\r\n    var status_header = listview.find('th.list-head-col:nth-child(' + (status_col_index + 1) + ')');\r\n    // ... continue with hiding logic (hide header and data cells)\r\n  }\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 0,
  "modified": "2024-04-24 18:18:19.708994",
  "module": null,
  "name": "committee president",
  "script": "frappe.ui.form.on('Committee', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 1,
  "modified": "2024-04-25 18:06:14.425630",
  "module": null,
  "name": "update committed president 3",
  "script": "frappe.ui.form.on('Committee', {\n\tbefore_save:function(frm) {\n\t  \n\t\tif(frm.doc.committee_chairman){\n\t\t    frappe.call({\n                                method: \"barcode_aec.update_president.update_committee\",\n                                args: {\n                                    com:frm.doc.name,\n                                    emp: frm.doc.committee_chairman,\n                                    salutation: '\u0639\u0636\u0648\u064a\u0629 \u0631\u0626\u064a\u0633 \u0644\u062c\u0646\u0629'\n                                  \n                                    \n                                },\n                                callback: function(response) {\n                                    console.log('Member Updated');\n                                }\n                                \n                            });\n                            \n                            \n        let current_date = frappe.datetime.get_today();\n\t    frm.set_value('chairman_from',current_date)\n\t    console.log(\"date\",frm.doc.chairman_from);\n\t\tlet last_entry=frm.doc.president_history[frm.doc.president_history.length-1];\n\t\tconsole.log(last_entry)\n\t\tif(frm.doc.president_history.length===0)\n\t\t{\n\t\t    let row=frm.add_child('president_history');\n\t\t    row.member=frm.doc.committee_chairman;\n\t\t    row.from=frm.doc.chairman_from;\n\t\t    console.log('created new member');\n\t\t}\n\t\t\n\t\t\n\t\telse if (last_entry&&frm.doc.committee_chairman!==last_entry.member)\n\t\t{\n\t\t  //  last_entry.to=frm.doc.chairman_from\n\t\t    last_entry.to=frm.doc.chairman_from\n\t\t    const date_from=new Date(last_entry.from)\n\t\t    const date_to = new Date(last_entry.to)\n\t\t    const diff_time=Math.abs(date_to - date_from)\n\t\t    console.log(diff_time)\n\t\t    const diff_days=Math.ceil(diff_time / (1000 * 60 * 60 * 24))\n\t\t    console.log(diff_days)\n\t\t    let str_diff_days=diff_days.toString()\n\t\t    last_entry.duration=str_diff_days\n\t\t    frm.refresh_field('president_history')\n\n\t\t    \n\t\t    let row=frm.add_child('president_history')\n\t\t    row.member=frm.doc.committee_chairman\n\t\t    row.from=frm.doc.chairman_from\n\t\t   console.log('date type,',typeof(row.from))\n\t\t    frm.refresh_field('president_history')\n\t\t}\n                            \n            ///////////////////////////////////////////////\n           \n                            \n         \n                  \n                  \n                \n\t\t  \n\t\n\t\t     \n     \n\t\t    \n\t\t}  \n\t\t\n\t\t\n\t\t\n\t\t\n\t\t/////////////////////////////////////////////////////////\n\t\t\n\t\tif (frm.doc.agents_committee)\n\t\t{\n\t\t    \n\t\t      frappe.call({\n                                method: \"barcode_aec.update_president.update_committee\",\n                                args: {\n                                    com:frm.doc.name,\n                                    emp: frm.doc.agents_committee,\n                                    salutation: '\u0639\u0636\u0648\u064a\u0629 \u0648\u0643\u064a\u0644 \u0644\u062c\u0646\u0629'\n                                  \n                                    \n                                },\n                                callback: function(response) {\n                                    console.log('Member Updated 2');\n                                }\n                                \n                            });\n        let current_date = frappe.datetime.get_today();\n\t    frm.set_value('deputy_from',current_date)\n\t    console.log(\"date\",frm.doc.deputy_from);\n\t\tlet last_entry=frm.doc.deputy_history[frm.doc.deputy_history.length-1];\n\t\tconsole.log(last_entry)\n\t\tif(frm.doc.deputy_history.length===0)\n\t\t{\n\t\t    let row=frm.add_child('deputy_history');\n\t\t    row.member=frm.doc.agents_committee;\n\t\t    row.from=frm.doc.deputy_from;\n\t\t    console.log('created new member');\n\t\t}\n\t\telse if (last_entry&&frm.doc.agents_committee!==last_entry.member)\n\t\t{\n\t\t  //  last_entry.to=frm.doc.chairman_from\n\t\t    last_entry.to=frm.doc.deputy_from\n\t\t    const date_from=new Date(last_entry.from)\n\t\t    const date_to = new Date(last_entry.to)\n\t\t    const diff_time=Math.abs(date_to - date_from)\n\t\t    console.log(diff_time)\n\t\t    const diff_days=Math.ceil(diff_time / (1000 * 60 * 60 * 24))\n\t\t    console.log(diff_days)\n\t\t     let str_diff_days=diff_days.toString()\n\t\t    last_entry.duration=str_diff_days\n\t\t    frm.refresh_field('deputy_history')\n\n\t\t    \n\t\t    let row=frm.add_child('deputy_history')\n\t\t    row.member=frm.doc.agents_committee\n\t\t    row.from=frm.doc.deputy_from\n\t\t   console.log('date type,',typeof(row.from))\n\t\t    frm.refresh_field('deputy_history')\n\t\t}\n          \n                            \n                \n\t\t    \n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t}\n})\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 0,
  "modified": "2024-04-25 15:06:22.807943",
  "module": null,
  "name": "commite update",
  "script": "frappe.ui.form.on('Committee', {\n\tbefore_save(frm) {\n\t    let current_date = frappe.datetime.get_today();\n\t    frm.set_value('chairman_from',current_date)\n\t    console.log(\"date\",frm.doc.chairman_from);\n\t\tlet last_entry=frm.doc.president_history[frm.doc.president_history.length-1];\n\t\tconsole.log(last_entry)\n\t\tif(frm.doc.president_history.length===0)\n\t\t{\n\t\t    let row=frm.add_child('president_history');\n\t\t    row.member=frm.doc.committee_chairman;\n\t\t    row.from=frm.doc.current_date;\n\t\t    console.log('created new member');\n\t\t}\n\t\telse if (last_entry&&frm.doc.committee_chairman!==last_entry.member)\n\t\t{\n\t\t  //  last_entry.to=frm.doc.chairman_from\n\t\t    last_entry.to=frm.doc.chairman_from\n\t\t    \n\t\t    let row=frm.add_child('president_history')\n\t\t    row.member=frm.doc.committee_chairman\n\t\t    row.from=frm.doc.chairman_from\n\t\t    frm.refresh_field('president_history')\n\t\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 0,
  "modified": "2024-04-25 20:43:51.314313",
  "module": null,
  "name": "333",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\n    refresh: function (frm) {\n        frm.add_custom_button(__(\"Contact Of Authority\"), function() {\n            var d = new frappe.ui.Dialog({\n                title: __('Advanced Search Contacts Of Authority'),\n                fields: [\n                    {\n                        fieldname: \"authority\",\n                        fieldtype: \"Link\",\n                        label: __(\"Authority\"),\n                        options: \"Authority\",\n                        get_query: function () {\n                            return {\n                                filters: [\n                                    ['parent_authority', '=', '\u0627\u0644\u062c\u0647\u0627\u062a']\n                                ]\n                            };\n                        }\n                    },\n                    {\n                        fieldname: \"sector\",\n                        fieldtype: \"Link\",\n                        label: __(\"Sector\"),\n                        options: \"Authority\",\n                        get_query: function () {\n                            let authority = d.get_value('authority');\n                             if (authority) {\n                                 return {\n                                        filters: [\n                                            ['parent_authority', '=', authority]\n                                        ]\n                                         };\n                            }\n\n                        }\n                    },\n                    {\n                        fieldname: \"center_management\",\n                        fieldtype: \"Link\",\n                        label: __(\"Center Management\"),\n                        options: \"Authority\",\n                        reqd: 0,\n                        get_query: function () {\n                            let sector = d.get_values().sector;\n                            if (sector) {\n                                return {\n                                    filters: [\n                                        ['parent_authority', '=', sector]\n                                    ]\n                                };\n                            } \n                        }\n                    },\n                    {\n                        fieldname: \"branch_management\",\n                        fieldtype: \"Link\",\n                        label: __(\"Branch Management\"),\n                        options: \"Authority\",\n                        get_query: function () {\n                            let center_management = d.get_values().center_management;;\n                            if (center_management) {\n                                return {\n                                    filters: [\n                                        ['parent_authority', '=', center_management]\n                                    ]\n                                };\n                            }\n                        }\n                    },\n                    {\n                        fieldtype: \"Table\",\n                        fieldname: 'contact_tab',\n                        label: __(\"Table Contact\"),\n                        fields: [\n                          \n                            {\n                                label: \"Authority\",\n                                fieldtype: \"Data\",\n                                fieldname: \"authority\",\n                                in_list_view: 1\n                            },\n                            {\n                                label: 'Phone',\n                                fieldtype: \"Data\",\n                                fieldname: \"phone\",\n                                in_list_view: 1\n                            },\n                            {\n                                label: \"Email\",\n                                fieldtype: \"Data\",\n                                fieldname: \"email\",\n                                in_list_view: 1\n                            }\n                        ]\n                    },\n                    \n                ],\n                primary_action_label: __('Search'),\n                primary_action: function () {\n                    var val = d.get_values();\n                    var fil = val.branch_management || val.center_management || val.sector || val.authority;\n                    searchContact(fil);\n                },\n                secondary_action_label: __('Append to Table'),\n                secondary_action: function () {\n                    console.log(d.get_values().contact_tab);\n                    //  const data = $JSON.stringify(data)\n                      console.log(d.get_values().contact_tab[0].__checked);\n                     for(let row of d.get_values().contact_tab){\n                         if (row.__checked === 1){\n                             \n                             let child = frm.add_child(\"custom_the_contact\");\n                             console.log(row.__checked);\n                              console.log(row.email);\n                               console.log(row.phone);\n                             child.authority = row.authority;\n                             child.contact =row.phone;\n                             child.email = row.email;\n                             refresh_field(\"custom_the_contact\");\n                             d.hide();\n     \n                         }\n                     }\n                                \n                },\n                size: 'large',\n\n            });\n            d.show();\n\n            function searchContact(fil) {\n                frappe.call({\n                    method: \"frappe.client.get_list\",\n                    args: {\n                        doctype: \"Contact\",\n                        fields: ['*'],\n                        filters: { 'custom_authority': fil }\n                    },\n                    callback: function(response) {\n                        let msg = response.message;\n                        let html = '';\n                        for (let row of msg) {\n                            frappe.call({\n                                method: \"frappe.client.get\",\n                                args: {\n                                    doctype: \"Contact\",\n                                    name: row.name,\n                                },\n                                callback: function(r) {\n                                  let contact = r.message;\n                                  let phoneNos = contact.phone_nos;\n                                  let emails = contact.email_ids;\n                                    console.log(\"PhoneNOs\",phoneNos);\n                                     console.log(\"emails\",emails);\n                                  // Declare and initialize authority variable\n                                  let authority = contact.custom_authority;\n                    //   if(phoneNos.length >= emails.length) {\n                    //              for(let pp of phoneNos) {\n                    //                  let child = frm.add_child(\"custom_the_contact\");\n                    //                  child.authority = contact.custom_authority;\n                    //                  child.contact = pp.phone;\n                    //                  if(pp.idx <= emails.length) {\n                    //                     child.email = emails[pp.idx - 1].email_id;\n                    //                  }\n                    //              }\n                    //          }\n                                  // Update the table in the dialog\n                                  if (d.fields_dict.contact_tab.df) {\n                                      if (!d.fields_dict.contact_tab.df.data) {\n                                          d.fields_dict.contact_tab.df.data = [];\n                                      }\n                                      if (phoneNos.length >= emails.length) {\n                                          for (let pp of phoneNos) {\n                                              contact = pp.phone;\n                                                d.fields_dict.contact_tab.df.data.push({\n                                                      name: contact.name,\n                                                      authority: authority,\n                                                      phone: contact,\n                                                      \n                                                  });\n                                              if (pp.idx <= emails.length) {\n                                                  let email = emails[pp.idx - 1].email_id;\n                                                  d.fields_dict.contact_tab.df.data.push({\n                                                      name: contact.name,\n                                                      authority: authority,\n                                                        \n                                                      email: email\n                                                  });\n                                              }\n                                          }\n                                      } else if (emails.length >= phoneNos.length) {\n                                          for (let ee of emails) {\n                                              let email2 = ee.email_id;\n                                              d.fields_dict.contact_tab.df.data.push({\n                                                      name: contact.name,\n                                                      authority: authority,\n                                                     \n                                                      email: email2\n                                                  });\n                                              if (ee.idx <= phoneNos.length) {\n                                                  let contact2 = phoneNos[ee.idx - 1].phone;\n                                                  d.fields_dict.contact_tab.df.data.push({\n                                                      name: contact.name,\n                                                      authority: authority,\n                                                      phone: contact2,\n                                                     \n                                                  });\n                                              }\n                                          }\n                                      }\n                                      d.fields_dict.contact_tab.grid.refresh();\n                                  }\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n});\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 0,
  "modified": "2024-04-29 14:25:53.145534",
  "module": null,
  "name": "Permenantly Filter on list",
  "script": "frappe.listview_settings['Meeting'] = {\nonload : function(listview) {\nfrappe.route_options = {\n\"status\": \"Draft\"\n};\nlistview.refresh();\n}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Annual Meeting Plan",
  "enabled": 0,
  "modified": "2024-04-28 12:50:27.423855",
  "module": null,
  "name": "filter the field to the list view",
  "script": "frappe.ui.form.on('Annual Meeting Plan', {\n    refresh: function(frm) {\n        // Add the field to the list view\n        frm.fields_dict['meeting_plane'].grid.get_field('committe').get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    // Add any additional filters here if needed\n                    'name':'\u0627\u0644\u062e\u0636\u0627\u0631'\n                }\n            };\n        };\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Annual Meeting Plan",
  "enabled": 0,
  "modified": "2024-04-29 14:24:19.063262",
  "module": null,
  "name": "Field filter in list view",
  "script": "frappe.listview_settings['Annual Meeting Plan'] = {\n// onload: function(listview) {\n//         listview.page.add_inner_button(__('Reload'), function() {\n//             listview.start = 0;\n//             listview.run();\n//         });\n//     },\n//     get_indicator: function(doc) {\n//         // Define the color indicator logic here\n//     },\n//     refresh: function(listview) {\n//         listview.data.forEach(function(item) {\n//             // Fetch data for custom_field for each item and assign it to item.custom_field\n//             item.custom_field = 'Custom Data'; // Replace 'Custom Data' with your actual data\n//         });\n//         listview.render();\n//     }\n// add_fields: [\"committe\"],\n onload: function (listview) {\n    frappe.route_options = {\"item_group\": [\"=\", \"Product\"]};\n}\n    \n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 1,
  "modified": "2024-05-02 15:48:01.262879",
  "module": null,
  "name": "print and pdf button",
  "script": "\r\nfrappe.ui.form.on('Minutes Of Meeting', {\r\n    \r\n    refresh: function(frm) {\r\n  \r\n              \r\n            frm.add_custom_button(__('Print PDF'), function() {\r\n            var url = frm.doc.attach_pdf;\r\n            console.log(url);\r\n            \r\n        //     // Check if the URL ends with \".pdf\"\r\n            if (url.endsWith('.pdf')) {\r\n                window.open(url);\r\n            } else {\r\n                console.log('The URL does not point to a PDF file.');\r\n                 frappe.msgprint(\"The Attach Field does not point to a PDF file.\");\r\n                return false;\r\n            }\r\n            \r\n        });\r\n\r\n            frm.add_custom_button(__('Print Format Report'),function(){\r\n                var print_format = 'Minutes Of Meeting Report';\r\n                frappe.utils.print(\r\n                    frm.doctype,                \r\n                    frm.docname,            \r\n                    print_format,  \r\n                    frm.doc.letter_head,\r\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\r\n                \r\n                ); \r\n            });\r\n           \r\n        \r\n  \r\n    }\r\n    \r\n});\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 0,
  "modified": "2024-05-01 20:55:58.137585",
  "module": null,
  "name": "Absent And Present counts",
  "script": "frappe.ui.form.on('Minutes Of Meeting', {\n\tbefore_save(frm) {\n\t\t// your code here council entities\n\n\t\tlet table = frm.doc.custom_council_entities;\n\t\tlet absentCounnt = 0;\n        let presentCounnt = 0;\n\t\tfor (let row of table){\n\t\t    if(row.status === 'Present'){\n                presentCounnt++;\n\t\t        \n\t\t    }else if(row.status === 'Absent'){\n\t\t        absentCounnt++;\n\t\t    }\n\t\t    \n\t\t}\n\t\n\t\tconsole.log(\"Count of Absent:\", absentCounnt);\n\t\tconsole.log(\"Count of Present:\", presentCounnt);\n        frm.set_value(\"custom_total_absent\",presentCounnt);\n        frm.set_value(\"custom_total_absent1\",absentCounnt);\n\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-04-29 14:22:15.590145",
  "module": null,
  "name": "Meeting Status",
  "script": "frappe.ui.form.on('Meeting', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tvar status =frm.doc.date;\n\t\tvar docstatus =frm.doc.docstatus;\n\t\tvar currentDate = frappe.datetime.now_date();\n\t\tif (status === currentDate) {\n            frm.set_value(\"custom_meeting_status\",\"Closed\");\n            // Perform your desired action here\n            \n        }\n         if (docstatus === 2) {\n              frm.set_value(\"custom_meeting_status\",\"Cancelled\");\n            // Perform your desired action here\n        }\n\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 0,
  "modified": "2024-05-01 11:54:43.208103",
  "module": null,
  "name": "max size field",
  "script": "frappe.ui.form.on('Minutes Of Meeting', {\n\n        // attach_pdf:function(frm) {\n        //     console.log(\"ddd\");\n        //     // frappe.prompt({\n        //     //     fieldtype: 'Attach',\n        //     //     fieldname: 'attachment',\n        //     //     label: __('Attach File'),\n        //     //     reqd: 1,\n        //     //     options: '',\n        //     //     max_size: 5 * 1024 * 1024,  // 5 MB in bytes\n        //     //     onchange: () => {\n        //     //         // Your onchange logic here\n        //     //     }\n        //     // });\n        // \n    attach_pdf: function(frm) {\n        console.log(\"ddd\");\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 0,
  "modified": "2024-05-02 08:45:27.268705",
  "module": null,
  "name": "customer1",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Sent to NewsLetters'), function() {\r\n            frappe.call({\r\n                method: \"85.195.99.171/api/method/send_to_newsletters\",\r\n                args: {\r\n                    doctype: \"Customer\",\r\n                    docname: frm.doc.name,\r\n                },\r\n                callback: function(response) {\r\n                    // Handle response if needed\r\n                    frappe.show_alert(\"Newsletter sent successfully!\", 5);\r\n                }\r\n            }); \r\n         \r\n        });\r\n    }\r\n});\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-05-14 09:56:14.850254",
  "module": null,
  "name": "member list view hide status",
  "script": "frappe.ui.form.on('Customer', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-05-07 09:14:53.341121",
  "module": null,
  "name": "hide list view status",
  "script": "frappe.listview_settings['Customer'] = {\n    \n    hide_name_column:true, \n    has_indicator_for_draft: false,\n    has_indicator_for_Enabled: true,\n//   onload: function(listview) {\n//         // Hide the field\n//         cur_list.list_view_settings.fields['status_field'].hidden = true;\n//         listview.refresh();\n//     }\n\n    \n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 0,
  "modified": "2024-05-08 12:37:25.608843",
  "module": null,
  "name": "send emails to newsletter",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\n    refresh: function(frm) {\n        frm.add_custom_button(('Sent to NewsLetters'), function() {\n            // Initialize arrays to store emails\n            let emailes = [];\n\n            // Iterate through authorities_committees\n            frm.doc.authorities_committees.forEach(AC => {\n                // Check if authority is active\n                if (AC.status === 'Active') {\n                    // Filter for active customers\n                    let filters = {'custom_customer_status': 'Active'};\n                    // Call to get list of customers\n                    frappe.call({\n                        method: \"frappe.client.get_list\",\n                        args: {\n                            doctype: \"Customer\",\n                            limit_page_length: 5000,\n                            fields: ['custom_email', 'name'],\n                            filters: filters\n                        },\n                        callback: function(response) {\n                            let customers = response.message;\n                            // Iterate through customers\n                            customers.forEach(customer => {\n                                let memo = customer.custom_email;\n                                let committees = customer.custom_committees_you_would_like_to_join;\n                                // Iterate through committees of the customer\n                                committees.forEach(committee => {\n                                    if (committee.committees === AC.committee && memo !== null) {\n                                        emailes.push(memo);\n                                    }\n                                });\n                            });\n                            // After all calls are completed, create newsletter\n                            createNewsletter(emailes);\n                        }\n                    });\n                }\n            });\n        });\n    }\n});\n\n// Function to create newsletter\nfunction createNewsletter(emailes) {\n    frappe.new_doc(\"Customer Newsletter\").then(() => {\n        // Add emails to newsletter\n        emailes.forEach(email => {\n            let child = cur_frm.add_child(\"customer_email\");\n            child.email = email;\n        });\n        cur_frm.refresh_fields(\"customer_email\");\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Minutes Of Meeting",
  "enabled": 1,
  "modified": "2024-05-14 12:12:07.995048",
  "module": null,
  "name": "validate pdf",
  "script": "\r\nfrappe.ui.form.on('Minutes Of Meeting', {\r\n    \r\n    validate: function(frm) {\r\n         var atta= frm.doc.attach_pdf;\r\n      if (atta && atta.endsWith(\"pdf\")) {\r\n             frappe.msgprint(\"success\");\r\n             console.log('1',atta);\r\n \r\n    } else {\r\n        // frappe.msgprint(\"please Delete Your Attachment is not PDF \");\r\n        // user=frappe.db.get_doc(\"Customer\",\"1\");\r\n        // user.then(doc=>{console.log(doc.customer_name)});\r\n        frappe.call({\r\n    method: \"frappe.client.get_list\",\r\n    args: {\r\n        doctype: \"File\",\r\n        fields: ['*'],\r\n        filters: {'file_url': atta}\r\n    },\r\n    callback: function(response) {\r\n        console.log('response1', typeof response);\r\n            let files = response.message;\r\n            for (let file of files){\r\n              let filename = file.name;\r\n              console.log('response12', filename);\r\n              frappe.db.delete_doc('File', filename);\r\n              frappe.msgprint(`files ${filename} Deleted`);\r\n              frm.set_value('attach_pdf','');\r\n            }\r\n    }\r\n});\r\n\r\n                    \r\n        // user = frappe.get_doc('Customer',1);\r\n        // // \r\n        // // frappe.delete_doc('File', 'TASK00002')\r\n        // // frm.refresh_field('attach_pdf');\r\n        \r\n        // // // frm.save();\r\n        //  console.log('2',user);\r\n    }\r\n\r\n}\r\n    \r\n});\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-05-07 13:02:14.467078",
  "module": null,
  "name": "send mail external",
  "script": "// frappe.ui.form.on('Meeting', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t}\n// })\n\nfrappe.ui.form.on('External Authority', {\n    send_mail:function(frm,cdt,cdn){\n        \n        var row = locals[cdt][cdn];\n        \n        \n//     frappe.call({\n//     async: false,\n//     method: 'barcode_aec.barcode_aec.doctype.meeting.meeting.external_entity_mail',\n//     args: {\n//         body: row.body_mail,\n//         email: row.mail\n//     },\n//     callback: function (r) {\n        \n        \n        \n        \n//         // console.log(r.message[0].total_count);\n//         // var Active = r.message[0].total_count;\n//         // frm.set_value('total_active_members', Active);\n//         // // frm.doc.total_active_members = r.message.total_count;\n        \n//     }\n// });\n\n        if(!row.body_mail){\n            msgprint(\"Please Write a body mail\")\n        }else{\n\n        frm.call(\"external_entity_mail\",{body: row.body_mail,email:row.email}).then(() => {\n          cosnole.log(\"done\");\n        });\n        }\n        \n        \n        \n        \n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 0,
  "modified": "2024-09-04 15:05:09.100004",
  "module": null,
  "name": "Get mails",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\n    refresh: function(frm) {\n        frm.add_custom_button(('Sent to NewsLetters'), async function() {\n            let totalCalls = 8;\n          frappe.show_progress(\"Getting Contacts..\", 20, 35, 55, 70, 80, 90, 100, \"Please wait\", \"red\"); \n            \n            \n try {\n                if (!frm.doc.authorities_committees) {\n                    await my_second_full(frm, totalCalls);\n                    await my_third(frm, totalCalls);\n                } else if (!frm.doc.authorities_committees_members) {\n                    await my_full(frm,totalCalls);\n                    await my_third(frm, totalCalls);\n                } else if (!frm.doc.custom_the_contact) {\n                    await my_second_full(frm, totalCalls);\n                    await my_full(frm,totalCalls);\n                } else {\n                     await my_third(frm, totalCalls);\n                     await my_second_full(frm, totalCalls);\n                     await my_full(frm,totalCalls);\n                }\n            } catch (error) {\n                console.error(error);\n            } finally {\n                frappe.hide_progress();\n                console.log('finally');\n            }\n        });\n    }\n});\n\nasync function my_full(frm,totalCalls) {\n    let customerNames = [];\n    let customers = await getCustomers();\n    console.log(typeof customers);\n    console.log(customers.length);\n    \n            for (const customer of customers) {\n                const name1 = customer.name;\n                customerNames.push(name1);\n\n            }\n    console.log('myfull');\n    let emailes = await getActiveCustomer(frm,customerNames);\n    return customerNames;\n    \n    \n}\nasync function getCustomers(frm) {\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Customer\",\n                limit_page_length: 5000,\n                fields: ['*'],\n                filters: { 'custom_customer_status': 'Active' }\n            },\n            callback: function(response) {\n                if (response && response.message) {\n                    console.log(\"Active customers:\", response.message);\n                } else {\n                     reject(\"Error fetching active customers\");\n                }\n            }\n        });\n    });\n    console.log('z3');\n}\n\n\nasync function getActiveCustomer(frm,customerNames) {\n    let emailes = [];\n    let authorities_committees = cur_frm.doc.authorities_committees;\n    for (const name of customerNames) {\n        try {\n            const customer = await new Promise((resolve, reject) => {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Customer\",\n                        name: name\n                    },\n                    callback: function(response) {\n                        if (response && response.message) {\n                            resolve(response.message);\n                            let customer =response.message;\n                            //////////////////////////////////////////////////////////////////\n                            let committees = customer.custom_committees_you_would_like_to_join;\n                            let emails = customer.custom_email;\n                            let isPrinted = false; // Flag to track if the console log has been printed\n                                  for (let committee of committees) {\n                                    for (let AC of frm.doc.authorities_committees) {\n                                        let filter2 = AC.committee;\n                                        if (committee.committees === filter2 && emails !== undefined &&emails !== '' && emails !== null) {\n                                            emailes.push(customer.custom_email);\n                                            console.log('getActiveCustomer');\n                                            isPrinted = true; // Set the flag to true once the condition is met\n                                            break;\n                                        }\n                                    }    \n                                    }\n                                //////////////////////////////////////////////////////////////////\n                        } else {\n                            reject(`Error fetching customer with ID ${customerId}`);\n                        }\n                    }\n                });\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    console.log(\"EMAILS\",typeof emailes);\n    console.log(\"EMAILS\",emailes.length);\n    return emailes;\n}\nasync function my_second_full(frm) {\n    let emaills = [];\n    for (let ACM of cur_frm.doc.authorities_committees_members) {\n        let Active = ACM.member;\n        let filter3 = ACM.committee;\n        let response = await frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Customer\",\n                name: Active,\n                custom_customer_status: 'Active'\n            }\n        });\n\n        if (response && response.message) {\n            let customer = response.message;\n            if (customer.custom_email !== undefined && customer.custom_email !== \"\") {\n                let committees = customer.custom_committees_you_would_like_to_join || [];\n                for (let item of committees) {\n                    if (item.committees === filter3) {\n                        emaills.push(customer.custom_email);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    console.log(\"emails\", emaills);\n    // Return the emails fetched\n    return emaills;\n}\nasync function my_third(frm, totalCalls) {\n    let emails3 = [];\n\n    // Call my_second_full to retrieve emails\n    let emaills = await my_second_full(frm);\n    let customerNames = await my_full(frm, totalCalls);\n    let emaills1 = await getActiveCustomer(frm, customerNames);\n    // Merge emaills with emails3\n    emails3 = emails3.concat(emaills);\n    emails3 = emails3.concat(emaills1);\n    // Get contacts' emails\n    let contacts = cur_frm.doc.custom_the_contact;\n    for (let contact of contacts) {\n        let email = contact.email;\n        emails3.push(email);\n    }\n    // Add emails to the customer newsletter\n    frappe.new_doc(\"Customer Newsletter\").then(() => {\n        for (let email of emails3) {\n            let child = cur_frm.add_child(\"customer_email\");\n            child.email = email;\n            cur_frm.refresh_fields(\"customer_email\");\n        }\n    });\n    console.log(\"function3\");\n    console.log(\"emails3\", emails3);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Country",
  "enabled": 0,
  "modified": "2024-05-13 19:03:57.932616",
  "module": null,
  "name": "Update country in Geographical Clusters",
  "script": "// // frappe.ui.form.on('Country', {\n// //     custom_geographical_clusters(frm) {\n// //         let country = frm.doc.custom_geographical_clusters;\n// //         let m = frm.doc.name;\n\n// //         frm.get_doc('Geographical Clusters List',country).then(() => {\n// //                 // Append the 'code' to the 'Track' child table\n// //                 let child = doc.append( \"Blocs of Targeted Countries  Table\", {\n// //                     country: m\n// //                 });\n\n// //                 // Save the updated 'Appraisal' document\n// //                 // frappe.db.save_doc('Appraisal', doc)\n      \n// //         // console.log(\"start\", m);\n// //         // frappe.call({\n// //         //     method: 'frappe.client.get',\n// //         //     args: {\n// //         //         doctype: 'Geographical Clusters List',\n// //         //         name: country,\n// //         //     },\n// //         //     callback: function (response) {\n// //         //         console.log(response.message);\n// //         //         let tab = response.message.blocs_of_targeted_countries;\n            \n// //         //         tab.forEach(row=>{\n// //         //           frappe.call({\n// //         //             \"method\": \"frappe.client.set_value\",\n// //         //             \"args\": {\n// //         //             \"doctype\": 'Geographical Clusters List',\n// //         //             \"name\": \"Blocs of Targeted Countries  Table\",\n// //         //             \"fieldname\": {\n// //         //             \"country\":m\n// //         //             }\n// //         //             }\n// //         //             });\n                  \n                    \n// //         //         });\n// //         //             frm.refresh_fields(\"blocs_of_targeted_countries\");\n// //         //         // for (let row of tab) {\n// //         //         // //     frappe.call({\n// //         //         // //         method: 'frappe.client.set_value',\n// //         //         // //         args: {\n// //         //         // //             doctype: 'Blocs of Targeted Countries  Table',\n// //         //         // //             name:row.\n// //         //         // //             fieldname: 'country',\n// //         //         // //             value: m,\n// //         //         // //         },\n// //         //         // //         callback: function (response) {\n// //         //         // //             console.log(\"End\", response.message);\n// //         //         // //         }\n// //         //         // //     });\n// //         //         //  }\n// //         //     }\n// //         // });\n// //     }\n// // });\n\n\n// ///////////////////////////////////////////////////////////////////////////////////////////////////\n// // frappe.ui.form.on('Country', {\n// //   custom_geographical_clusters(frm) {\n// //         let country = frm.doc.custom_geographical_clusters;\n// //         let m = frm.doc.name;\n\n// //         // Assuming 'appresial' is a link field in some related form or you have a way to identify which 'Appresial' record to update\n// //         // Fetch the 'Appresial' form where you want to add the 'country_code' to the 'track' child table\n// //         frappe.call({\n// //             method: \"frappe.client.get\",\n// //             args: {\n// //                 doctype: 'Geographical Clusters List',\n// //               name: country // Assuming there's a field linking to the specific 'Appresial' record\n// //             },\n// //             callback: function(r) {\n// //                 if (r.message) {\n// //                     let appresial_doc = r.message;\n// //                     let child = frappe.model.add_child(appresial_doc,  \"Blocs of Targeted Countries  Table\", 'country');\n// //                     child.country = m;\n// //                     frappe.model.set_value('Geographical Clusters List','Geographical Clusters List', country, m);\n// //                     console.log(\"child:\",child);\n// //                     // frappe.call({\n// //                     //     method: \"frappe.client.save\",\n// //                     //     args: {\n// //                     //         doc: appresial_doc\n// //                     //     },\n// //                     //     callback: function(r) {\n// //                     //         if (!r.exc) {\n// //                     //             frappe.msgprint('Track updated with country code.');\n// //                     //         }\n// //                     //     }\n// //                     // });\n// //                 }\n// //             }\n// //         });\n// //     }\n// // });\n\n// ///////////////////////////////////////////////////////////////////////////////////////////////////\n// frappe.ui.form.on('country', {\n//   refresh: function(frm) {\n//     // when the form is refreshed, fetch the 'code' from the 'Country' DocType\n//     frm.add_fetch('custom_geographical_clusters', frm.doc.name);\n//   },\n//   custom_geographical_clusters: function(frm) {\n//     // when the 'country' field is changed, fetch the 'code' and add it to the 'track' child table\n//     frappe.model.with_doc('custom_geographical_clusters', frm.doc.custom_geographical_clusters, function() {\n//       var country = frappe.model.get_doc('Geographical Clusters List', frm.doc.custom_geographical_clusters);\n//       var child = frm.add_child('Blocs of Targeted Countries  Table');\n//       child.country = frm.doc.name;\n//       frm.refresh_field('Blocs of Targeted Countries  Table');\n//     });\n//   }\n// });\n\n\nfrappe.ui.form.on('Country', {\n\t  custom_geographical_clusters(frm) {\n\t\t// your code here\n\t\t\n\t\tfrappe.call({\n            method: \"barcode_aec.country_update.add_country\",\n            args: {\n                country_name:frm.doc.name,\n                cluster_name:frm.doc.custom_geographical_clusters\n            },\n            callback: function (r) {\n                if (r.message) {\n                  frappe.msgprint((\"country added successfully.\"));\n                }\n            },\n        });\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Countries",
  "enabled": 1,
  "modified": "2024-05-13 19:56:52.308460",
  "module": null,
  "name": "Update County Clusters",
  "script": "frappe.ui.form.on('Countries', {\n\t  custom_geographical_clusters(frm) {\n\t\t// your code here\n\t\t\n\t\tfrappe.call({\n            method: \"barcode_aec.country_update.add_country\",\n            args: {\n                country_name:frm.doc.name,\n                cluster_name:frm.doc.custom_geographical_clusters\n            },\n            callback: function (r) {\n                // if (r.message) {\n                    console.log(r.message);\n                  frappe.msgprint(\"Country Added Successfully.\");\n                // }\n            },\n            \n        });\n        // cur_frm.save();\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 0,
  "modified": "2024-05-14 09:08:19.544815",
  "module": null,
  "name": "Hide Status Column",
  "script": "frappe.listview_settings['Customer'] = {\r\n\tsetup: function(listview) {\r\n\t    $(\".indicator-pill.blue\").hide();\r\n\r\n\r\n\t}\r\n};\r\n\r\n// .indicator-pill.blue, .indicator-pill-right.blue, .indicator-pill-round.blue",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 0,
  "modified": "2024-05-19 08:35:36.760875",
  "module": null,
  "name": "Lead",
  "script": "frappe.listview_settings['Lead'] = {\r\n\trefresh: function(listview) {\r\n\t    $(\".indicator-pill\").hide();\r\n\r\n\r\n\t}\r\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2024-05-14 09:36:25.329085",
  "module": null,
  "name": "Hide Status Column From Address",
  "script": "frappe.listview_settings[\"Address\"] = {\n    refresh: function(listview) {\n\t    $(\".indicator-pill.blue\").hide();\n\n$(document).ready(function() {\n    $(\".list-row-head:contains('Status')\").each(function() {\n        $(this).html(function(_, html) {\n            return html.replace(/(Status)/g, '<span style=\"display:none\">$1</span>');\n        });\n    });\n});\n\n    }\n    \n    \n    \n    // \"hide_name_column\": false,\n    // \"add_fields\": [\"show\"],\n    // \"button\": {\n    //     \"show\": function(doc) {\n    //         return '<i class=\"fa fa-eye\"></i> Show';\n    //     },\n    //     \"get_label\": function() {\n    //         return __('<i class=\"fa fa-eye\"></i> Show','<i class=\"fa fa-eye\"></i> update', null, \"Access\");\n    //     },\n    //     \"get_description\": function(doc) {\n    //         return __(\"Show Member \" + doc.customer_name);\n    //     },\n    //     \"action\": function(doc) {\n    //         var data = doc.name;\n    //         frappe.set_route(\"Form\", \"Company Profile\", data);\n    //     }\n    // }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contact",
  "enabled": 1,
  "modified": "2024-05-14 10:02:00.399521",
  "module": null,
  "name": "Contact child Table",
  "script": "frappe.ui.form.on('Contact', {\n\tcustom_member:function(frm){\n\t    \n\t    if(frm.doc.custom_contact_for == 'Member'){\n\t        \n\t          frm.add_child('links', {\n                    'link_doctype': 'Customer',\n                    'link_name': frm.doc.custom_member\n                });\n\t        \n\t        console.log(\"Done\");\n\t        \n\t        \n\t    }\n\t    \n\t    \n\t    \n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contact",
  "enabled": 1,
  "modified": "2024-06-18 17:29:37.105911",
  "module": null,
  "name": "set value for authority from child table filters",
  "script": "frappe.ui.form.on('Contact', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tlet field1 = frm.set_query(\"authority\",\"custom_contacts\",function(doc,cdt,cdn){\n\t\t    return {\n                filters: [\n                    ['parent_authority', '=', '\u0627\u0644\u062c\u0647\u0627\u062a']\n                ]\n            };\n\t\t    \n\t\t});\n\t\tlet field2 = frm.set_query(\"sector\",\"custom_contacts\",function(doc,cdt,cdn){\n\t\t     let d = locals[cdt][cdn];\n\t\t     if(d.authority){\n\t\t             return {\n        \t\t        filters: [\n        \t\t                ['parent_authority', '=', d.authority]\n        \t\t            ]\n\t\t            };\n\t\t            \n\t\t     }else {\n                return {\n                    filters: []\n                }\n\t\t    }   \n\t\t\n\t\t});\n\t\t\n\t\tlet field3 = frm.set_query(\"center_management\",\"custom_contacts\",function(doc,cdt,cdn){\n\t\t    let d = locals[cdt][cdn];\n\t\t    if(d.sector){\n\t\t        return {\n\t\t            filters:[\n\t\t                    ['parent_authority','=',d.sector]\n\t\t                ]\n\t\t        }     \n\t\t    }else {\n                return {\n                    filters: []\n                }\n\t\t    }   \n\t\t});\n\t\t\n\t\tlet field4 = frm.set_query(\"branch_management\",\"custom_contacts\",function(doc,cdt,cdn){\n\t\t    let d = locals[cdt][cdn];\n\t\t    if(d.center_management){\n\t\t        return{\n\t\t            filters:[\n\t\t                ['parent_authority','=',d.center_management]\n\t\t            ]\n\t\t        }\n\t\t        \n\t\t    }else {\n                return {\n                    filters: []\n                };\n\t\t    }   \n\t\t});\n\t\t\n// \t\tfor (let row of frm.doc.custom_contacts){\n// \t\t    if (row.authority){\n// \t\t      //  frm.set_value('custom_authority',row.authority)\n// \t\t      console.log(row.authority);\n// \t\t    }\n// \t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n});\n\nfrappe.ui.form.on('contacts', {\n    refresh(frm){\n        authority: function(frm, cdt, cdn) {\n        var d = locals[cdt][cdn];\n       \n            frm.set_value('custom_authority', d.authority);\n\n    }\n    sector: function(frm, cdt, cdn) {\n        var d = locals[cdt][cdn];\n        if (d.authority && d.sector) {\n            frm.set_value('custom_authority', d.sector);\n            frm.refresh_field('custom_authority');\n        }\n    }\n    center_management: function(frm, cdt, cdn) {\n        var d = locals[cdt][cdn];\n        if (d.authority && d.sector) {\n            frm.set_value('custom_authority', d.center_management);\n            frm.refresh_field('custom_authority');\n        }\n    }\n    branch_management: function(frm, cdt, cdn) {\n        var d = locals[cdt][cdn];\n        if (d.authority && d.sector) {\n            frm.set_value('custom_authority', d.branch_management);\n            frm.refresh_field('custom_authority');\n        }\n    }    \n    }    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee",
  "enabled": 0,
  "modified": "2024-05-14 16:20:12.571315",
  "module": null,
  "name": "DASHBOARD2",
  "script": "frappe.ui.form.on('Committee', {\n    onload_post_render: function(frm) {\n        var htmlContent = frm.doc.dashboard_card;\n        let total = frm.doc.total_members || 0;\n        let active = frm.doc.total_active_members || 0;\n        let inactive = frm.doc.total_inactive_members || 0;\n        let annual = frm.doc.annual_meeting || 0;\n        let meeting = frm.doc.annual_meeting_per_year || 0;\n        var filters = [[\"committe_code\", \"=\", frm.doc.name],];\n        let product_count = 0;\n        \n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                \"doctype\" : \"Product\",\n                \"filters\": {\n                    'committe_code': frm.doc.name,\n                },\n                \"limit_page_length\": 500,\n                // 'fields': ['name']\n            },\n            callback: function(response) {\n                if (response.message) {\n                    product_count = response.message.length;\n                    console.log(\"product count\");\n                    renderHTML();\n                }\n            }\n        });\n        \n        \nfrappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getActiveMembers',\n    args: {\n        com: frm.doc.name_of_committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message[0].total_count);\n        var Active = r.message[0].total_count;\n        frm.set_value('total_active_members', Active);\n        // frm.doc.total_active_members = r.message.total_count;\n        \n    }\n});\n\n\tfrappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getTotalMembers',\n    args: {\n        com: frm.doc.name_of_committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message[0].total_count);\n        var total = r.message[0].total_count;\n        frm.set_value('total_members', total);\n        // frm.doc.total_active_members = r.message.total_count;\n        \n    }\n});\n\n\n\n\tfrappe.call({\n    async: false,\n    method: 'barcode_aec.barcode.getInactiveMembers',\n    args: {\n        com: frm.doc.name_of_committee\n    },\n    callback: function (r) {\n        \n        console.log(r.message[0].total_count);\n        var total = r.message[0].total_count;\n        frm.set_value('total_inactive_members', total);\n        // frm.doc.total_active_members = r.message.total_count;\n        \n    }\n});\n     \n     frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Annual Meeting Plan\",\n                fields: ['*'],\n                // filters: { 'custom_customer_status': 'Active' }\n            },\n            callback: function(response) {\n                if (response && response.message) {\n                    console.log(\"Comittees:\", response.message);\n                  let comittees = response.message;\n                  for(let committe of comittees){\n                       console.log(\"Comittees:\",  committe.name);\n                     \n                  }\n                    resolve(response.message); \n                } else {\n                        console.log(\"Error fetching active customers\"); \n                }\n            }\n        });\n\n    \n    frappe.call({\n            async: false,\n            method: 'barcode_aec.barcode.get_meeting_count',\n            args: {\n                committee1: frm.doc.name\n            },\n            callback: function(response) {\n                if (!response.exc) {\n                    var count = response.message.count_by_committee[frm.doc.name] || 0;\n                    frm.set_value('annual_meeting_per_year', count);\n                    // frappe.msgprint('Another field updated successfully.');\n                } else {\n                    frappe.msgprint('Error calculating another field.');\n                }\n            }\n        });\n        \n        \n        \n        \n        \n        \n        \n\n        function renderHTML() {\n            frm.fields_dict.dashboard_card.$wrapper.html(`\n                <html>\n                <head>\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\n                </head>\n                <body>\n                    <div class=\"row justify-content-center\" style=\"margin-bottom: 30px;\">\n                        <div class=\"column\" style=\"width: 23%; text-align: center; margin-right: 2%; margin-left: 2%;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-users\" style=\"font-size: 36px; color: #007bff; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Total Members\")}</h5> \n                                    <p class=\"total\" style=\"font-size: 18px;\">${frm.doc.total_members}</p> \n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"column\" style=\"width: 23%; text-align: center; margin-right: 2%;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-user-check\" style=\"font-size: 36px; color: green; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Active Members\")}</h5> \n                                    <p class=\"active\" style=\"font-size: 18px;\">${active}</p> \n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"column\" style=\"width: 23%; text-align: center;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-user-times\" style=\"font-size: 36px; color: red; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Inactive Members\")}</h5> \n                                    <p class=\"inactive\" style=\"font-size: 18px;\">${inactive}</p> \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row justify-content-center\" style=\"margin-bottom: 30px;\">\n                        <div class=\"column\" style=\"width: 23%; text-align: center; margin-right: 2%; margin-left: 2%;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-calendar-alt\" style=\"font-size: 36px; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Annual meeting\")}</h5> \n                                    <p class=\"num\" style=\"font-size: 18px;\">${annual}</p> \n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"column\" style=\"width: 23%; text-align: center; margin-right: 2%;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-handshake\" style=\"font-size: 36px; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Meeting\")}</h5> \n                                    <p class=\"num\" style=\"font-size: 18px;\">${meeting}</p> \n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"column\" style=\"width: 23%; text-align: center;\">\n                            <div class=\"card\" style=\"border-radius: 20px; padding: 15px;\">\n                                <div class=\"container\">\n                                    <i class=\"fas fa-cube\" style=\"font-size: 36px; display: block; margin: auto;\"></i>\n                                    <h5 style=\"display: inline-block;\">${__(\"Products\")}</h5> \n                                    <p class=\"num\" style=\"font-size: 18px;\">${product_count}</p> \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </body>\n                </html>\n            `);\n        }\n    // frm.save();    \n    }\n    \n});\n// frm.save();\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2024-07-13 14:02:46.180390",
  "module": null,
  "name": "group",
  "script": "frappe.ui.form.on('Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrappe.call({\n\t\t    method:\"frappe.client.get_list\",\n\t\t    args:{\n\t\t        doctype:\"Item\",\n\t\t      //  fields:[\"item_name\"],\n\t\t        fields: ['item_name'],\n\t\t        order_by: 'item_name ASC',\n\t\t    },\n\t\t    callback:function(response){\n\t\t        console.log(\"HIIII\",response.message);\n\t\t    }\n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-08-11 09:43:44.274681",
  "module": null,
  "name": "Budget request HTML2",
  "script": "frappe.ui.form.on('Budget Request',  {\r\n    refresh: function(frm) {\r\n        // use the __islocal value of doc,  to check if the doc is saved or not\r\n        if(frm.doc.__unsaved && !frm.doc.department) frappe.msgprint(\"Set Department First and Save The Doc \");\r\n        if(frm.doc.department && !frm.doc.budget_items_details.length){\r\n            frappe.call({\r\n                method: \"barcode_aec.api.get_items_per_department\",\r\n                args: {\r\n                    department: frm.doc.department,\r\n                    // order_by: custom_item_category,\r\n                },\r\n                callback(r) {\r\n                    frm.doc.budget_items_details = [];\r\n                    let items = r.message;\r\n                    // items.sort();\r\n                    console.log(\"dddddddddd\");\r\n                    // items.sort((a, b) => a.custom_item_category - b.custom_item_category);\r\n\r\n                    items.forEach((item) => {\r\n                        frm.add_child(\"budget_items_details\", {\r\n                            item_name: item.name,\r\n                            expense_account: item.expense_account,\r\n                            custom_item_category:item.custom_item_category,\r\n                        });\r\n                    });\r\n                    frm.refresh_field();\r\n                },\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n// frm.doc.__unsaved\r\n\r\n// frappe.ui.form.on(\"Budget Request\", {\r\n//   department(frm) {\r\n//       if( frm.doc.__unsaved && !frm.doc.department){\r\n//           msgprint(\"Set Department First and Save the Doc \");\r\n//       }\r\n//       if(frm.doc.department){\r\n//     frappe.call({\r\n//       method: \"budget.budge.api.api.get_items_per_department\",\r\n//       args: {\r\n//         department: frm.doc.department,\r\n//       },\r\n//       callback(r) {\r\n//         frm.doc.budget_items_details = [];\r\n//         let items = r.message;\r\n//         console.log(r.message);\r\n//         items.forEach((item) => {\r\n//           frm.add_child(\"budget_items_details\", {\r\n//             item_name: item.name,\r\n//             expense_account: item.expense_account,\r\n//             custom_item_category: item.custom_item_category,\r\n//           });\r\n//         });\r\n//         frm.refresh_fields();\r\n//       },\r\n//     });\r\n//       }\r\n//   },\r\n\r\n\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// frappe.ui.form.on('Budget Items Details', {\r\n//     custom_show: function(frm, cdt, cdn) {\r\n//         var child = locals[cdt][cdn];\r\n//         var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n//         // Check if form is unsaved\r\n//         if (frm.doc.__unsaved) {\r\n//             frappe.msgprint(__('Please save the form before using this feature.'));\r\n//             return;\r\n//         }\r\n\r\n//         var dialog = new frappe.ui.Dialog({\r\n//             title: __('Enter Monthly Budget Quantities'),\r\n//             fields: [\r\n//                 {\r\n//                     fieldname: 'budget_table',\r\n//                     fieldtype: 'HTML',\r\n//                     label: __('Budget Table')\r\n//                 }\r\n//             ]\r\n//         });\r\n\r\n//         // Add primary action button\r\n//         dialog.set_primary_action(__('Update'), function() {\r\n//             var dialog_values = {};\r\n//             var total_quantity = 0;\r\n//             for (var i = 0; i < months.length; i++) {\r\n//                 var month_fieldname = months[i].toLowerCase();\r\n//                 dialog_values[month_fieldname] = $('#' + month_fieldname + '_' + child.idx).val();\r\n//                 total_quantity += parseFloat(dialog_values[month_fieldname]) || 0;\r\n//             }\r\n//             console.log('Dialog Values:', dialog_values);\r\n\r\n//             frappe.model.set_value(cdt, cdn, 'total_quantity', total_quantity);\r\n\r\n//             var expected_price = child.expected_price;\r\n//             if (!isNaN(expected_price) && !isNaN(total_quantity)) {\r\n//                 var total = total_quantity * expected_price;\r\n//                 console.log('Total Quantity:', total_quantity);\r\n//                 console.log('Expected Price:', expected_price);\r\n//                 console.log('Total:', total);\r\n//                 frappe.model.set_value(cdt, cdn, 'total', total);\r\n//             } else {\r\n//                 frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\r\n//             }\r\n\r\n//             frappe.model.set_value(cdt, cdn, dialog_values);\r\n\r\n//             frm.save();\r\n//             dialog.hide();\r\n//             location.reload()\r\n//         });\r\n\r\n//         var table_html = '<table class=\"table table-bordered\">';\r\n//         for (var i = 0; i < 12; i++) {\r\n//             if (i % 6 === 0) {\r\n//                 table_html += '<tr>';\r\n//             }\r\n//             var month_fieldname = months[i].toLowerCase();\r\n//             var month_value = child[month_fieldname] || '';\r\n//             // Append the row index to the ID of each input field\r\n//             table_html += '<td><label>' + months[i] + '</label><input type=\"text\" class=\"form-control float-input\" id=\"' + month_fieldname + '_' + child.idx + '\" name=\"' + month_fieldname + '\" value=\"' + month_value + '\"></td>';\r\n//             if ((i + 1) % 6 === 0) {\r\n//                 table_html += '</tr>';\r\n//             }\r\n//         }\r\n//         table_html += '</table>';\r\n//         dialog.fields_dict['budget_table'].$wrapper.html(table_html);\r\n\r\n//         dialog.show();\r\n//     },\r\n//     expected_price: function(frm, cdt, cdn) {\r\n//         var child = locals[cdt][cdn];\r\n//         var total_quantity = child.total_quantity || 0;\r\n//         var expected_price = child.expected_price;\r\n\r\n//         if (!isNaN(expected_price) && !isNaN(total_quantity)) {\r\n//             var total = total_quantity * expected_price;\r\n//             console.log('Total Quantity:', total_quantity);\r\n//             console.log('Expected Price:', expected_price);\r\n//             console.log('Total:', total);\r\n//             frappe.model.set_value(cdt, cdn, 'total', total);\r\n//         } else {\r\n//             frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\r\n//         }\r\n//     }\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// frappe.ui.form.on('Budget Request', {\r\n//     // Custom function to perform calculations\r\n//     before_save: function(frm) {\r\n//         let months = [\r\n//             \"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\",\r\n//             \"august\", \"september\", \"october\", \"november\", \"december\"\r\n//         ];\r\n\r\n//         let total_quantity = 0;\r\n//         let total_amount = 0;\r\n\r\n//         frm.doc.item_summary = [];\r\n\r\n//         for (let month of months) {\r\n//             let month_total_quantity = 0;\r\n//             let month_total_amount = 0;\r\n\r\n//             frm.doc.budget_items_details.forEach((item) => {\r\n//                 // Consider the value as zero if the status is not \"Accepted\"\r\n//                 let quantity = item.status == \"Accepted\" ? (item[month] || 0) : 0;\r\n//                 let amount = quantity * (item.expected_price || 0);\r\n\r\n//                 month_total_quantity += quantity;\r\n//                 month_total_amount += amount;\r\n//             });\r\n\r\n//             // Add summary for the month\r\n//             frm.add_child(\"item_summary\", {\r\n//                 month: month,\r\n//                 total: month_total_amount,\r\n//                 total_quantity: month_total_quantity,\r\n//             });\r\n\r\n//             total_amount += month_total_amount;\r\n//             total_quantity += month_total_quantity;\r\n//         }\r\n\r\n//         frm.doc.total = total_amount;\r\n//         frm.doc.total_quantity = total_quantity;\r\n\r\n//         // // Explicitly show the submit button if the form is saved\r\n//         // if (frm.doc.docstatus === 0 && frm.doc.__unsaved) {\r\n//         //     frm.set_primary_action(__('Submit'), function() {\r\n//         //         frm.save('Submit');\r\n//         //     });\r\n//         // }\r\n\r\n//         frm.refresh_fields();\r\n//     },\r\n\r\n//     // Call the calculation function after the form is saved\r\n//     // after_save: function(frm) {\r\n//     //     frm.events.calculate_totals(frm);\r\n//     // }\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n// frappe.ui.form.on('Budget Request', {\r\n//     before_save: function(frm) {\r\n//         let total_quantity = 0;\r\n\r\n//         // Iterate over each row in budget_items_details\r\n//         frm.doc.budget_items_details.forEach((item) => {\r\n//             total_quantity += (item.total_quantity || 0); // Sum up the total_quantity of each row\r\n//         });\r\n\r\n//         // Update total_quantity field in the parent form\r\n//         frm.doc.total_quantity = total_quantity;\r\n\r\n//         frm.refresh_fields();\r\n//     },\r\n// });\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 0,
  "modified": "2024-08-27 20:59:49.330197",
  "module": null,
  "name": "add popup for send emails",
  "script": "frappe.ui.form.on('Issue', {\n    custom_get_entity_contact: function(frm) {\n        var lastFilter = null;\n        console.log(\"hello\");\n        var d = new frappe.ui.Dialog({\n            title: \"Authority Filter\",\n            fields: [\n                {\n                    fieldname: \"type\",\n                    fieldtype: \"Select\",\n                    label: __(\"Contact Type\"),\n                    options: [\n                        'External Entities',\n                        'Ministry Entities',\n                        'Affiliate Party'\n                    ],\n                    default: '',\n                    onchange: function() {\n                        var type = d.get_value('type');\n                        if (type === 'External Entities') {\n                            d.fields_dict.external_entities.$wrapper.show();\n                              d.fields_dict.authority.$wrapper.show();\n                            d.fields_dict.authority.$wrapper.hide();\n                            d.fields_dict.parent_authority.$wrapper.hide();\n                            d.fields_dict.sector.$wrapper.hide();\n                            d.fields_dict.center_management.$wrapper.hide();\n                            d.fields_dict.branch_management.$wrapper.hide();\n                        } else if(type === 'Ministry Entities') {\n                            d.fields_dict.external_entities.$wrapper.hide();\n                            d.fields_dict.authority.$wrapper.show();\n                              d.fields_dict.parent_authority.$wrapper.hide();\n                            d.fields_dict.sector.$wrapper.show();\n                            d.fields_dict.center_management.$wrapper.show();\n                            d.fields_dict.branch_management.$wrapper.show();\n                        } else if(type === 'Affiliate Party'){\n                            d.fields_dict.parent_authority.$wrapper.show();\n                            d.fields_dict.external_entities.$wrapper.hide();\n                            d.fields_dict.authority.$wrapper.show();\n                            d.fields_dict.sector.$wrapper.hide();\n                            d.fields_dict.center_management.$wrapper.hide();\n                            d.fields_dict.branch_management.$wrapper.hide();\n                        } else {\n                            d.fields_dict.parent_authority.$wrapper.hide();\n                            d.fields_dict.external_entities.$wrapper.hide();\n                            d.fields_dict.authority.$wrapper.hide();\n                            d.fields_dict.sector.$wrapper.hide();\n                            d.fields_dict.center_management.$wrapper.hide();\n                            d.fields_dict.branch_management.$wrapper.hide();\n                        }\n                    }\n                }, \n                {\n                    fieldname: \"external_entities\",\n                    fieldtype: \"Link\",\n                    label: __(\"External Entities\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        return {\n                            filters: [\n                                ['parent_authority', '=', 'External Entities']\n                            ]\n                        };\n                    }\n                },\n                {\n                    fieldname: \"authority\",\n                    fieldtype: \"Link\",\n                    label: __(\"Ministries\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        return {\n                            filters: [\n                                ['parent_authority', '=', 'Ministries']\n                            ]\n                        };\n                    }\n                },\n                {\n                    fieldname: \"parent_authority\",\n                    fieldtype: \"Link\",\n                    label: __(\"Affiliate Party\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        let authority = d.get_values().authority;\n                        return {\n                            filters: [\n                                ['parent_authority', '=', authority],\n                                ['custom_affiliate_party','=',1]\n                            ]\n                        };\n                    }\n                },\n               \n                {\n                    fieldname: \"sector\",\n                    fieldtype: \"Link\",\n                    label: __(\"Sector\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        let authority = d.get_values().authority;\n                        if (authority) {\n                            return {\n                                filters: [\n                                    ['parent_authority', '=', authority],\n                                    ['custom_affiliate_party','=',0]\n                                ]\n                            };\n                        } else {\n                            frappe.msgprint(__(\"Please select an Authority first.\"));\n                            return;\n                        }\n                \n                    },\n              \n                },\n                {\n                    fieldname: \"center_management\",\n                    fieldtype: \"Link\",\n                    label: __(\"Center Management\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        let sector = d.get_values().sector;\n                        if (sector) {\n                            return {\n                                filters: [\n                                    ['parent_authority', '=', sector],\n                                    ['custom_affiliate_party','=',0]\n                                ]\n                            };\n                        } else {\n                            frappe.msgprint(__(\"Please select an Authority & Sector first.\"));\n                            return;\n                        }\n                    }\n                }, {\n                    fieldname: \"branch_management\",\n                    fieldtype: \"Link\",\n                    label: __(\"Branch Management\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        let center_management = d.get_values().center_management;\n                        if (center_management) {\n                            return {\n                                filters: [\n                                    ['parent_authority', '=', center_management],\n                                    ['custom_affiliate_party','=',0]\n                                ]\n                            };\n                        } else {\n                            frappe.msgprint(__(\"Please select an Authority & Sector & Center Management first.\"));\n                            return;\n                        }\n                    }\n                }, {\n                    fieldtype: \"Table\",\n                    fieldname: 'contact_tab',\n                    label: __(\"Table Contact\"),\n                    fields: [{\n                            fieldtype: \"Check\",\n                            fieldname: \"select\",\n                            label: __(\"Select\"),\n                            in_list_view: 1\n                        },\n                        {\n                            label: \"Authority\",\n                            fieldtype: \"Data\",\n                            fieldname: \"authority\",\n                            // in_place_edit: false,\n                            in_list_view: 1\n                            \n                        },\n                        {\n                            label: 'Phone',\n                            fieldtype: \"Data\",\n                            fieldname: \"phone\",\n                            // in_place_edit: false,\n                            in_list_view: 1\n                        },\n                        {\n                            label: \"Email\",\n                            fieldtype: \"Data\",\n                            fieldname: \"email\",\n                            // in_place_edit: false,\n                            in_list_view: 1\n                        }\n                    ]\n                },\n\n            ],\n            primary_action_label: __('Search'),\n            primary_action: function() {\n                var val = d.get_values();\n                var fil = val.branch_management || val.center_management || val.sector || val.authority;\n                // Check if the current filter is the same as the last used filter\n                if (fil !== lastFilter) {\n                    // If not the same, update the last filter and perform the search\n                    lastFilter = fil;\n                    searchContact(fil);\n                }\n            },\n            secondary_action_label: __('Append to Table'),\n            secondary_action: function() {\n                console.log(d.get_values().contact_tab);\n                let contactTableData = d.get_values().contact_tab;\n                for (let row of contactTableData) {\n                    if (row.select) {\n                        let child = frm.add_child(\"custom_the_contact\");\n                        child.authority = row.authority;\n                        child.contact = row.phone;\n                        child.email = row.email;\n                        refresh_field(\"custom_the_contact\");\n                        console.log(row.__checked);\n                        console.log(row.email);\n                        console.log(row.phone);\n                        d.hide();\n                    }\n                }\n\n            },\n            size: 'large',\n\n        });\n\n        d.show();\n////////////////////////////////////////////////////////////////////////\n        // Trigger onchange event for the Contact Type field to show/hide fields based on its value\n        d.fields_dict.type.$input.trigger('change');\n///////////////////////////////////////////////////////////////////////\n        // d.$wrapper.find('.modal-dialog').css(\"width\",\"800px\");\n        // d.$wrapper.find('.form-control[data-fieldname=\"sector\"]').css(\"width\",\"200px\");\n\n        function searchContact(fil) {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Contact\",\n                    fields: ['*'],\n                    filters: { 'custom_authority': fil }\n                },\n                callback: function(response) {\n                    let msg = response.message;\n                    for (let row of msg) {\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Contact\",\n                                name: row.name,\n                            },\n                            callback: function(r) {\n\n                                let contact = r.message;\n                                let phoneNos = contact.phone_nos;\n                                let emails = contact.email_ids;\n                                let authority = contact.custom_authority;\n\n                                if (d.fields_dict.contact_tab.df) {\n                                    if (!d.fields_dict.contact_tab.df.data) {\n                                        d.fields_dict.contact_tab.df.data = [];\n                                    }\n\n                                }\n                                if (phoneNos.length >= emails.length) {\n                                    for (let pp of phoneNos) {\n                                        d.fields_dict.contact_tab.df.data.push({\n                                            name: contact.name,\n                                            authority: authority,\n                                            phone: pp.phone,\n                                            email: (pp.idx <= emails.length) ? emails[pp.idx - 1].email_id : '',\n                                        });\n                                    }\n                                } else if (emails.length >= phoneNos.length) {\n                                    for (let ee of emails) {\n                                        d.fields_dict.contact_tab.df.data.push({\n                                            name: contact.name,\n                                            authority: authority,\n                                            phone: (ee.idx <= phoneNos.length) ? phoneNos[ee.idx - 1].phone : '',\n                                            email: ee.email_id\n                                        });\n                                    }\n                                }\n                                d.fields_dict.contact_tab.grid.refresh();\n                            }\n                        });\n                    }\n                }\n            });\n        }\n        /////////////////the end of btn/////////////////\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-09-05 11:57:15.562384",
  "module": null,
  "name": "send mail",
  "script": "frappe.ui.form.on('Issue', {\n    custom_send_emails: function(frm) {\n        if (!frm.doc.custom_body_mail) {\n            frappe.msgprint(\"Please add body mail\");\n        } else {\n            frappe.call({\n                method: \"barcode_aec.issue.send_email\",\n                args: {\n                \n                    name: frm.doc.name,\n                    print_format:'issue is letter'\n                },\n                callback: function(response) {\n                    if (!response.exc) {\n                        console.log(response);\n                        frappe.msgprint(\"Invitation sent to Committee Deputy\");\n                        // Perform any additional actions upon successful email sending\n                    } else {\n                        frappe.msgprint(\"Failed to send email: \" + response.exc);\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2024-07-13 14:02:40.021687",
  "module": null,
  "name": "iten new doc",
  "script": "frappe.ui.form.on('Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tlet rows = [\n\t\t    {\"name\": \"steel\" ,\"code\": 111 ,\"group\": \"itemA\" ,\"stock_uom\": \"Nos\"},\n\t\t    {\"name\": \"steelq\" ,\"code\": 222 ,\"group\": \"itemb\" ,\"stock_uom\": \"box\"},\n\t\t    {\"name\": \"steelP\" ,\"code\": 333 ,\"group\": \"itemc\" ,\"stock_uom\": \"box\"},\n\t\t    \n\t\t    ];\n\t\t    for(let row of rows){\n\t\tlet newdoc = frappe.new_doc(\"Item\");\n        newdoc.item_name = row.name;\n        newdoc.item_code = row.code;\n        newdoc.item_group = row.group;\n          newdoc.stock_uom = row.stock_uom;\n                newdoc.db.insert();\n\t\t    }\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "itemx",
  "enabled": 0,
  "modified": "2024-06-16 16:26:38.937945",
  "module": null,
  "name": "new doc",
  "script": "frappe.ui.form.on('Itemx', {\n    item_code:function(frm){\n        // item_name(frm) {\n\t\t// your code here\n// \t\tlet rows = [\n// \t\t    {\"name\": \"steel\" ,\"code\": 111 ,\"group\": \"itemA\" ,\"stock_uom\": \"Nos\"},\n// \t\t    {\"name\": \"steelq\" ,\"code\": 222 ,\"group\": \"itemb\" ,\"stock_uom\": \"box\"},\n// \t\t    {\"name\": \"steelP\" ,\"code\": 333 ,\"group\": \"itemc\" ,\"stock_uom\": \"box\"},\n\t\t    \n// \t\t    ];\n// \t\t    for(let row of rows){\n// \t\tlet newdoc = frappe.model.get_new_doc(\"Itemx\");\n//         newdoc.item_name = row.name;\n//         newdoc.item_code = row.code;\n//         newdoc.item_group = row.group;\n//           newdoc.stock_uom = row.stock_uom;\n          console.log(\"done\");\n                \n\t\t    }\n// \t}    \n    // }\n\t\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2024-07-13 14:02:33.028971",
  "module": null,
  "name": "list view hide status",
  "script": "frappe.listview_settings['Item'] = {\n    refresh(frm){\n $(\".filterable\").hide();\n $(document).ready(function() {\n        $(\".list-row-head:contains('Status')\").each(function() {\n            $(this).html(function(_, html) {\n                return html.replace(/(ID)/g, '<span style=\"display:none\">$1</span>');\n            });\n        });\n    });\n\n},\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "itemx",
  "enabled": 1,
  "modified": "2024-06-20 15:54:21.377611",
  "module": null,
  "name": "n",
  "script": "// frappe.ui.form.on('itemx', {\n    \n// \titem_name: function(frm) {\n// \t    var \n// \t    itm = frm.doc.item_name;\n\t  \n//     \t    if(itm == 1){\n//     \t    console.log(\"hi\");\n//     \t}\n// \t}\n// });\n//(1)\n// frappe.ui.form.on('itemx',{\n//   refresh(frm){\n//       frappe.msgprint(\"hey!!\");\t     \n//  frappe.throw(\"Check number required\");\n\n       \n//   } \n// });\n////(1)\n// frappe.ui.form.on('itemx',{\n//     onload(frm){\n//         // frappe.msgprint(\"hey....\");\n//             frappe.msgprint(`Item ${frm.doc.item_name}  has created`);\n//     }\n// });\n\n////(2)\n// frappe.ui.form.on('itemx',{\n//     onload(frm){\n//         frm.set_query(\"custom_territory\",function(){\n//             return {\n//                 filters:   [\n//                     [\"Territory\", \"territory_name\", \"=\", \"Egypt\"]\n//                     ]\n//             };\n           \n            \n//         });\n//     }\n// });\n////(3)\n// frappe.ui.form.on('itemx' ,{\n//     // filter on field on (items) child table(products)\n//     refresh(frm){\n//         \t// your code here\n// \t\tlet field1 = frm.set_query(\"items\",\"products\",function(doc,cdt,cdn){\n// \t\t    return {\n//                 filters: [\n//                     ['item_group','=','Fixed Asset']\n//                 ]\n//             };\n// \t\t});\n//     }\n// });\n\n////(4)\n// frappe.ui.form.on('itemx', {\n//     refresh: function(frm) {\n//          // filter on field on (items) child table(products) depend on another field (category) \n//         frm.fields_dict['products'].grid.get_field('items').get_query = function(doc, cdt, cdn) {\n//             var d = locals[cdt][cdn];\n//             return {\n//                 filters: {\n//                     'item_group': d.category\n//                 }\n//             };\n//         };\n//     }\n// });\n\n////(5)\n// frappe.ui.form.on('itemx',{\n//     refresh(frm){\n//         frm.set_value('item_name','\u062d\u0628\u064a\u0628\u064a');\n        \n//     }\n// });\n/////(6)\n// frappe.ui.form.on('itemx', {\n// \titem_group:function(frm){\n// \t    //Update child table if it does not appear by  frm.refresh_field\n// \t    if(frm.doc.item_group == 'Fixed Asset'){\n// \t        \t        console.log(\"Done\");\n\n// \t          frm.add_child('products', {\n//                     'items': '\u0645\u0627\u064a\u0643\u0631\u0648\u064a\u0641',\n//                     'category': frm.doc.item_group\n//                 });\n// \t       frm.refresh_field('products'); \n// \t        console.log(\"Done\");\n\t        \n// \t    }\n// \t}\n// });\n\n/////(7)\n//// Problem \n// frappe.ui.form.on('itemx', {\n//     item_code:function(frm){\n\n// \t\t// your code here\n// \t\tlet rows = [\n// \t\t    {\"name\": \"11\" ,\"code\": 111 ,\"group\": \"Fixed Asset\" ,\"stock_uom\": \"Nos\"},\n// \t\t    {\"name\": \"eelZz\" ,\"code\": 222 ,\"group\": \"Fixed Asset\" ,\"stock_uom\": \"box\"},\n// \t\t    {\"name\": \"teelPz\" ,\"code\": 333 ,\"group\": \"Fixed Asset\" ,\"stock_uom\": \"box\"},\n\t\t    \n// \t\t    ];\n// \t\t    for(let row of rows){\n        \n// \t\tlet newdoc = frappe.model.get_new_doc(\"itemx\");\n//         newdoc.item_name = row.name;\n//         newdoc.item_code = row.code;\n//         newdoc.item_group = row.group;\n//         newdoc.stock_uom = row.stock_uom;\n//         frappe.db.insert(newdoc)\n//                 .then(function() {\n//                     frappe.msgprint(\"Meeting Have Been Created For Each Committe\");\n//                     // frappe.model.set_value(\"Meeting\", meeting.name, \"custom_meeting_type\", \"Annual Meeting\");\n//                     // frappe.model.set_value(\"Meeting\", meeting.name,\"custom_annual_meeting_ref\", frm.doc.name);// Set the workflow state here\n\n//                 })\n//                 .catch(function(err) {\n//                     console.log(\"Error creating meeting \", err);\n//                 });\n    \n//           console.log(\"done\");\n         \n//     }\n//     }   \n// });\n\n////(8)\n// frappe.ui.form.on('itemx', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\tfrappe.call({\n// \t\t    method:\"frappe.client.get_list\",\n// \t\t    args:{\n// \t\t        doctype:\"itemx\",\n// \t\t        fields: ['item_name', 'item_code'],\n// \t\t        order_by: 'item_code DESC',\n// \t\t    },\n            // \"limit_page_length\": 500,\n// \t\t    callback:function(response){\n// \t\t        console.log(\"HIIII\",response.message);\n// \t\t    }\n// \t\t});\n// \t}\n// });\n\n////(9)\n\n// frappe.ui.form.on('itemx', {\n// \trefresh(frm) {\n// \t    ///doc and name\n//       let  user = frappe.get_doc('itemx','STO-ITEM-2024-00001');\n//          console.log('2',user);\n//         // frappe.delete_doc('File', 'TASK00002')\n// }\n// });\n\n////(10)\n// frappe.ui.form.on('itemx', {\n// \trefresh(frm) {\n// \t    ///doc and name\n//         let  user = frappe.db.delete_doc('itemx','2-1');\n//          console.log('2',user);\n// }\n// });\n\n\n////(11)\n// frappe.ui.form.on('itemx', {\n// \trefresh(frm) {\n// \t    ///doc and name\n//         let  user = frappe.db.delete_doc('itemx','2-1');\n//          console.log('2',user);\n// }\n// });\n\n////(12)\n// frappe.ui.form.on('itemx',{\n//     refresh(frm){\n//          frm.add_custom_button(__('Print Format'),function(){\n//                 var print_format = 'itemx';\n//                 frappe.utils.print(\n//                     frm.doctype,                \n//                     frm.docname,            \n//                     print_format,  \n//                     frm.doc.letter_head,\n//                     \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                \n//                 ); \n//             });\n          \n       \n//     }\n// });\n\n// ////(13)\n//  frappe.ui.form.on('itemx',{\n//      refresh(frm){\n//          let fr3o = [];\n//              frappe.call({\n//             async:false,\n//             method: 'frappe.client.get',\n//             args: {\n//                 doctype: 'Item Group',\n//                 filters: { name: frm.doc.item_group}\n//             },\n//             callback: function(r) {\n//                  fr3o = r.message;\n//                  console.log(fr3o);\n//             }\n//         });\n//     return fr3o;     \n//      }\n//  });\n \n \n \n ////(14)\n//  frappe.ui.form.on('itemx', {\n//     refresh: function(frm) {\n// var products = frm.doc.custom_products_image;\n//         console.log(\"products:\",products);\n\n//         var html = `\n//         <html>\n//         <head>\n//             <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n//             <style>\n//                 .grid-container {\n//                     display: grid;\n//                     grid-template-columns: repeat(3, 1fr); /* Three items per row */\n//                     grid-gap: 20px; /* Space between grid items */\n//                 }\n//                 .grid-item {\n//                     text-align: center;\n//                     border: 2px solid #000000;\n//                     border-radius: 10px; /* Rounded corners */\n//                     overflow: hidden; /* Hide overflow content */\n//                 }\n//                 .grid-item img {\n//                     width: 100%; /* Ensure image fits inside grid item */\n//                     height: auto; /* Maintain aspect ratio */\n//                 }\n//             </style>\n//         </head>\n//         <body>\n//             <div class=\"grid-container\">\n//         `;\n        \n//         for (let row of products) {\n//             html += `\n//                 <div class=\"grid-item\">\n//                     <img src=\"${row.attach}\">\n//                 </div>\n//             `;\n//         }\n        \n//         html += `\n//             </div>\n//         </body>\n//         </html>\n//         `;\n        \n//         frm.fields_dict.custom_products_images.$wrapper.html(html);\n//     }\n// });\n\n\n////(15)\n// frappe.ui.form.on('itemx',{\n//     refresh(frm){\n//             frappe.call({\n//     'method': 'frappe.client.get_value',\n//     'args': {\n//     'doctype': 'CHecks_settings',\n//     'fieldname': ['collected_account'],\n//     // 'filters': {'name': frm.doc.owner}\n//     },\n//     callback: function(r) {\n//     console.log(r.message);\n    \n//     }\n//     });\n//     }\n// });\n\n\n\n/////)(16)\n\n// frappe.ui.form.on('itemx',{\n//     refresh(frm){\n//     frm.add_custom_button(__(\"GO to Purchase Order\"),function(){\n//         frappe.set_route('Form', 'Purchase Order', 'PUR-ORD-2024-00033');\n//     }).addClass('btn-danger');\n        \n// }\n// });\n\n///(17)\n// frappe.ui.form.on('itemx', {\n//     onload: function(frm) {\n//         var current = '';\n//             current = frm.doc.item_name;\n//         frm.fields_dict.custom_label.$wrapper.html(`\n//             <html>\n//                 <head>\n//                     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n//                     <style>\n//                         .title {\n//                             font-size: 20px;\n//                             text-align: center;\n//                         }\n//                     </style>\n//                 </head>\n//                 <body>\n//                     <p class='title'>${current}</p>\n//                 </body>\n//             </html>\n//         `);\n//     }\n// });\n\n/////(18)POPUP\n//  frappe.ui.form.on('itemx', {\n//     refresh: function(frm) {\n//         var d = new frappe.ui.Dialog({\n//                 title: __('Advanced Search'),\n//                 fields: [\n//                     {'label': 'Item Code', 'fieldname':'item_code', 'fieldtype':'Data'},\n//                     {'label': 'Item Name', 'fieldname':'item_name', 'fieldtype':'Data'},\n//                     {'label': 'Customer Name', 'fieldname':'customer_name', 'fieldtype':'Data'},\n//                     {fieldname: 'results', fieldtype: 'HTML'}\n//                 ],\n//             });\n\n//             d.set_primary_action(__('Search'), function() {\n//                 searchCustomers();\n//             });\n\n//             d.show();\n\n    \n                \n//             function searchCustomers() {\n//                 var values = d.get_values();\n//                 frappe.call({\n//                     method: 'frappe.client.get_list',\n//                     args: {\n//                         doctype: 'itemx',\n//                         filters: {\n//                             item_code: values.item_code,\n//                             // item_name: values.item_name\n//                         },\n//                         fields: ['item_name']\n//                     },\n//                     callback: function(response) {\n//                         // Handle search results and update table\n//                         var items = response.message;\n//                         var html = '<table class=\"table table-bordered\">'\n//                                     + '<thead><tr><th>Select</th><th>ITEM NAME</th></tr></thead>'\n//                                     + '<tbody>';\n//                         items.forEach(function(item) {\n//                             html += '<tr><td><button class=\"btn btn-primary select-customer\" data-customer=\"' + item.item_name + '\">Select</button></td><td>' + item.item_name + '</td></tr>';\n//                         });\n//                         html += '</tbody></table>';\n//                         d.fields_dict.results.$wrapper.html(html);\n\n//                         // Bind click event for select button\n//                         d.fields_dict.results.$wrapper.find('.select-customer').click(function() {\n//                             var selected_customer = $(this).attr('data-customer');\n//                             frm.set_value('item_code', selected_customer);\n//                             d.hide();\n//                         });\n//                     }\n//                 });\n\n//             }  \n                    \n//     }  \n// });\n\n\n////(19)\n// frappe.ui.form.on('itemx', {\n//      custom_customer: function(frm) {\n// frappe.call({\n//                 method: \"frappe.client.set_value\",\n//                 args: {\n//                     doctype: \"Customer\",\n//                     name: frm.doc.custom_customer,\n//                 fieldname:{\n//                     \"custom_tax_id_2\":1,\n//                 }\n//             },\n//             callback: function(response) {\n//                 console.log('Updated ');\n//                 msgprint('Updated');\n//                 }\n//             });\n//      }\n// });\n\n////(20)\n// frappe.ui.form.on('itemx', {\n//      custom_customer: function(frm) {\n// frappe.call({\n//                 method: \"frappe.client.set_value\",\n//                 args: {\n//                     doctype: \"Customer\",\n//                     name: frm.doc.custom_customer,\n//                 fieldname:{\n//                     \"custom_tax_id_2\":1,\n//                 }\n//             },\n//             callback: function(response) {\n//                 console.log('Updated ');\n//                 msgprint('Updated');\n//                 }\n//             });\n//      }\n// });\n\n\nfrappe.ui.form.on('products', {\n    category:function(frm,cdt,cdn){\n        \n        var d = locals[cdt][cdn]\n        \n        if(d.category){\n            frappe.confirm('Are You Sure you want to end this member Committe?',\n                    function(){\n                        // Yes button clicked\n                    //  d.ended = 1;\n                    //  refresh_field('ended', d.name, d.parentfield);\n                //      frm.add_child('products', {\n                //     'committee': d.items,\n                //     'category':d.category\n                    \n                // });\n                // frm.refresh_field('custom_committee_member_history');\n                //  frm.get_field('custom_committees_you_would_like_to_join').grid.remove_row(d.doctype, d.name);\n                 var row = frm.fields_dict['products'].grid.grid_rows_by_docname[d.name];\n                    row.remove();\n                    frm.save();\n                //  frm.reload();\n                    },\n                    function(){\n                        \n                        // frappe.throw(\"You Can't Import This Season with the same month\");\n                        console.log(\"No\");\n                    }\n                \n            );\n            \n        }\n        \n        \n        \n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-08-07 16:15:26.386089",
  "module": null,
  "name": "popup add in child table2",
  "script": "frappe.ui.form.on('Budget Items Details', {\n    custom_show: function(frm, cdt, cdn) {\n        var d = locals[cdt][cdn];\n\n        // Initialize dialog instance\n        var dialog = new frappe.ui.Dialog({\n            title: __('Enter Monthly Budget Quantities'),\n            fields: [\n                {\n                    fieldname: \"january\",\n                    fieldtype: 'Float',\n                    label: __(\"January\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"february\",\n                    fieldtype: \"Data\",\n                    label: __(\"February\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"march\",\n                    fieldtype: \"Data\",\n                    label: __(\"March\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"april\",\n                    fieldtype: \"Data\",\n                    label: __(\"April\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"may\",\n                    fieldtype: \"Data\",\n                    label: __(\"May\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"june\",\n                    fieldtype: \"Data\",\n                    label: __(\"June\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"july\",\n                    fieldtype: \"Data\",\n                    label: __(\"July\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"august\",\n                    fieldtype: \"Data\",\n                    label: __(\"August\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"september\",\n                    fieldtype: \"Data\",\n                    label: __(\"September\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"october\",\n                    fieldtype: \"Data\",\n                    label: __(\"October\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"november\",\n                    fieldtype: 'Float',\n                    label: __(\"November\"),\n                    colspan: 2  // Adjusted width\n                },\n                {\n                    fieldname: \"december\",\n                    fieldtype: \"Data\",\n                    label: __(\"December\"),\n                    colspan: 2  // Adjusted width\n                }\n            ]\n        });\n\n        // Set initial value for January field\n        dialog.set_values({\n            'january': d.january || 0  // Set default to 0 or any other default value\n        });\n\n        // Set primary action button\n        dialog.set_primary_action(__('Update'), function() {\n            var january_value = dialog.get_value('january');\n            \n            // Set the value back to the form\n            frappe.model.set_value(cdt, cdn, 'january', january_value);\n\n            // Optionally, you may want to refresh the form or perform other actions here\n\n            // Hide the dialog after processing\n            dialog.hide();\n        });\n        // Apply custom CSS to adjust layout\n        dialog.$wrapper.find('.modal-dialog').css({\n            'width': '600px', // Adjust width as needed\n            'max-width': '90%'\n        });\n        dialog.$wrapper.find('.form-section').css({\n            'margin-bottom': '10px'\n        });\n\n        // Show the dialog\n        dialog.show();\n    },\n    expected_price: function(frm, cdt, cdn) {\n        var child = locals[cdt][cdn];\n        var total_quantity = child.total_quantity || 0;\n        var expected_price = child.expected_price;\n\n        if (!isNaN(expected_price) && !isNaN(total_quantity)) {\n            var total = total_quantity * expected_price;\n            frappe.model.set_value(cdt, cdn, 'total', total);\n        } else {\n            frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-08-08 08:21:26.816806",
  "module": null,
  "name": "Budget request HTML3",
  "script": "frappe.ui.form.on(\"Budget Request\", {\n  department(frm) {\n      if( frm.doc.__unsaved && !frm.doc.department){\n          msgprint(\"Set Department First and Save the Doc \");\n      }\n      if(frm.doc.department){\n    frappe.call({\n      method: \"budget.budge.api.api.get_items_per_department\",\n      args: {\n        department: frm.doc.department,\n      },\n      callback(r) {\n        frm.doc.budget_items_details = [];\n        let items = r.message;\n        //console.log(r.message);\n        items.forEach((item) => {\n          frm.add_child(\"budget_items_details\", {\n            item_name: item.name,\n            expense_account: item.expense_account,\n            custom_item_category: item.custom_item_category,\n          });\n        });\n       \n      },\n    });\n      }\n  },\n\n\n});\n\n// frappe.ui.form.on('Budget Request', {\n//     // Custom function to perform calculations\n//     refresh: function(frm) {\n//         let months = [\n//             \"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\",\n//             \"august\", \"september\", \"october\", \"november\", \"december\"\n//         ];\n\n//         let total_quantity = 0;\n//         let total_amount = 0;\n\n//         frm.doc.item_summary = [];\n\n//         for (let month of months) {\n//             let month_total_quantity = 0;\n//             let month_total_amount = 0;\n\n//             frm.doc.budget_items_details.forEach((item) => {\n\n//                 let quantity = item.status == \"Accepted\" ? parseFloat(item[month] || 0) : 0;\n//                 let amount = quantity * (item.expected_price || 0);\n//                 //console.log(quantity);\n//                 month_total_quantity += quantity;\n//                 month_total_amount += amount;\n//             });\n\n//             // Add summary for the month\n//             frm.add_child(\"item_summary\", {\n//                 month: month,\n//                 total: month_total_amount,\n//                 total_quantity: month_total_quantity,\n//             });\n\n//             total_amount += month_total_amount;\n//             total_quantity += month_total_quantity;\n//         }\n\n//         frm.doc.total = total_amount;\n//         frm.doc.total_quantity = total_quantity;\n//         frm.refresh_fields();\n//     },\n\n\n// });\n\n\nfrappe.ui.form.on('Budget Request', {\n    refresh: function(frm) {\n        let total_quantity = 0;\n\n        // Iterate over each row in budget_items_details\n        frm.doc.budget_items_details.forEach((item) => {\n            total_quantity += (item.total_quantity || 0); // Sum up the total_quantity of each row\n        });\n\n        // Update total_quantity field in the parent form\n        frm.doc.total_quantity = total_quantity;\n\n        frm.refresh_fields();\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Address",
  "enabled": 1,
  "modified": "2024-07-12 23:26:21.570657",
  "module": null,
  "name": "last doc function",
  "script": "frappe.ui.form.on(\"Address\", {\n\trefresh: function (frm) {\n\t\tfrappe.run_serially([\n\t\t\t() => frappe.timeout(1),\n\t\t\t() => {\n\t\t\t\tconst last_doc = frappe.contacts.get_last_doc(frm);\n\t\t\t\tif (\n\t\t\t\t\tfrappe.dynamic_link &&\n\t\t\t\t\tfrappe.dynamic_link.doc &&\n\t\t\t\t\tfrappe.dynamic_link.doc.name == last_doc.docname\n\t\t\t\t) {\n\t\t\t\t\tfor (let i in frm.doc.links) {\n\t\t\t\t\t\tlet link = frm.doc.links[i];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tlast_doc.doctype == link.link_doctype &&\n\t\t\t\t\t\t\tlast_doc.docname == link.link_name\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tfrappe.set_route(\"Form\", \"Customer\", 1);\n\t\t\t\t\t\t}\n\t\t\t\t\tconsole.log(\"last_doc.doctype \",last_doc.doctype);\n\t\t\t\t\tconsole.log(\"last_doc.docname\",last_doc.docname);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t},\n\t\t]);\n\t},\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2024-07-13 15:10:44.098532",
  "module": null,
  "name": "item call insert into sql",
  "script": "frappe.ui.form.on('Item', {\n\t  custom_create_item(frm) {\n\t\t// your code here\n\t\t\n\t\tfrappe.call({\n            method: \"custom_app.update_table.last_balances\",\n            args: {\n                // country_name:frm.doc.name,\n                // cluster_name:frm.doc.custom_geographical_clusters\n            },\n            callback: function (r) {\n                if (r.message) {\n                  frappe.msgprint((\"Download successfully.\"));\n                }\n            },\n        });\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "update member",
  "enabled": 1,
  "modified": "2024-07-16 09:53:41.519418",
  "module": null,
  "name": "Update member via server script",
  "script": "frappe.ui.form.on('update member', {\n\tupdate(frm) {\n\t\t// your code here\n\t\t\tfrappe.call({\n    \t\t    async:false,\n    \t\t    method:'barcode_aec.update_mem_vol.create_me',\n                callback: function(r) {\n                        console.log(\"Updated\",r.message);\n                        let years = r.message;\n                        //   for (let row of years){\n                        //     console.log(\"Updated\",row.customer_name);\n                        //           frappe.call({\n                        //           method:'frappe.client.insert',\n                        //           args:{\n                        //               doc:{\n                        //                   \"doctype\":\"Customer\",\n                        //                   \"name\":row.customer_name,\n                        //                   custom_volume_of_member_exports_for_three_years:{\n                        //                     'season' : row.season,\n                                         \n                        //                       }\n                        //               },\n                        //           },\n                        //     });\n                               \n                        //   }\n                }\n\t\t});\n\t\t\n\t}\n});\n\n\n// frappe.ui.form.on('Volume Of Member Exports for Three Years', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\tlet d = locals[cdn][cdt];\n// \t\tconsole.log(\"d\",d.season);\n// \t}\n// });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee Generalization",
  "enabled": 0,
  "modified": "2024-07-15 14:41:22.321372",
  "module": null,
  "name": "Committee Generalization2",
  "script": "frappe.ui.form.on('Committee Generalization', {\n    refresh(frm) {\n        frm.add_custom_button(__('Action'), async function() {\n            try {\n                // Check if necessary fields are populated\n                if (frm.doc.committees && frm.doc.condition_of_members) {\n                     frappe.show_progress(\"Getting Contacts..\", 97, 100, \"Please wait\");\n                    \n                    // Fetch customers asynchronously\n                    let customers = await getCustomers(frm);\n                    // console.log('Customers(1) fetched:', customers);\n                    \n                    // Process customers and get customer names\n                    let customerNames = await my_full(frm,customers);\n                    console.log('Customer names:', customerNames);\n                    \n                    // Get active customer emails\n                    let emails = await getActiveCustomer(frm,customerNames);\n                    console.log('Active customer emails:', emails);\n                    \n                    // Call my_third function to handle further processing (e.g., creating newsletter)\n                    // await my_third(emails, frm);\n\n                    frappe.msgprint('Action completed successfully.');\n\n                } else {\n                    frappe.msgprint('Please fill in committees and condition of members.');\n                }\n            } catch (error) {\n                console.error('Error in custom button action:', error);\n                frappe.msgprint('Error: ' + error.message);\n            } finally {\n                frappe.hide_progress();\n                console.log('Action button action completed');\n            }\n        });\n    }\n});\n\nasync function my_full(frm,customers) {\n    let customerNames = [];\n    try {\n        console.log('Processing customers full func...');\n        \n        // Process each customer and extract names\n        for (const customer of customers) {\n            const name1 = customer.name;\n            // console.log('Customer Name full func...:', name1);\n            customerNames.push(name1);\n        }\n        \n        console.log('my_full - Customer processing complete');\n        \n        // Return the array of customer names\n        return customerNames;\n        \n    } catch (error) {\n        console.error('Error in my_full function:', error);\n        throw error;\n    }\n}\n\nasync function getCustomers(frm) {\n    return new Promise((resolve, reject) => {\n        let stat = frm.doc.condition_of_members;\n        \n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Customer',\n                limit_page_length: 5000,\n                fields: ['name'],\n                filters: { 'custom_customer_status': stat }\n            },\n            callback: function(response) {\n                if (response && response.message) {\n                    resolve(response.message); // Resolve with fetched customers\n                } else {\n                    reject(new Error('Error fetching active customers'));\n                }\n            }\n        });\n    });\n}\n\nasync function getActiveCustomer(frm, customerNames) {\n    let emailes = [];\n    let authorities_committees = frm.doc.committees;\n    console.log(authorities_committees);\n    \n    // Define an array to collect all promises from frappe.call\n    let promises = [];\n    \n    for (let name of customerNames) {\n        let promise = new Promise((resolve, reject) => {\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Customer\",\n                    name: name\n                },\n                callback: function(response) {\n                    if (response && response.message) {\n                        resolve(response.message);\n                    } else {\n                        reject(`Error fetching customer with name ${name}`);\n                    }\n                }\n            });\n        });\n        \n        promises.push(promise);\n    }\n    \n    try {\n        // Wait for all promises to resolve\n        const customers = await Promise.all(promises);\n        \n        // Iterate through each customer's data\n        for (let customer of customers) {\n            let committees = customer.custom_committees_you_would_like_to_join;\n            \n            for (let committee of committees) {\n                if (authorities_committees === committee.committees) {\n                    emailes.push(customer.custom_email);\n                }\n            }\n        }\n        \n        console.log('emailes.length', emailes.length);\n        console.log(\"emailes\", emailes);\n           frappe.new_doc(\"Customer Newsletter\").then(() => {\n        for (let email of emailes) {\n            let child = cur_frm.add_child(\"customer_email\");\n            child.email = email;\n            cur_frm.refresh_fields(\"customer_email\");\n        }\n    });\n        \n        return emailes; // Return the array of collected emails\n    } catch (error) {\n        console.error(error);\n        return []; // Return empty array or handle error as needed\n    }\n}\n\n\n// async function my_third(emails, frm) {\n//     try {\n//         frappe.show_progress(__('Creating Newsletter...'));\n        \n//         // Create a new Customer Newsletter\n//         let doc = await frappe.new_doc(\"Customer Newsletter\");\n        \n//         // Add each email to the customer newsletter\n//         for (let email of emails) {\n//             doc.customer_email.push({\n//                 email: email\n//             });\n//         }\n        \n//         await doc.save();\n        \n//         frappe.msgprint('Newsletter created successfully.');\n        \n//     } catch (error) {\n//         console.error('Error in my_third function:', error);\n//         throw error;\n//     } finally {\n//         frappe.hide_progress();\n//         console.log('my_third function completed');\n//     }\n// }\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Committee Generalization",
  "enabled": 1,
  "modified": "2024-07-17 16:22:58.783432",
  "module": null,
  "name": "client get emails",
  "script": "frappe.ui.form.on('Committee Generalization', {\nrefresh(frm) {\n    frm.add_custom_button(__('Action'), function(){\n      if(frm.doc.__unsaved) frappe.throw(\"save doc first\")\n      frappe.show_progress(\"Getting Contacts..\", 97, 100, \"Please wait\");\n\n      frappe.call({\n        \"method\": \"barcode_aec.get_emails_copy.get_active_customer\",\n        \"args\": {\"name\": frm.doc.name, \n                \"condition_of_members\": frm.doc.condition_of_members,\n                \"committees\":frm.doc.committees,\n            \n        },\n        \"callback\": function(r) {\n          let emails = r.message\n        //   let customer_emails = []\n        // console.log(\"emails\",emails);\n        console.log(r);\n          \n        //   for (let email of emails) {\n        //       customer_emails.push(frappe.get_doc({\n        //           \"doctype\": \"Newsletter Attachment\",\n        //           \"parentfield\": \"customer_email\",\n        //           \"parenttype\": \"Customer Newsletter\",\n        //           \"email\": email\n        //       }))\n        //   }\n          frappe.new_doc(\"Customer Newsletter\", {\n            \n          }).then(() => {\n            for(let email of emails) {\n                // console.log(email);\n              cur_frm.add_child(\"customer_email\",{\n                \"email\": email\n              })\n            }\n            cur_frm.refresh_fields()\n          })\n        }\n      })\n    }, __(\"\"));\n\n  }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Generalization",
  "enabled": 0,
  "modified": "2024-09-17 13:53:54.026661",
  "module": null,
  "name": "insert email server script",
  "script": "frappe.ui.form.on('Generalization', {\nrefresh(frm) {\n    frm.add_custom_button(__('Action'), function(){\n      if(frm.doc.__unsaved) frappe.throw(\"save doc first\")\n      frappe.show_progress(\"Getting Contacts..\", 97, 100, \"Please wait\");\n        for (let committees of frm.doc.committees){\n           \n        \n             console.log(\"cccc\",committees.the_commission);\n          frappe.call({\n            \"method\": \"barcode_aec.get_emails.get_active_customer\",\n            \"args\": {\"name\": frm.doc.name, \n                    \"condition_of_members\": frm.doc.condition_of_members,\n                    \"committees\": committees.the_commission,\n                \n            },\n            \"callback\": function(r) {\n              let emails = r.message\n            //   let customer_emails = []\n            console.log(\"emails\",emails);\n              \n              // for (let email of emails) {\n              //     customer_emails.push(frappe.get_doc({\n              //         \"doctype\": \"Newsletter Attachment\",\n              //         \"parentfield\": \"customer_email\",\n              //         \"parenttype\": \"Customer Newsletter\",\n              //         \"email\": email\n              //     }))\n              // }\n              frappe.new_doc(\"Customer Newsletter\", {\n                \n              }).then(() => {\n                for(let email of emails) {\n                    // console.log(email);\n                  cur_frm.add_child(\"customer_email\",{\n                    \"email\": email\n                  })\n                }\n                cur_frm.refresh_fields()\n              })\n            }\n          })\n        }    \n    }, __(\"\"));\n\n  }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "update",
  "enabled": 1,
  "modified": "2024-07-16 15:58:44.055291",
  "module": null,
  "name": "vol server script",
  "script": "frappe.ui.form.on('update', {\n\tupdate(frm) {\n\t\t// your code here\n\t\t\tfrappe.call({\n    \t\t    async:false,\n    \t\t    method:'custom_app.customer_update_vol.update',\n                callback: function(r) {\n                        console.log(\"Updated\",r.message);\n                        let years = r.message;\n                        //   for (let row of years){\n                        //     console.log(\"Updated\",row.customer_name);\n                        //           frappe.call({\n                        //           method:'frappe.client.insert',\n                        //           args:{\n                        //               doc:{\n                        //                   \"doctype\":\"Customer\",\n                        //                   \"name\":row.customer_name,\n                        //                   custom_volume_of_member_exports_for_three_years:{\n                        //                     'season' : row.season,\n                                         \n                        //                       }\n                        //               },\n                        //           },\n                        //     });\n                               \n                        //   }\n                }\n\t\t});\n\t\t\n\t}\n});\n\n\n// frappe.ui.form.on('Volume Of Member Exports for Three Years', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\tlet d = locals[cdn][cdt];\n// \t\tconsole.log(\"d\",d.season);\n// \t}\n// });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "hierarchy",
  "enabled": 1,
  "modified": "2024-07-29 12:27:41.094275",
  "module": null,
  "name": "server side call",
  "script": "frappe.ui.form.on('hierarchy', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrappe.call({\n\t\t    method:'web.get_child.get_design',\n\t\t    args:{},\n\t\t    callback:function(){\n\t\t        console.log(r.message);\n\t\t    }\n\t\t    \n\t\t    \n\t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-08-11 09:43:19.836801",
  "module": null,
  "name": "create new doc with childtable",
  "script": "\n\nfrappe.ui.form.on(\"Budget Request\", {\n    before_workflow_action: (frm) => {\n        console.log(frm.doc.workflow_state);\n        console.log(frm.selected_workflow_action);\n        if (\n            frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\" &&\n            frm.selected_workflow_action === \"Approve\"\n            // frm.doc.checkbox_m == 1\n        ) {\n            // frappe.throw(\"Please check the 'approval' checkbox before approving\");\n            // frappe.validated = false;\n            \n            \n            \n                    console.log(\"Validating Budget Request form on submit.\");\n\n        // Ensure Cost Center is not empty\n        if (!frm.doc.cost_center) {\n                        frappe.throw(\"Please select a Cost Center.,please reload the form and set the new values\");\n\n                        frappe.validated = false;\n            frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\"\n        frm.refresh_fields();\n\n            return false; // Return false to prevent submission\n        }\n\n        // Ensure there are accepted items\n        var acceptedItemsExist = frm.doc.budget_items_details.some(function(item) {\n            return item.status === \"Accepted\";\n        });\n\n        if (!acceptedItemsExist) {\n                         frappe.throw(\"Please accept at least one item.,please reload the form and set the new values\");\n\n                        frappe.validated = false;\n            frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\"\n        frm.refresh_fields();\n\n            \n            return false; // Return false to prevent submission\n        }\n\n        // Ensure each row has an account of type expenses and expected price\n        var invalidRows = frm.doc.budget_items_details.filter(function(item) {\n            return !item.expense_account || !item.expected_price;\n        });\n\n        if (invalidRows.length > 0) {\n                         frappe.throw(\"Please ensure each row has an expense account and expected price.,please reload the form and set the new values\");\n\n                        frappe.validated = false;\n            frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\"\n        frm.refresh_fields();\n\n            return false; // Return false to prevent submission\n        }\n\n        console.log(\"Budget Request form submitted.\");\n\n        // Initialize variables\n        var month_list = [\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n            \"August\", \"September\", \"October\", \"November\", \"December\"\n        ];\n        var total_per_account = {};\n        var account_budget = [];\n\n        // Function to get months\n        // function getMonths(total, item_summary) {\n        //     console.log(\"Item Summary:\", item_summary);\n\n        //     // Calculate total_custom_ratio based on row.total / frm.doc.total * 100\n        //     var total_custom_ratio = item_summary.reduce(function(acc, item) {\n        //         var custom_ratio = (item.total / total) * 100;\n        //         console.log(\"Custom Ratio for Item:\", custom_ratio);\n        //         return acc + custom_ratio;\n        //     }, 0);\n\n        //     console.log(\"Total Custom Ratio:\", total_custom_ratio);\n\n        //     return month_list.map(function(month, index) {\n        //         var percentage_allocation = 0;\n        //         if (total_custom_ratio !== 0) {\n        //             percentage_allocation = (item_summary[index].total / total) * 100;\n        //         }\n        //         return {\n        //             \"percentage_allocation\": percentage_allocation.toFixed(2), // Round to 2 decimal places\n        //             \"month\": month\n        //         };\n        //     });\n        // }\n\n\nfunction getMonths(total, item_summary) {\n    console.log(\"Item Summary:\", item_summary);\n\n    // Calculate total_custom_ratio based on row.total / frm.doc.total * 100\n    var total_custom_ratio = item_summary.reduce(function(acc, item) {\n        var custom_ratio = (item.total / total) * 100;\n        console.log(\"Custom Ratio for Item:\", custom_ratio);\n        return acc + custom_ratio;\n    }, 0);\n\n    console.log(\"Total Custom Ratio:\", total_custom_ratio);\n\n    // Initialize an array to hold month-wise percentage allocations\n    var months = month_list.map(function(month, index) {\n        var percentage_allocation = 0;\n        if (total_custom_ratio !== 0) {\n            percentage_allocation = (item_summary[index].total / total) * 100;\n        }\n        return {\n            \"percentage_allocation\": percentage_allocation.toFixed(4), // Round to 2 decimal places\n            \"month\": month\n        };\n    });\n\n    // Check if the total_custom_ratio is slightly less than 100 (due to rounding)\n    if (total_custom_ratio < 100) {\n        // Calculate the remaining percentage to be distributed\n        var remaining_percentage = 100 - total_custom_ratio;\n\n        // Add the remaining_percentage to the last row's percentage_allocation\n        months[months.length - 1].percentage_allocation = (parseFloat(months[months.length - 1].percentage_allocation) + remaining_percentage).toFixed(2);\n    }\n\n    return months;\n}\n\n\n        // Loop through budget items\n        frm.doc.budget_items_details.forEach(function(item) {\n            console.log(\"Expense Account:\", item.expense_account, \"Total:\", item.total);\n            if (item.status === \"Accepted\") {\n                total_per_account[item.expense_account] = (total_per_account[item.expense_account] || 0) + item.total;\n            }\n        });\n        console.log(\"Total per account:\", total_per_account);\n\n        // Create account_budget array\n        for (var account in total_per_account) {\n            if (total_per_account.hasOwnProperty(account)) {\n                account_budget.push({\n                    \"account\": account,\n                    \"budget_amount\": total_per_account[account]\n                });\n            }\n        }\n        console.log(\"Account budget:\", account_budget);\n\n        // Create Monthly Distribution document\n        var monthly_distribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n        monthly_distribution.distribution_id = `${frm.doc.name}-${frm.doc.fiscal_year}`;\n        monthly_distribution.fiscal_year = frm.doc.fiscal_year;\n        monthly_distribution.percentages = getMonths(frm.doc.total, frm.doc.item_summary);\n        console.log(\"Monthly Distribution document:\", monthly_distribution);\n\n        // Insert Monthly Distribution document\n        frappe.db.insert(monthly_distribution).then(function(response) {\n            console.log(\"Monthly Distribution document inserted successfully.\");\n            var monthly_distribution_name = response.name; // Get the generated name\n            console.log(\"Monthly Distribution Name:\", monthly_distribution_name);\n\n            // Create Budget document\n            var budget = frappe.model.get_new_doc(\"Budget\");\n            budget.budget_against = \"Cost Center\";\n            budget.monthly_distribution = monthly_distribution_name; // Use the generated name\n            budget.cost_center = frm.doc.cost_center;\n            budget.fiscal_year = frm.doc.fiscal_year;\n            budget.applicable_on_material_request = 1;\n            budget.applicable_on_purchase_order = 1;\n            budget.applicable_on_booking_actual_expenses = 1;\n            budget.action_if_annual_budget_exceeded_on_mr = \"Stop\";\n            budget.action_if_annual_budget_exceeded_on_po = \"Stop\";\n            budget.action_if_accumulated_monthly_budget_exceeded_on_mr = \"Warn\";\n            budget.action_if_accumulated_monthly_budget_exceeded_on_po = \"Warn\";\n            budget.custom_budget_request_reference=frm.doc.name;\n            budget.accounts = account_budget;\n            console.log(\"Budget document:\", budget);\n\n            // Insert Budget document\n            return frappe.db.insert(budget);\n        }).then(function() {\n            console.log(\"Budget document inserted successfully.\");\n            frappe.msgprint(\"Budget created successfully.\");\n        }).catch(function(err) {\n            // console.error(\"Error inserting budget:\" + err);\n            frappe.msgprint(\"Error creating budget.\");\n        });\n            let table = frm.doc.budget_tems_details;\n              table.forEach(function (row) {\n                  \n                \n            var monthlyDistribution = frappe.model.get_new_doc(\"Monthly Distribution\");    \n            monthlyDistribution.fiscal_year =frm.doc.fiscal_year;\n             frappe.db.insert(monthlyDistribution)\n                    .then(function() {\n                        frappe.msgprint(`Monthly Distribution`);\n                        frappe.model.set_value(\"Monthly Distribution\",\"Monthly Distribution Percentage\",\"year\", row.january);// Set the workflow state here\n    \n                    })\n                    .catch(function(err) {\n                        console.log(\"Error creating Monthly Distribution \", err);\n                    });\n        \n              });\n        \n        \n        \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n        }\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2024-09-16 13:15:35.713803",
  "module": null,
  "name": "validation on amount",
  "script": "// frappe.ui.form.on('Purchase Order', {\n// \trefresh(frm) {\n// \t    let results = [];\n// \t    var today = new Date(cur_frm.doc.transaction_date);\n// \t     var startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n// \t     var endOfMonth = new Date(today.getFullYear(), today.getMonth()+1,1);\n// \t   //  console.log(today,startOfMonth,endOfMonth);\n// \t   //  var currentMonth = new Date(cur_frm.doc.transaction_date).getMonth()+1;\n// \t\tfrappe.call({\n// \t\t\tmethod: \"frappe.client.get_list\",\n// \t\t\targs: {\n// \t\t\t\tdoctype: \"Purchase Order\",\n// \t\t\t\tlimit_page_length: 50000,\n// \t\t\t\tfields: [\"total\"],\n// \t\t\t\tfilters: [[\"docstatus\", \"=\", 1],[\"transaction_date\", \">=\", startOfMonth],[\"transaction_date\", \"<\", endOfMonth]],\n// \t\t\t},\n// \t\t\tcallback: function(r) {\n// \t\t\t\tif (r.message) {\n// \t\t\t\t\tvar purchaseOrders = r.message;\n// \t\t\t\t\tvar totalSum = 0;\n// \t\t\t\t\tconsole.log(\"Purchase Orders:\", purchaseOrders);\n//                      var currentMonth = new Date(cur_frm.doc.transaction_date).getMonth()+1;\n                    \n// \t\t\t\t\tfor (let order of purchaseOrders) {\n// \t\t\t\t\t   // if(currentMonth ===)\n// \t\t\t\t\t\ttotalSum += order.total || 0;  // Add the total value to the sum, defaulting to 0 if undefined\n// \t\t\t\t\t}\n\n// \t\t\t\t\tconsole.log(\"Total Sum of Purchase Orders:\", totalSum);\n//                         const dateObject = new Date(frm.doc.transaction_date);\n//                         const PO_year = dateObject.getFullYear();\n//                         //get Budget by current year\n//                         console.log(\"PO YEAR\",PO_year)\n// \t\t\t\t\tfrappe.call({\n// \t\t\t\t\t    method:\"frappe.client.get_list\",\n// \t\t\t\t\t    args:{\n// \t\t\t\t\t        \"doctype\":\"Budget\",\n// \t\t\t\t\t        \"limit_page_length\": 5000,\n//             \t\t\t\t\"fields\": [\"name\",\"cost_center\"],\n//             \t\t\t\t\"filters\": [[\"docstatus\", \"=\", 1],[\"fiscal_year\",\"=\",PO_year]],\n//             \t\t\t\t\"limit\":1\n//             \t\t\t},callback:function(r){\n//             \t\t\t //   console.log(\"budget Documents\",r.message);\n//             \t\t\t    let budgets = r.message;\n//             \t\t\t    for (let budget of budgets)\n//             \t\t\t    frappe.call({\n//             \t\t\t        method:\"frappe.client.get\",\n//             \t\t\t        args:{\n//             \t\t\t             \"doctype\":\"Budget\",\n//             \t\t\t             \"name\":budget.name,\n//                         \t\t\t \"fields\": [\"name\",\"accounts\"],\n//             \t\t\t        },          \n//             \t\t\t        callback:function(r){\n//             \t\t\t         //   console.log(\"Budget Document\",r.message)\n//             \t\t\t        let table_budget_items = r.message.accounts;\n//             \t\t\t     //   console.log(items);\n//             \t\t\t        for (let item of table_budget_items){\n//             \t\t\t            console.log(item.account,item.budget_amount);\n//             \t\t\t            var products =frm.doc.items;\n            \t\t\t              \n//             \t\t\t            for (let product of products){\n//             \t\t\t                 //  console.log(\"ss\",item.expense_account,product.expense_account,product.cost_center,budget.cost_center);\n//                 \t\t\t             //   console.log(\"item.expense_account == product.expense_account\",item.expense_account == product.expense_account);\n//             \t\t\t                 //   console.log(\"item.account == product.expense_account\",item.account == product.expense_account )\n//             \t\t\t                  console.log(\"product.cost_center == budget.cost_center\",item.account == product.expense_account && product.cost_center == budget.cost_center);\n            \n//                 \t\t\t                if(item.account == product.expense_account && product.cost_center == budget.cost_center){\n//                 \t\t\t                    console.log(\"Done....\");\n                \t\t\t                   \n//                 \t\t\t                       var month_list = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\"August\", \"September\", \"October\", \"November\", \"December\"];\n//                 \t\t\t                          let qts = month_list.map(month => {\n//                                                     let monthKey = month.toLowerCase();\n//                                                     // console.log(monthKey);\n//                                                     ///////\n//                                                     var currentMonthIndex = new Date().getMonth()+1;\n//                                                     var currentMonthName = month_list[currentMonthIndex];\n//                                                     //////\n//                                                      const currentMonthKey = currentMonthName.toLowerCase();\n//                                                      let itemValue = item.account;\n//                                                     var currentMonth = new Date(cur_frm.doc.transaction_date).getMonth()+1;\n//                                                     // console.log(\"currentMonth === currentMonthIndex\",currentMonth === currentMonthIndex);\n//                                                     if (currentMonth === currentMonthIndex){\n//                                                     // frappe.msgprint(`you will ${month_list[monthKey]}`);\n//                                                     console.log(\"itemValue \",itemValue);\n//                                                     console.log(\"totalSum\",totalSum);\n//                                                     // let doc_monthly_distribution =frappe.db.get_doc(\"Monthly Distribution\",item.monthly_distribution);\n//                                                     // console.log(doc_monthly_distribution.percentages);\n//                                                     frappe.call({\n//                                                         method:\"frappe.client.get\",\n//                                                         args:{\n//                                                             doctype:\"Monthly Distribution\",\n//                                                             name:item.monthly_distribution,\n//                                                             fields:[\"name\",\"percentages\"],\n                                                            \n//                                                         },callback:function(r){\n//                                                           let parent = r.message;\n//                                                           let child = r.message.percentages;\n//                                                             console.log(\"child\",child);\n//                                                             for(let row of child){\n//                                                                 if(row.month == month_list[currentMonth-1]){\n//                                                                     console.log(\"prec\",row.percentage_allocation*item.budget_amount/100);\n//                                                                     results.push(row.percentage_allocation*item.budget_amount/100);\n//                                                                 }\n//                                                                 // console.log(\"chillld\",row.percentage_allocation,'Months',month_list[currentMonth-1]);\n//                                                             }\n//                                                         }\n//                                                     })\n//                                                     frappe.msgprint(`you will ${results}`);\n//                                                     }\n//                                                     });\n                \t\t\t                    \n                \t\t\t                    \n//                 \t\t\t                }else{\n                \t\t\t                    \n//                 \t\t\t                }\n                \t\t\t         \n//             \t\t\t            }\n//             \t\t\t        }\n            \t\t\t            \n//             \t\t\t        }\n//             \t\t\t    })\n            \t\t\t    \n            \t\t\t    \n            \t\t\t    \n//             \t\t\t}\n            \t\t\t\t\t         \n\t\t\t\t\t    \n// \t\t\t\t\t});\n\t\t\t\t\t\n// \t\t\t\t} else {\n// \t\t\t\t\tconsole.log(\"No Purchase Orders found.\");\n// \t\t\t\t}\n// \t\t\t}\n// \t\t});\n// \t}\n// });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrappe.ui.form.on('Purchase Order', {\n    refresh(frm) {\n        let results = [];\n        let today = new Date(cur_frm.doc.transaction_date);\n        let startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n        let endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);\n        \n        // Fetch approved Purchase Orders for the current month\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Purchase Order\",\n                limit_page_length: 50000,\n                fields: [\"total\"],\n                filters: [\n                    [\"docstatus\", \"=\", 1],\n                    [\"transaction_date\", \">=\", startOfMonth],\n                    [\"transaction_date\", \"<\", endOfMonth]\n                ],\n            },\n            callback: function(r) {\n                if (r.message) {\n                    let purchaseOrders = r.message;\n                    let totalSum = purchaseOrders.reduce((sum, order) => sum + (order.total || 0), 0);\n                    console.log(\"Total Sum of Purchase Orders:\", totalSum);\n\n                    let PO_year = today.getFullYear();\n                    console.log(\"PO YEAR\", PO_year);\n\n                    // Fetch budgets for the current year\n                    frappe.call({\n                        method: \"frappe.client.get_list\",\n                        args: {\n                            doctype: \"Budget\",\n                            limit_page_length: 5000,\n                            fields: [\"name\", \"cost_center\"],\n                            filters: [\n                                [\"docstatus\", \"=\", 1],\n                                [\"fiscal_year\", \"=\", PO_year]\n                            ],\n                            limit: 1\n                        },\n                        callback: function(budgetResponse) {\n                            if (budgetResponse.message && budgetResponse.message.length > 0) {\n                                let budget = budgetResponse.message[0];\n\n                                // Fetch the budget document details\n                                frappe.call({\n                                    method: \"frappe.client.get\",\n                                    args: {\n                                        doctype: \"Budget\",\n                                        name: budget.name,\n                                        fields: [\"*\"]\n                                    },\n                                    callback: function(budgetDocResponse) {\n                                        if (budgetDocResponse.message) {\n                                            let table_budget_items = budgetDocResponse.message.accounts;\n                                            console.log(budgetDocResponse.message,budget.custom_action_if__monthly_budget_exceeded_on_po == \"Warn\")\n                                            console.log(budget.applicable_on_purchase_order === '1');\n                                            // Loop through the budget items\n                                            for (let item of table_budget_items) {\n                                                let products = frm.doc.items;\n\n                                                for (let product of products) {\n                                                    if (item.account === product.expense_account && product.cost_center === budget.cost_center && budgetDocResponse.message.applicable_on_purchase_order ===1 &&budgetDocResponse.message.custom_action_if__monthly_budget_exceeded_on_po == 'Warn') {\n                                                        console.log(\"Matched account and cost center:\", item.account, product.expense_account);\n\n                                                        let monthList = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n                                                        let currentMonthIndex = new Date().getMonth(); // Zero-based index\n                                                        let currentMonth = new Date(cur_frm.doc.transaction_date).getMonth(); // Zero-based index\n\n                                                        if (currentMonth === currentMonthIndex) {\n                                                            console.log(\"Processing current month:\", monthList[currentMonth]);\n\n                                                            // Fetch monthly distribution\n                                                            frappe.call({\n                                                                method: \"frappe.client.get\",\n                                                                args: {\n                                                                    doctype: \"Monthly Distribution\",\n                                                                    name: item.monthly_distribution,\n                                                                    fields: [\"name\", \"percentages\"]\n                                                                },\n                                                                callback: function(monthlyDistResponse) {\n                                                                    if (monthlyDistResponse.message) {\n                                                                        let child = monthlyDistResponse.message.percentages;\n                                                                        console.log(\"Monthly Distribution Child:\", child);\n\n                                                                        for (let row of child) {\n                                                                            if (row.month === monthList[currentMonth]) {\n                                                                                let allocatedAmount = (row.percentage_allocation * item.budget_amount) / 100;\n                                                                                results.push(allocatedAmount);\n                                                                                console.log(\"Calculated Allocation:\", allocatedAmount);\n                                                                            }\n                                                                        }\n\n                                                                        // Display results after processing all rows\n                                                                        let totalAllocation = results.reduce((a, b) => a + b, 0);\n                                                                        let message = totalSum < totalAllocation\n                                                                            ? `Budget is : ${totalAllocation} and total Purchases ${totalSum}`\n                                                                            : `Budget is: ${totalAllocation} and total Purchases ${totalSum}`;\n\n                                                                        // Prompt the user with Yes/No options\n                                                                        frappe.prompt([\n                                                                            {\n                                                                                fieldname: 'response',\n                                                                                label: message,\n                                                                                fieldtype: 'Select',\n                                                                                options: 'Yes\\nNo', // Options for Yes/No\n                                                                                reqd: 1\n                                                                            }\n                                                                        ],\n                                                                        function(values) {\n                                                                            // Handle the user's choice\n                                                                            if (values.response === \"Yes\") {\n                                                                                frappe.msgprint(\"You chose Yes!\");\n                                                                                // Add any additional actions you want to perform on \"Yes\"\n                                                                            } else {\n                                                                                frappe.msgprint(\"You chose No!\");\n                                                                                // Add any additional actions you want to perform on \"No\"\n                                                                            }\n                                                                        },\n                                                                        'Budget Allocation Result', // Title of the dialog\n                                                                        'Submit' // Button label\n                                                                        );\n                                                                    }\n                                                                }\n                                                            });\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        } else {\n                                            console.error(\"Failed to fetch budget details.\");\n                                        }\n                                    }\n                                });\n                            } else {\n                                console.log(\"No budgets found for the current year.\");\n                            }\n                        }\n                    });\n                } else {\n                    console.log(\"No Purchase Orders found.\");\n                }\n            }\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-08-11 08:54:48.620658",
  "module": null,
  "name": "crete doc and child monthly destribution",
  "script": "frappe.ui.form.on(\"Budget Request\", {\n    before_workflow_action: (frm) => {\n        console.log(frm.doc.workflow_state);\n        console.log(frm.selected_workflow_action);\n\n        if (frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\" && frm.selected_workflow_action === \"Approve\") {\n            console.log(\"Validating Budget Request form on submit.\");\n\n            // Ensure Cost Center is not empty\n            if (!frm.doc.cost_center) {\n                frappe.throw(\"Please select a Cost Center before submitting the form.\");\n                frappe.validated = false;\n                return false; // Prevent form submission\n            }\n\n            // Ensure there are <<accepted items>>\n            var acceptedItemsExist = frm.doc.budget_items_details.some(function(item) {\n                return item.status === \"Accepted\";\n            });\n\n            if (!acceptedItemsExist) {\n                frappe.throw(\"Please accept at least one item before submitting the form.\");\n                frappe.validated = false;\n                return false; // Prevent form submission\n            }\n\n            // Ensure each row has an account of type expenses and expected price\n            var invalidRows = frm.doc.budget_items_details.filter(function(item) {\n                return !item.expense_account || !item.expected_price;\n            });\n\n            if (invalidRows.length > 0) {\n                frappe.throw(\"Please ensure each row has an expense account and expected price before submitting the form.\");\n                frappe.validated = false;\n                frm.refresh_fields();\n                return false; // Prevent form submission\n            }\n\n            // Initialize variables\n            var month_list = [\n                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\", \"November\", \"December\"\n            ];\n            var total_per_account = {};\n            var account_budget = [];\n\n            function getMonths(total, item_summary) {\n                var total_custom_ratio = item_summary.reduce(function(acc, item) {\n                    return acc + (item.total / total) * 100;\n                }, 0);\n\n                var months = month_list.map(function(month, index) {\n                    var percentage_allocation = 0;\n                    if (total_custom_ratio !== 0) {\n                        percentage_allocation = (item_summary[index].total / total) * 100;\n                    }\n                    return {\n                        \"percentage_allocation\": percentage_allocation.toFixed(4), // Round to 2 decimal places\n                        \"month\": month\n                    };\n                });\n\n                if (total_custom_ratio < 100) {\n                    var remaining_percentage = 100 - total_custom_ratio;\n                    months[months.length - 1].percentage_allocation = (parseFloat(months[months.length - 1].percentage_allocation) + remaining_percentage).toFixed(2);\n                }\n\n                return months;\n            }\n\n            var monthly_distributions = [];\n\n            // Create Monthly Distribution records for each row\n            let promises = frm.doc.budget_items_details.map(row => {\n                var monthlyDistribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n                monthlyDistribution.distribution_id = frm.doc.name;\n                monthlyDistribution.fiscal_year = frm.doc.fiscal_year;\n\n                let percentages = month_list.map(month => {\n                    let monthKey = month.toLowerCase();\n                    return {\n                        \"month\": month,\n                        \"percentage_allocation\": row[monthKey] / row.total_quantity * 100 || 0\n                    };\n                });\n\n                monthlyDistribution.percentages = percentages;\n\n                return frappe.db.insert(monthlyDistribution)\n                    .then(doc => {\n                        console.log(\"Monthly Distribution created:\", doc.name);\n                        monthly_distributions.push({ account: row.expense_account, name: doc.name });\n                    });\n            });\n                    // var monthly_distribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n                    // monthly_distribution.distribution_id = frm.doc.name;\n                    // monthly_distribution.fiscal_year = frm.doc.fiscal_year;\n                    // monthly_distribution.percentages = getMonths(frm.doc.total, frm.doc.item_summary);\n                    // console.log(\"Monthly Distribution document(1):\", monthly_distribution);\n            \n                    // Insert Monthly Distribution document\n                    // frappe.db.insert(monthly_distribution).then(function(response) {\n                        \n            ////////////////////////////\n            ///////////AHMED///////////\n            Promise.all(promises).then(() => {\n                // Loop through budget items\n                frm.doc.budget_items_details.forEach(function(item) {\n                    console.log(\"Expense Account:\", item.expense_account, \"Total:\", item.total);\n                    if (item.status === \"Accepted\") {\n                        total_per_account[item.expense_account] = (total_per_account[item.expense_account] || 0) + item.total;\n                    }\n                });\n\n                // Assign monthly distributions to accounts\n                for (var account in total_per_account) {\n                    if (total_per_account.hasOwnProperty(account)) {\n                        let distribution = monthly_distributions.find(dist => dist.account === account);\n                        if (distribution) {\n                            account_budget.push({\n                                \"account\": account,\n                                \"monthly_distribution\": distribution.name,\n                                \"budget_amount\": total_per_account[account]\n                            });\n                        }\n                    }\n                }\n\n                console.log(\"account_budget\", account_budget);\n\n                // Create Budget document\n                var budget = frappe.model.get_new_doc(\"Budget\");\n                budget.budget_against = \"Cost Center\";\n                // budget.monthly_distribution = monthly_distribution_name; // Use the generated name\n                budget.cost_center = frm.doc.cost_center;\n                budget.fiscal_year = frm.doc.fiscal_year;\n                budget.applicable_on_material_request = 1;\n                budget.applicable_on_purchase_order = 1;\n                budget.applicable_on_booking_actual_expenses = 1;\n                budget.action_if_annual_budget_exceeded_on_mr = \"Stop\";\n                budget.action_if_annual_budget_exceeded_on_po = \"Stop\";\n                budget.action_if_accumulated_monthly_budget_exceeded_on_mr = \"Warn\";\n                budget.action_if_accumulated_monthly_budget_exceeded_on_po = \"Warn\";\n                budget.custom_budget_request_reference = frm.doc.name;\n                budget.accounts = account_budget;\n\n                console.log(\"Budget document:\", budget);\n\n                return frappe.db.insert(budget);\n            }).then((budget) => {\n                frappe.msgprint(\"Budget created successfully.\");\n                let monthly_distribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n                 monthly_distribution.distribution_id = frm.doc.name;\n                 monthly_distribution.fiscal_year = frm.doc.fiscal_year;\n                 monthly_distribution.percentages = getMonths(frm.doc.total, frm.doc.item_summary);\n                 console.log(\"Monthly Distribution document:\", monthly_distribution);\n                frappe.db.insert(monthly_distribution).then(function(r) {\n                   console.log(\"finnaly\",budget); \n                   frappe.db.set_value('Budget',budget.name, 'monthly_distribution', r.name);\n                      console.log(\"finnalylast_budget\",budget.name); \n\n                });\n\n                \n            }).catch(err => {\n                console.error(\"Error inserting budget:\", err);\n                frappe.msgprint(\"Error creating budget.\");\n            });\n            ////////////////////////////\n            ///////////AHMED///////////\n                        \n                        \n                        \n                        \n                        \n                    //  }).then(function() {\n                    //     console.log(\"Budget document inserted successfully.\");\n                    //     frappe.msgprint(\"Budget created successfully.\");\n                    // }).catch(function(err) {\n                    //     // console.error(\"Error inserting budget:\" + err);\n                    //     frappe.msgprint(\"Error creating budget.\");\n                    // });\n\n\n        }\n    },\n});\n\n\n\n\n\n// frappe.ui.form.on(\"Budget Request\", {\n//     before_workflow_action: (frm) => {\n//         console.log(frm.doc.workflow_state);\n//         console.log(frm.selected_workflow_action);\n//         if (\n//             frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\" &&\n//             frm.selected_workflow_action === \"Approve\"\n//         ) {\n//             console.log(\"Validating Budget Request form on submit.\");\n\n//             // Ensure Cost Center is not empty\n//             if (!frm.doc.cost_center) {\n//                 frappe.throw(\"Please select a Cost Center before submitting the form.\");\n//                 frappe.validated = false;\n//                 return false; // Prevent form submission\n//             }\n\n//             // Ensure there are <<accepted items>>\n//             var acceptedItemsExist = frm.doc.budget_items_details.some(function(item) {\n//                 return item.status === \"Accepted\";\n//             });\n\n//             if (!acceptedItemsExist) {\n//                 frappe.throw(\"Please accept at least one item before submitting the form.\");\n//                 frappe.validated = false;\n//                 return false; // Prevent form submission\n//             }\n//             //////////////////////////////////////////\n\n//             // Ensure each row has an account of type expenses and expected price\n//             var invalidRows = frm.doc.budget_items_details.filter(function(item) {\n//                 return !item.expense_account || !item.expected_price;\n//             });\n\n//             if (invalidRows.length > 0) {\n//                 frappe.throw(\"Please ensure each row has an expense account and expected price before submitting the form.\");\n//                 frappe.validated = false;\n//                  frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\"\n//                  frm.refresh_fields();\n//                 return false; // Prevent form submission\n                \n//             }\n// ////////////////////////////////////////////////////////////////////<end of validation>////////////////////////////////////////////////////////////////////////////////////\n//             // console.log(\"Budget Request form validated successfully.\");\n\n//             // Initialize variables\n//             var month_list = [\n//                 \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n//                 \"August\", \"September\", \"October\", \"November\", \"December\"\n//             ];\n//             var total_per_account = {};\n//             var account_budget = [];\n//             function getMonths(total, item_summary) {\n//     // console.log(\"Item Summary:\", item_summary);\n\n//     // Calculate total_custom_ratio based on row.total / frm.doc.total * 100\n//     var total_custom_ratio = item_summary.reduce(function(acc, item) {\n//         var custom_ratio = (item.total / total) * 100;\n//         // console.log(\"Custom Ratio for Item:\", custom_ratio);\n//         return acc + custom_ratio;\n//     }, 0);\n\n//     // console.log(\"Total Custom Ratio:\", total_custom_ratio);\n\n//     // Initialize an array to hold month-wise percentage allocations\n//     var months = month_list.map(function(month, index) {\n//         var percentage_allocation = 0;\n//         if (total_custom_ratio !== 0) {\n//             percentage_allocation = (item_summary[index].total / total) * 100;\n//         }\n//         return {\n//             \"percentage_allocation\": percentage_allocation.toFixed(4), // Round to 2 decimal places\n//             \"month\": month\n//         };\n//     });\n\n//     // Check if the total_custom_ratio is slightly less than 100 (due to rounding)\n//     if (total_custom_ratio < 100) {\n//         // Calculate the remaining percentage to be distributed\n//         var remaining_percentage = 100 - total_custom_ratio;\n\n//         // Add the remaining_percentage to the last row's percentage_allocation\n//         months[months.length - 1].percentage_allocation = (parseFloat(months[months.length - 1].percentage_allocation) + remaining_percentage).toFixed(2);\n//     }\n\n//     return months;\n// }\n\n\n//         // console.log(\"Account budget:\", account_budget);\n// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//             // Create Monthly Distribution records for each row\n//             let table = frm.doc.budget_items_details;\n//             table.forEach(row => {\n//                 var monthlyDistribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n//                  monthlyDistribution.distribution_id = frm.doc.name;\n//                 monthlyDistribution.fiscal_year = frm.doc.fiscal_year;\n\n//                 // Construct percentages list\n//                 let percentages = month_list.map(month => {\n//                     let monthKey = month.toLowerCase();\n//                     return {\n//                         \"month\": month,\n//                         \"percentage_allocation\": row[monthKey] / row.total_quantity * 100 || 0\n//                     };\n//                 });\n//                 console.log(\"Percentages for row:\", row, percentages);\n\n//                 monthlyDistribution.percentages = percentages;\n\n//                 frappe.db.insert(monthlyDistribution)\n//                     .then(function(doc) {\n//                         console.log(\"Monthly Distribution created:\", doc.name);\n//                       let items = [];\n//                         items.push({ \"monthly_distribution\": doc.name });\n//                              //////////////////////\n//                             /////////////////////\n//                                 /////////////////////////////////////////////////////\n//             ////////////////////////////////////////////////////\n//             ////////////////////////////////////////////////////\n//             ////////////////////////////////////////////////////////////////////////////////  Monthly  Distribution  /////////////////////////////////////////////\n//         // Create Monthly Distribution document\n//         var monthly_distribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n//         monthly_distribution.distribution_id = frm.doc.name;\n//         monthly_distribution.fiscal_year = frm.doc.fiscal_year;\n//         monthly_distribution.percentages = getMonths(frm.doc.total, frm.doc.item_summary);\n//         console.log(\"Monthly Distribution document(1):\", monthly_distribution);\n\n//         // Insert Monthly Distribution document\n//         frappe.db.insert(monthly_distribution).then(function(response) {\n//             console.log(\"Monthly Distribution document inserted successfully.\");\n//             var monthly_distribution_name = response.name; // Get the generated name\n//                         console.log(\"hello\",response.name);\n                        \n//         // Loop through budget items\n//         frm.doc.budget_items_details.forEach(function(item) {\n//             console.log(\"Expense Account:\", item.expense_account, \"Total:\", item.total);\n//             if (item.status === \"Accepted\") {\n//                 total_per_account[item.expense_account] = (total_per_account[item.expense_account] || 0) + item.total;\n//             }\n//         });\n//         // console.log(\"Total per account:\", total_per_account);\n//         ///**/*/*/**********************///////////////////////////////////\n\n//                                     //////\n//                 for (var account in total_per_account) {\n//                     if (total_per_account.hasOwnProperty(account)) {\n//                         let distribution = monthly_distributions.find(dist => dist.account === account);\n//                         if (distribution) {\n//                             account_budget.push({\n//                                 \"account\": account,\n//                                 \"monthly_distribution\": distribution.name,\n//                                 \"budget_amount\": total_per_account[account]\n//                             });\n//                         }\n//                     }\n//                 }\n\n//                 console.log(\"account_budget\", account_budget);\n\n//                                     //////\n// //         for (var account in total_per_account) {\n// //             if (total_per_account.hasOwnProperty(account)) {\n// //                 console.log(\"sssssssssssssssssssssssssssssssssssssssssssss\",items.monthly_distribution);\n// //                 for (let item of items){\n// //                 console.log(\"ssssssssssssssssssssssssssssssssssssssmonthly_distributions\",item.monthly_distribution);\n\n// //                 account_budget.push({\n// //                     \"account\": account,\n// //                     \"monthly_distribution\": item,\n// //                     \"budget_amount\": total_per_account[account]\n// //                 });\n// //                 }\n// //             }\n// //         }\n// //         console.log(\"account_budget\",account_budget);\n// // //////////***************************************////////////////////////////////////////////////////\n//             // console.log(\"monthly_distributionaaaaaaaa\",monthly_distribution,\"NAme\",doc.name);\n//             // console.log(\"budget.accounts = account_budget\",doc.name);\n\n\n//             // Create Budget document\n//             var budget = frappe.model.get_new_doc(\"Budget\");\n//             budget.budget_against = \"Cost Center\";\n//             budget.monthly_distribution = monthly_distribution_name; // Use the generated name\n//             budget.cost_center = frm.doc.cost_center;\n//             budget.fiscal_year = frm.doc.fiscal_year;\n//             budget.applicable_on_material_request = 1;\n//             budget.applicable_on_purchase_order = 1;\n//             budget.applicable_on_booking_actual_expenses = 1;\n//             budget.action_if_annual_budget_exceeded_on_mr = \"Stop\";\n//             budget.action_if_annual_budget_exceeded_on_po = \"Stop\";\n//             budget.action_if_accumulated_monthly_budget_exceeded_on_mr = \"Warn\";\n//             budget.action_if_accumulated_monthly_budget_exceeded_on_po = \"Warn\";\n//             budget.custom_budget_request_reference=frm.doc.name;\n//             budget.accounts = account_budget;\n//             console.log(\"Budget document:\", budget);\n\n//             // Insert Budget document\n//             return frappe.db.insert(budget);\n//         }).then(function() {\n//             console.log(\"Budget document inserted successfully.\");\n//             frappe.msgprint(\"Budget created successfully.\");\n//         }).catch(function(err) {\n//             // console.error(\"Error inserting budget:\" + err);\n//             frappe.msgprint(\"Error creating budget.\");\n//         });\n\n        \n//                             ////////////////////\n//                             ///////////////////\n//                             ///////////////////\n                        \n//                     })\n//                     .catch(function(err) {\n//                         console.log(\"Error creating Monthly Distribution:\", err);\n//                     });\n//             });\n            \n            \n            \n\n//         }\n//     },\n// });\n\n\n\n\n\n\n\n\n\n\n\n\n\n// frappe.ui.form.on(\"Budget Request\", {\n//     before_workflow_action: (frm) => {\n//         console.log(frm.doc.workflow_state);\n//         console.log(frm.selected_workflow_action);\n\n//         if (frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\" && frm.selected_workflow_action === \"Approve\") {\n//             console.log(\"Validating Budget Request form on submit.\");\n\n//             // Ensure Cost Center is not empty\n//             if (!frm.doc.cost_center) {\n//                 frappe.throw(\"Please select a Cost Center before submitting the form.\");\n//                 frappe.validated = false;\n//                 return false; // Prevent form submission\n//             }\n\n//             // Ensure there are <<accepted items>>\n//             var acceptedItemsExist = frm.doc.budget_items_details.some(item => item.status === \"Accepted\");\n\n//             if (!acceptedItemsExist) {\n//                 frappe.throw(\"Please accept at least one item before submitting the form.\");\n//                 frappe.validated = false;\n//                 return false; // Prevent form submission\n//             }\n\n//             // Ensure each row has an account of type expenses and expected price\n//             var invalidRows = frm.doc.budget_items_details.filter(item => !item.expense_account || !item.expected_price);\n\n//             if (invalidRows.length > 0) {\n//                 frappe.throw(\"Please ensure each row has an expense account and expected price before submitting the form.\");\n//                 frappe.validated = false;\n//                 frm.refresh_fields();\n//                 return false; // Prevent form submission\n//             }\n\n//             console.log(\"Budget Request form validated successfully.\");\n\n//             // Initialize variables\n//             var month_list = [\n//                 \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n//                 \"August\", \"September\", \"October\", \"November\", \"December\"\n//             ];\n\n//             // Function to calculate month-wise percentage allocations\n//             function getMonths(total, item_summary) {\n//                 var total_custom_ratio = item_summary.reduce((acc, item) => acc + (item.total / total) * 100, 0);\n\n//                 var months = month_list.map((month, index) => ({\n//                     \"percentage_allocation\": total_custom_ratio !== 0 ? ((item_summary[index].total / total) * 100).toFixed(4) : 0,\n//                     \"month\": month\n//                 }));\n\n//                 if (total_custom_ratio < 100) {\n//                     var remaining_percentage = 100 - total_custom_ratio;\n//                     months[months.length - 1].percentage_allocation = (parseFloat(months[months.length - 1].percentage_allocation) + remaining_percentage).toFixed(2);\n//                 }\n\n//                 return months;\n//             }\n\n//             var total_per_account = {};\n//             var account_budget = [];\n//             var monthly_distributions = [];\n\n//             // Create Monthly Distribution records for each row\n//             let promises = frm.doc.budget_items_details.map(row => {\n//                 var monthlyDistribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n//                 monthlyDistribution.distribution_id = frm.doc.name;\n//                 monthlyDistribution.fiscal_year = frm.doc.fiscal_year;\n\n//                 let percentages = month_list.map(month => ({\n//                     \"month\": month,\n//                     \"percentage_allocation\": row[month.toLowerCase()] / row.total_quantity * 100 || 0\n//                 }));\n\n//                 monthlyDistribution.percentages = percentages;\n\n//                 return frappe.db.insert(monthlyDistribution)\n//                     .then(doc => {\n//                         console.log(\"Monthly Distribution created:\", doc.name);\n//                         monthly_distributions.push({ account: row.expense_account, name: doc.name });\n//                     });\n//             });\n\n//             Promise.all(promises).then(() => {\n//                 frm.doc.budget_items_details.forEach(item => {\n//                     if (item.status === \"Accepted\") {\n//                         total_per_account[item.expense_account] = (total_per_account[item.expense_account] || 0) + item.total;\n//                     }\n//                 });\n\n//                 for (var account in total_per_account) {\n//                     if (total_per_account.hasOwnProperty(account)) {\n//                         let distribution = monthly_distributions.find(dist => dist.account === account);\n//                         if (distribution) {\n//                             account_budget.push({\n//                                 \"account\": account,\n//                                 \"monthly_distribution\": distribution.name,\n//                                 \"budget_amount\": total_per_account[account]\n//                             });\n//                         }\n//                     }\n//                 }\n\n//                 console.log(\"account_budget\", account_budget);\n\n//                 // Create Budget document\n//                 var budget = frappe.model.get_new_doc(\"Budget\");\n//                 budget.budget_against = \"Cost Center\";\n//                 budget.monthly_distribution = frm.doc.name; // Use the generated name\n//                 budget.cost_center = frm.doc.cost_center;\n//                 budget.fiscal_year = frm.doc.fiscal_year;\n//                 budget.applicable_on_material_request = 1;\n//                 budget.applicable_on_purchase_order = 1;\n//                 budget.applicable_on_booking_actual_expenses = 1;\n//                 budget.action_if_annual_budget_exceeded_on_mr = \"Stop\";\n//                 budget.action_if_annual_budget_exceeded_on_po = \"Stop\";\n//                 budget.action_if_accumulated_monthly_budget_exceeded_on_mr = \"Warn\";\n//                 budget.action_if_accumulated_monthly_budget_exceeded_on_po = \"Warn\";\n//                 budget.custom_budget_request_reference = frm.doc.name;\n//                 budget.accounts = account_budget;\n\n//                 console.log(\"Budget document:\", budget);\n\n//                 return frappe.db.insert(budget);\n//             }).then(() => {\n//                 console.log(\"Budget document inserted successfully.\");\n//                 frappe.msgprint(\"Budget created successfully.\");\n//             }).catch(err => {\n//                 console.error(\"Error inserting budget:\", err);\n//                 frappe.msgprint(\"Error creating budget.\");\n//             });\n//         }\n//     },\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 1,
  "modified": "2024-08-11 09:50:18.601874",
  "module": null,
  "name": "fetch department",
  "script": "frappe.ui.form.on('Budget Request', {\r\n    onload: function (frm) {\r\n        // Check if the document is new\r\n        if (frm.is_new()) {\r\n            // Get the current user's employee record\r\n            frappe.call({\r\n                method: 'frappe.client.get_list',\r\n                args: {\r\n                    doctype: 'Employee',\r\n                    filters: { user_id: frappe.session.user },\r\n                    fields: ['department']\r\n                },\r\n                callback: function (response) {\r\n                    if (response.message && response.message.length > 0) {\r\n                        let department = response.message[0].department;\r\n                        // Set the department field in the Budget Request form\r\n                        frm.set_value('department', department);\r\n                    } else {\r\n                        frappe.msgprint(__('You are not an employee or no department found.'));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 1,
  "modified": "2024-08-11 09:50:46.640231",
  "module": null,
  "name": "dialog  popup insert in child table",
  "script": "frappe.ui.form.on('Budget Items Details', {\n    custom_show: function(frm, cdt, cdn) {\n        var d = locals[cdt][cdn];\n\n        // Initialize dialog instance\n        var dialog = new frappe.ui.Dialog({\n            title: __('Enter Monthly Budget Quantities'),\n            fields: [\n                {\n                    \"fieldname\": \"january\",\n                    \"fieldtype\": 'Float',\n                    \"label\": __(\"January\"),\n                },\n                    {\n                    fieldname: \"july\",\n                    fieldtype: \"Float\",\n                    label: __(\"July\"),\n                },\n             \n                            \n                {\n                    \"fieldname\": \"column_break\",\n                    \"fieldtype\": 'Column Break',\n                    \"label\": __(\"\"),\n                },\n             \n                {\n                    fieldname: \"february\",\n                    fieldtype: \"Float\",\n                    label: __(\"February\"),\n                },\n                   {\n                    fieldname: \"august\",\n                    fieldtype: \"Float\",\n                    label: __(\"August\"),\n                },\n             \n                {\n                    \"fieldname\": \"column_break\",\n                    \"fieldtype\": 'Column Break',\n                    \"label\": __(\"\"),\n                },\n                {\n                    fieldname: \"march\",\n                    fieldtype: \"Float\",\n                    label: __(\"March\"),\n                },\n                \n                {\n                    fieldname: \"september\",\n                    fieldtype: \"Float\",\n                    label: __(\"September\"),\n                },\n               \n                {\n                    \"fieldname\": \"column_break\",\n                    \"fieldtype\": 'Column Break',\n                    \"label\": __(\"\"),\n                },\n               {\n                    fieldname: \"april\",\n                    fieldtype: \"Float\",\n                    label: __(\"April\"),\n                },\n                {\n                    fieldname: \"october\",\n                    fieldtype: \"Float\",\n                    label: __(\"October\"),\n                },\n                 {\n                    \"fieldname\": \"column_break\",\n                    \"fieldtype\": 'Column Break',\n                    \"label\": __(\"\"),\n                },\n                {\n                    fieldname: \"may\",\n                    fieldtype: \"Float\",\n                    label: __(\"May\"),\n                },\n                \n                {\n                    fieldname: \"november\",\n                    fieldtype: 'Float',\n                    label: __(\"November\"),\n                },\n                {\n                    \"fieldname\": \"column_break\",\n                    \"fieldtype\": 'Column Break',\n                    \"label\": __(\"\"),\n                },\n                 {\n                    fieldname: \"june\",\n                    fieldtype: \"Float\",\n                    label: __(\"June\"),\n                },\n                {\n                    fieldname: \"december\",\n                    fieldtype: \"Float\",\n                    label: __(\"December\"),\n                }, \n              \n            ],\n             size: 'large', // small, large, extra-large\n        });\n\n\ndialog.set_values({\n    'january': d.january || 0.00,\n    'february': d.february || 0.00, \n    'march': d.march || 0.00,\n    'april': d.april || 0.00,\n    'may': d.may || 0.00,\n    'june': d.june ||0.00,\n    'july': d.july || 0.00,\n    'august': d.august ||0.00,\n    'september': d.september ||0.00,\n    'october': d.october || 0.00,\n    'november': d.november || 0.00,\n    'december': d.december || 0.00,\n});\n\n        // Set primary action button\n        dialog.set_primary_action(__('Update'), function() {\n            var fields = ['january', 'february', 'march', 'april', 'may', 'june',\n                          'july', 'august', 'september', 'october', 'november', 'december'];\n\n            var total_quantity = 0;\n\n            fields.forEach(function(fieldname) {\n                var value = parseFloat(dialog.get_value(fieldname)) || 0;\n                frappe.model.set_value(cdt, cdn, fieldname, value);\n                total_quantity += value;\n                console.log('total qty',total_quantity);\n            });            // Set the value back to the form\n             frappe.model.set_value(cdt, cdn, 'total_quantity', total_quantity);\n            // frappe.model.set_value(cdt, cdn, 'january', january);\n            // frappe.model.set_value(cdt, cdn, 'february', february);\n            // frappe.model.set_value(cdt, cdn, 'march', march);\n            // frappe.model.set_value(cdt, cdn, 'april', april);\n            // frappe.model.set_value(cdt, cdn, 'may', may);\n            // frappe.model.set_value(cdt, cdn, 'june', june);\n            // frappe.model.set_value(cdt, cdn, 'july', july);\n            // frappe.model.set_value(cdt, cdn, 'august', august);\n            // frappe.model.set_value(cdt, cdn, 'september', september);\n            // frappe.model.set_value(cdt, cdn, 'october', october);\n            // frappe.model.set_value(cdt, cdn, 'november', november);\n            // frappe.model.set_value(cdt, cdn, 'december', december);\n            frappe.show_alert({\n                message:__('Month value Have been Changed'),\n                indicator:'green'\n            }, 5);\n           \n            // Optionally, you may want to refresh the form or perform other actions here\n\n            // Hide the dialog after processing\n            dialog.hide();\n        });\n\n     \n        // Show the dialog\n        dialog.show();\n        //console.log('total qty',total_quantity);\n    },\n\n    expected_price: function(frm, cdt, cdn) {\n            var d = locals[cdt][cdn];\n            var total_quantity = d.total_quantity || 0;\n            var expected_price = d.expected_price;\n    \n            if (!isNaN(expected_price) && !isNaN(total_quantity)) {\n                var total = total_quantity * expected_price;\n                frappe.model.set_value(cdt, cdn, 'total', total);\n            } else {\n                frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\n            }\n        },\n        \n       total_quantity: function(frm, cdt, cdn) {\n            var d = locals[cdt][cdn];\n            var total_quantity = d.total_quantity || 0;\n            var expected_price = d.expected_price;\n    \n            if (!isNaN(expected_price) && !isNaN(total_quantity)) {\n                var total = total_quantity * expected_price;\n                frappe.model.set_value(cdt, cdn, 'total', total);\n            } else {\n                frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\n            }\n        }    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 1,
  "modified": "2024-08-11 09:47:21.591120",
  "module": null,
  "name": "View Plan Report",
  "script": "frappe.ui.form.on('Budget Request', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('View Plan Report'), function() {\r\n            var filters = {\r\n                \"custom_budget_source\": frm.doc.custom_budget_source,\r\n                \"department\": frm.doc.department,\r\n                \"cost_center\": frm.doc.cost_center,\r\n                \"fiscal_year\": frm.doc.fiscal_year,\r\n                \"name\" : frm.doc.name,\r\n            };\r\n            frappe.set_route('query-report', 'Budget Planning Report', filters);\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-08-11 09:43:38.131017",
  "module": null,
  "name": "filter  budget request when press Budget Source",
  "script": "frappe.ui.form.on('Budget Request', {\n    refresh: function (frm) {\n        if (frm.doc.__islocal && frm.doc.__unsaved) {\n            // Fetch the latest Budget Control document\n            frappe.db.get_list('Budget Control', {\n                fields: ['name'],\n                filters: {'status': 'In Progress'},\n                order_by: 'creation desc',\n                limit: 1\n            }).then(docs => {\n                if (docs.length > 0) {\n                    let latest_doc = docs[0];\n                    \n                    // Set the query to filter the 'custom_budget_source' field\n                    frm.set_query('custom_budget_source', function() {\n                        return {\n                            filters: [\n                                ['name', '=', latest_doc.name]\n                            ]\n                        };\n                    });\n                    \n                    // Optionally set the field value directly if needed\n                    frm.set_value('custom_budget_source', latest_doc.name);\n                }\n            }).catch(err => {\n                console.error('Error fetching Budget Control:', err);\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 0,
  "modified": "2024-08-11 08:50:25.928298",
  "module": null,
  "name": "change work flow",
  "script": "frappe.ui.form.on('Budget Request', {\n    refresh: function (frm) {\n        // frm.add_custom_button(__('Change Workflow State'), function () {\n            // Show confirmation dialog\n            if (frm.doc.workflow_state == \"\u062a\u062d\u062a \u0645\u0631\u0627\u062c\u0639\u0629 \u0645\u062f\u064a\u0631 \u0627\u0644\u0627\u062f\u0627\u0631\u0647\"){\n            frappe.confirm(\n                'Are you sure you want to change the workflow state?',\n                function () {\n                    // User clicked \"Yes\"\n                    change_workflow_state(frm);\n                },\n                function () {\n                    // User clicked \"No\"\n                    frappe.msgprint(__('Workflow state not changed.'));\n                }\n            );\n        // });\n        }\n    }\n});\n\nfunction change_workflow_state(frm) {\n    // Assuming you want to move to the next state in the workflow\n    // Replace 'Next State' with the actual state you want to move to\n    cur_frm.set_value(\"workflow_state\",\"\u062a\u062d\u062a \u0645\u0631\u0627\u062c\u0639\u0629 \u0642\u0633\u0645 \u0627\u0644\u0645\u0634\u062a\u0631\u064a\u0627\u062a\")\n    \n    frm.save().then(() => {\n        frappe.msgprint(__('Workflow state changed successfully.'));\n    }).catch((error) => {\n        frappe.msgprint(__('Failed to change workflow state.'));\n        console.error(error);\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2024-08-10 12:16:10.123544",
  "module": null,
  "name": "hide idx no.",
  "script": "frappe.ui.form.on('Item', {\n\trefresh: (frm, cdt, cdn) => {\n\t    cur_frm.fields_dict['barcodes'].grid.wrapper.find('.btn-open-row').hide();\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-10 15:46:17.972357",
  "module": null,
  "name": "hide serial number no. from child table",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh: (frm, cdt, cdn) => {\n\t   // cur_frm.fields_dict['items'].grid.wrapper.find('.btn-open-row').css({'display':'none','color':'green'});\n\t   //// cur_frm.fields_dict['items'].grid.wrapper.find('div.d-flex').css({'visibility':'hidden'});\n\t   //(1)\n         cur_frm.fields_dict['items'].grid.wrapper.find('.row-index').css({'display':'none',});\n         //(2)\n\t     $('div[class=\"col grid-static-col d-flex justify-content-center\"]').remove();\n         $('div[class=\"col\"]').remove();\n        //  $('div[class=\"row-index.sortable-handle.col\"]').remove();\n        //  $('div[class=\"span\"]').remove();\n        //(3)\n         cur_frm.fields_dict['your_table_name'].grid.wrapper.find('div.d-flex').css({'visibility':'hidden'});\n\n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 1,
  "modified": "2024-08-11 10:11:40.401827",
  "module": null,
  "name": "creat  monthly destribution",
  "script": "frappe.ui.form.on(\"Budget Request\", {\n    refresh: (frm) => {\n        console.log(frm.doc.workflow_state);\n        console.log(frm.selected_workflow_action);\n\n        // if (frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u062a\u0646\u0641\u064a\u0630\u064a\" && frm.selected_workflow_action === \"Approve\") {\n            console.log(\"Validating Budget Request form on submit.\");\n\n            // Ensure Cost Center is not empty\n            if (!frm.doc.cost_center) {\n                frappe.throw(\"Please select a Cost Center before submitting the form.\");\n                frappe.validated = false;\n                return false; // Prevent form submission\n            }\n\n            // Ensure there are <<accepted items>>\n            var acceptedItemsExist = frm.doc.budget_items_details.some(function(item) {\n                return item.status === \"Accepted\";\n            });\n\n            if (!acceptedItemsExist) {\n                frappe.throw(\"Please accept at least one item before submitting the form.\");\n                frappe.validated = false;\n                return false; // Prevent form submission\n            }\n\n            // Ensure each row has an account of type expenses and expected price\n            var invalidRows = frm.doc.budget_items_details.filter(function(item) {\n                return !item.expense_account || !item.expected_price;\n            });\n\n            if (invalidRows.length > 0) {\n                frappe.throw(\"Please ensure each row has an expense account and expected price before submitting the form.\");\n                frappe.validated = false;\n                frm.refresh_fields();\n                return false; // Prevent form submission\n            }\n\n            // Initialize variables\n            var month_list = [\n                \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n                \"August\", \"September\", \"October\", \"November\", \"December\"\n            ];\n            var total_per_account = {};\n            var account_budget = [];\nconsole.log(\"iam here>>>\")\n            function getMonths(total, item_summary) {\n                var total_custom_ratio = item_summary.reduce(function(acc, item) {\n                    return acc + (item.total / total) * 100;\n                }, 0);\n\n                var months = month_list.map(function(month, index) {\n                    var percentage_allocation = 0;\n                    if (total_custom_ratio !== 0) {\n                        percentage_allocation = (item_summary[index].total / total) * 100;\n                    }\n                    return {\n                        \"percentage_allocation\": percentage_allocation.toFixed(4), // Round to 2 decimal places\n                        \"month\": month\n                    };\n                });\n\n                if (total_custom_ratio < 100) {\n                    var remaining_percentage = 100 - total_custom_ratio;\n                    months[months.length - 1].percentage_allocation = (parseFloat(months[months.length - 1].percentage_allocation) + remaining_percentage).toFixed(2);\n                }\n\n                return months;\n            }\n\n            var monthly_distributions = [];\n\n            // Create Monthly Distribution records for each row\n            let promises = frm.doc.budget_items_details.map(row => {\n                var monthlyDistribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n                frappe.msgprint(`monthly distribution created`)\n                monthlyDistribution.distribution_id = frm.doc.name;\n                monthlyDistribution.fiscal_year = frm.doc.fiscal_year;\n\n                let percentages = month_list.map(month => {\n                    let monthKey = month.toLowerCase();\n                    return {\n                        \"month\": month,\n                        \"percentage_allocation\": row[monthKey] / row.total_quantity * 100 || 0\n                    };\n                });\n\n                monthlyDistribution.percentages = percentages;\n\n                return frappe.db.insert(monthlyDistribution)\n                    .then(doc => {\n                        console.log(\"Monthly Distribution created:\", doc.name);\n                        monthly_distributions.push({ account: row.expense_account, name: doc.name });\n                    });\n            });\n                    // var monthly_distribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n                    // monthly_distribution.distribution_id = frm.doc.name;\n                    // monthly_distribution.fiscal_year = frm.doc.fiscal_year;\n                    // monthly_distribution.percentages = getMonths(frm.doc.total, frm.doc.item_summary);\n                    // console.log(\"Monthly Distribution document(1):\", monthly_distribution);\n            \n                    // Insert Monthly Distribution document\n                    // frappe.db.insert(monthly_distribution).then(function(response) {\n                        \n            ////////////////////////////\n            ///////////AHMED///////////\n            Promise.all(promises).then(() => {\n                // Loop through budget items\n                frm.doc.budget_items_details.forEach(function(item) {\n                    console.log(\"Expense Account:\", item.expense_account, \"Total:\", item.total);\n                    if (item.status === \"Accepted\") {\n                        total_per_account[item.expense_account] = (total_per_account[item.expense_account] || 0) + item.total;\n                    }\n                });\n\n                // Assign monthly distributions to accounts\n                for (var account in total_per_account) {\n                    if (total_per_account.hasOwnProperty(account)) {\n                        let distribution = monthly_distributions.find(dist => dist.account === account);\n                        if (distribution) {\n                            account_budget.push({\n                                \"account\": account,\n                                \"monthly_distribution\": distribution.name,\n                                \"budget_amount\": total_per_account[account]\n                            });\n                        }\n                    }\n                }\n\n                console.log(\"account_budget\", account_budget);\n\n                // Create Budget document\n                var budget = frappe.model.get_new_doc(\"Budget\");\n                budget.budget_against = \"Cost Center\";\n                // budget.monthly_distribution = monthly_distribution_name; // Use the generated name\n                budget.cost_center = frm.doc.cost_center;\n                budget.fiscal_year = frm.doc.fiscal_year;\n                budget.applicable_on_material_request = 1;\n                budget.applicable_on_purchase_order = 1;\n                budget.applicable_on_booking_actual_expenses = 1;\n                budget.action_if_annual_budget_exceeded_on_mr = \"Stop\";\n                budget.action_if_annual_budget_exceeded_on_po = \"Stop\";\n                budget.action_if_accumulated_monthly_budget_exceeded_on_mr = \"Warn\";\n                budget.action_if_accumulated_monthly_budget_exceeded_on_po = \"Warn\";\n                budget.custom_budget_request_reference = frm.doc.name;\n                budget.accounts = account_budget;\n\n                console.log(\"Budget document:\", budget);\n\n                return frappe.db.insert(budget);\n            }).then((budget) => {\n                frappe.msgprint(\"Budget created successfully.\");\n                let monthly_distribution = frappe.model.get_new_doc(\"Monthly Distribution\");\n                 monthly_distribution.distribution_id = frm.doc.name;\n                 monthly_distribution.fiscal_year = frm.doc.fiscal_year;\n                 monthly_distribution.percentages = getMonths(frm.doc.total, frm.doc.item_summary);\n                 console.log(\"Monthly Distribution document:\", monthly_distribution);\n                frappe.db.insert(monthly_distribution).then(function(r) {\n                   console.log(\"finnaly\",budget); \n                   frappe.db.set_value('Budget',budget.name, 'monthly_distribution', r.name);\n                      console.log(\"finnalylast_budget\",budget.name); \n\n                });\n\n                \n            }).catch(err => {\n                console.error(\"Error inserting budget:\", err);\n                frappe.msgprint(\"Error creating budget.\");\n            });\n            ////////////////////////////\n            ///////////AHMED///////////\n                        \n                        \n                        \n                        \n                        \n                    //  }).then(function() {\n                    //     console.log(\"Budget document inserted successfully.\");\n                    //     frappe.msgprint(\"Budget created successfully.\");\n                    // }).catch(function(err) {\n                    //     // console.error(\"Error inserting budget:\" + err);\n                    //     frappe.msgprint(\"Error creating budget.\");\n                    // });\n\n\n        // }\n    },\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 1,
  "modified": "2024-08-11 09:46:43.691079",
  "module": null,
  "name": "filter Budget Request after press field Budget Source",
  "script": "frappe.ui.form.on('Budget Request', {\n    refresh: function (frm) {\n        if (frm.doc.__islocal && frm.doc.__unsaved) {\n            // Fetch the latest Budget Control document\n            frappe.db.get_list('Budget Control', {\n                fields: ['name'],\n                filters: {'status': 'In Progress'},\n                order_by: 'creation desc',\n                limit: 1\n            }).then(docs => {\n                if (docs.length > 0) {\n                    let latest_doc = docs[0];\n                    \n                    // Set the query to filter the 'custom_budget_source' field\n                    frm.set_query('custom_budget_source', function() {\n                        return {\n                            filters: [\n                                ['name', '=', latest_doc.name]\n                            ]\n                        };\n                    });\n                    \n                    // Optionally set the field value directly if needed\n                    frm.set_value('custom_budget_source', latest_doc.name);\n                }\n            }).catch(err => {\n                console.error('Error fetching Budget Control:', err);\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Budget Request",
  "enabled": 1,
  "modified": "2024-08-11 09:49:45.497147",
  "module": null,
  "name": "calc",
  "script": "frappe.ui.form.on('Budget Request',  {\r\n    refresh: function(frm) {\r\n        // use the __islocal value of doc,  to check if the doc is saved or not\r\n        // if(frm.doc.__unsaved && !frm.doc.department) frappe.msgprint(\"Set Department First and Save The Doc \");\r\n        if(frm.doc.department && !frm.doc.budget_items_details.length){\r\n            frappe.call({\r\n                method: \"budget.budge.api.api.get_items_per_department\",\r\n                args: {\r\n                    department: frm.doc.department,\r\n                    // order_by: custom_item_category,\r\n                },\r\n                callback(r) {\r\n                    frm.doc.budget_items_details = [];\r\n                    let items = r.message;\r\n                    // items.sort();\r\n                    // items.sort((a, b) => a.custom_item_category - b.custom_item_category);\r\n\r\n                    items.forEach((item) => {\r\n                        frm.add_child(\"budget_items_details\", {\r\n                            item_name: item.name,\r\n                            expense_account: item.expense_account,\r\n                            custom_item_category:item.custom_item_category,\r\n                        });\r\n                    });\r\n                    frm.refresh_fields();\r\n                },\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n// frm.doc.__unsaved\r\n\r\nfrappe.ui.form.on(\"Budget Request\", {\r\n  department(frm) {\r\n    //   if( frm.doc.__unsaved && !frm.doc.department){\r\n    //       msgprint(\"Set Department First and Save the Doc \");\r\n    //   }\r\n      if(frm.doc.department){\r\n    frappe.call({\r\n      method: \"budget.budge.api.api.get_items_per_department\",\r\n      args: {\r\n        department: frm.doc.department,\r\n      },\r\n      callback(r) {\r\n        frm.doc.budget_items_details = [];\r\n        let items = r.message;\r\n        console.log(r.message);\r\n        items.forEach((item) => {\r\n          frm.add_child(\"budget_items_details\", {\r\n            item_name: item.name,\r\n            expense_account: item.expense_account,\r\n            custom_item_category: item.custom_item_category,\r\n          });\r\n        });\r\n        frm.refresh_fields();\r\n      },\r\n    });\r\n      }\r\n  },\r\n\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// frappe.ui.form.on('Budget Items Details', {\r\n//     custom_show: function(frm, cdt, cdn) {\r\n//         var child = locals[cdt][cdn];\r\n//         var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n//         // Check if form is unsaved\r\n//         if (frm.doc.__unsaved) {\r\n//             frappe.msgprint(__('Please save the form before using this feature.'));\r\n//             return;\r\n//         }\r\n\r\n//         var dialog = new frappe.ui.Dialog({\r\n//             title: __('Enter Monthly Budget Quantities'),\r\n//             fields: [\r\n//                 {\r\n//                     fieldname: 'budget_table',\r\n//                     fieldtype: 'HTML',\r\n//                     label: __('Budget Table')\r\n//                 }\r\n//             ]\r\n//         });\r\n\r\n//         // Add primary action button\r\n//         dialog.set_primary_action(__('Update'), function() {\r\n//             var dialog_values = {};\r\n//             var total_quantity = 0;\r\n//             for (var i = 0; i < months.length; i++) {\r\n//                 var month_fieldname = months[i].toLowerCase();\r\n//                 dialog_values[month_fieldname] = $('#' + month_fieldname + '_' + child.idx).val();\r\n//                 total_quantity += parseFloat(dialog_values[month_fieldname]) || 0;\r\n//             }\r\n//             console.log('Dialog Values:', dialog_values);\r\n\r\n//             frappe.model.set_value(cdt, cdn, 'total_quantity', total_quantity);\r\n\r\n//             var expected_price = child.expected_price;\r\n//             if (!isNaN(expected_price) && !isNaN(total_quantity)) {\r\n//                 var total = total_quantity * expected_price;\r\n//                 console.log('Total Quantity:', total_quantity);\r\n//                 console.log('Expected Price:', expected_price);\r\n//                 console.log('Total:', total);\r\n//                 frappe.model.set_value(cdt, cdn, 'total', total);\r\n//             } else {\r\n//                 frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\r\n//             }\r\n\r\n//             frappe.model.set_value(cdt, cdn, dialog_values);\r\n\r\n//             frm.save();\r\n//             dialog.hide();\r\n//             //location.reload()\r\n//         });\r\n\r\n//         var table_html = '<table class=\"table table-bordered\">';\r\n//         for (var i = 0; i < 12; i++) {\r\n//             if (i % 6 === 0) {\r\n//                 table_html += '<tr>';\r\n//             }\r\n//             var month_fieldname = months[i].toLowerCase();\r\n//             var month_value = child[month_fieldname] || '';\r\n//             // Append the row index to the ID of each input field\r\n//             table_html += '<td><label>' + months[i] + '</label><input type=\"text\" class=\"form-control float-input\" id=\"' + month_fieldname + '_' + child.idx + '\" name=\"' + month_fieldname + '\" value=\"' + month_value + '\"></td>';\r\n//             if ((i + 1) % 6 === 0) {\r\n//                 table_html += '</tr>';\r\n//             }\r\n//         }\r\n//         table_html += '</table>';\r\n//         dialog.fields_dict['budget_table'].$wrapper.html(table_html);\r\n\r\n//         dialog.show();\r\n//     },\r\n//     expected_price: function(frm, cdt, cdn) {\r\n//         var child = locals[cdt][cdn];\r\n//         var total_quantity = child.total_quantity || 0;\r\n//         var expected_price = child.expected_price;\r\n\r\n//         if (!isNaN(expected_price) && !isNaN(total_quantity)) {\r\n//             var total = total_quantity * expected_price;\r\n//             console.log('Total Quantity:', total_quantity);\r\n//             console.log('Expected Price:', expected_price);\r\n//             console.log('Total:', total);\r\n//             frappe.model.set_value(cdt, cdn, 'total', total);\r\n//         } else {\r\n//             frappe.msgprint(__('Error: Expected Price or Total Quantity is not a number.'));\r\n//         }\r\n//     }\r\n//});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on('Budget Request', {\r\n    // Custom function to perform calculations\r\n    before_save: function(frm) {\r\n        let months = [\r\n            \"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\",\r\n            \"august\", \"september\", \"october\", \"november\", \"december\"\r\n        ];\r\n\r\n        let total_quantity = 0;\r\n        let total_amount = 0;\r\n\r\n        frm.doc.item_summary = [];\r\n\r\n        for (let month of months) {\r\n            let month_total_quantity = 0;\r\n            let month_total_amount = 0;\r\n\r\n            frm.doc.budget_items_details.forEach((item) => {\r\n                // Consider the value as zero if the status is not \"Accepted\"\r\n                let quantity = item.status == \"Accepted\" ? (item[month] || 0) : 0;\r\n                let amount = quantity * (item.expected_price || 0);\r\n\r\n                month_total_quantity += quantity;\r\n                month_total_amount += amount;\r\n            });\r\n\r\n            // Add summary for the month\r\n            frm.add_child(\"item_summary\", {\r\n                month: month,\r\n                total: month_total_amount,\r\n                total_quantity: month_total_quantity,\r\n            });\r\n\r\n            total_amount += month_total_amount;\r\n            total_quantity += month_total_quantity;\r\n        }\r\n\r\n        frm.doc.total = total_amount;\r\n        frm.doc.total_quantity = total_quantity;\r\n\r\n        // // Explicitly show the submit button if the form is saved\r\n        // if (frm.doc.docstatus === 0 && frm.doc.__unsaved) {\r\n        //     frm.set_primary_action(__('Submit'), function() {\r\n        //         frm.save('Submit');\r\n        //     });\r\n        // }\r\n\r\n        frm.refresh_fields();\r\n    },\r\n\r\n    // Call the calculation function after the form is saved\r\n    // after_save: function(frm) {\r\n    //     frm.events.calculate_totals(frm);\r\n    // }\r\n});\r\n\r\n\r\n\r\n\r\n\r\nfrappe.ui.form.on('Budget Request', {\r\n    before_save: function(frm) {\r\n        let total_quantity = 0;\r\n\r\n        // Iterate over each row in budget_items_details\r\n        frm.doc.budget_items_details.forEach((item) => {\r\n            total_quantity += (item.total_quantity || 0); // Sum up the total_quantity of each row\r\n        });\r\n\r\n        // Update total_quantity field in the parent form\r\n        frm.doc.total_quantity = total_quantity;\r\n\r\n        frm.refresh_fields();\r\n    },\r\n});\r\n\r\n\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-08-27 21:18:50.069171",
  "module": null,
  "name": "add popup for send emails2",
  "script": "frappe.ui.form.on('Issue', {\n    custom_get_entity_contact: function(frm) {\n        var lastFilter = null;\n        console.log(\"hello\");\n        var d = new frappe.ui.Dialog({\n            title: \"Authority Filter\",\n            fields: [\n                {\n                    fieldname: \"filter\",\n                    fieldtype: \"Link\",\n                    label: __(\"Filter\"),\n                    options: \"Authority\",\n                    // get_query: function() {\n                    //     let authority = d.get_values().authority;\n                    //     return {\n                    //         filters: [\n                    //             ['parent_authority', '=', '\u0627\u0644\u062c\u0647\u0627\u062a']\n                                \n                    //             ]\n                    //     }\n                    // }\n                },\n                {\n                    fieldname: \"type\",\n                    fieldtype: \"Select\",\n                    label: __(\"Contact Type\"),\n                    options: [\n                        'External Entities',\n                        'Ministry Entities',\n                        'Affiliate Party'\n                    ],\n                    default: '',\n                    onchange: function() {\n                        var type = d.get_value('type');\n                        if (type === 'External Entities') {\n                            d.fields_dict.external_entities.$wrapper.show();\n                              d.fields_dict.authority.$wrapper.show();\n                            d.fields_dict.authority.$wrapper.hide();\n                            d.fields_dict.parent_authority.$wrapper.hide();\n                            d.fields_dict.sector.$wrapper.hide();\n                            d.fields_dict.center_management.$wrapper.hide();\n                            d.fields_dict.branch_management.$wrapper.hide();\n                        } else if(type === 'Ministry Entities') {\n                            d.fields_dict.external_entities.$wrapper.hide();\n                            d.fields_dict.authority.$wrapper.show();\n                              d.fields_dict.parent_authority.$wrapper.hide();\n                            d.fields_dict.sector.$wrapper.show();\n                            d.fields_dict.center_management.$wrapper.show();\n                            d.fields_dict.branch_management.$wrapper.show();\n                        } else if(type === 'Affiliate Party'){\n                            d.fields_dict.parent_authority.$wrapper.show();\n                            d.fields_dict.external_entities.$wrapper.hide();\n                            d.fields_dict.authority.$wrapper.show();\n                            d.fields_dict.sector.$wrapper.hide();\n                            d.fields_dict.center_management.$wrapper.hide();\n                            d.fields_dict.branch_management.$wrapper.hide();\n                        } else {\n                            d.fields_dict.parent_authority.$wrapper.hide();\n                            d.fields_dict.external_entities.$wrapper.hide();\n                            d.fields_dict.authority.$wrapper.hide();\n                            d.fields_dict.sector.$wrapper.hide();\n                            d.fields_dict.center_management.$wrapper.hide();\n                            d.fields_dict.branch_management.$wrapper.hide();\n                        }\n                    }\n                }, \n                {\n                    fieldname: \"external_entities\",\n                    fieldtype: \"Link\",\n                    label: __(\"External Entities\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        return {\n                            filters: [\n                                ['parent_authority', '=', 'External Entities']\n                            ]\n                        };\n                    }\n                },\n                {\n                    fieldname: \"authority\",\n                    fieldtype: \"Link\",\n                    label: __(\"Ministries\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        return {\n                            filters: [\n                                ['parent_authority', '=', 'Ministries']\n                            ]\n                        };\n                    }\n                },\n                {\n                    fieldname: \"parent_authority\",\n                    fieldtype: \"Link\",\n                    label: __(\"Affiliate Party\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        let authority = d.get_values().authority;\n                        return {\n                            filters: [\n                                ['parent_authority', '=', authority],\n                                ['custom_affiliate_party','=',1]\n                            ]\n                        };\n                    }\n                },\n               \n                {\n                    fieldname: \"sector\",\n                    fieldtype: \"Link\",\n                    label: __(\"Sector\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        let authority = d.get_values().authority;\n                        if (authority) {\n                            return {\n                                filters: [\n                                    ['parent_authority', '=', authority],\n                                    ['custom_affiliate_party','=',0]\n                                ]\n                            };\n                        } else {\n                            frappe.msgprint(__(\"Please select an Authority first.\"));\n                            return;\n                        }\n                \n                    },\n              \n                },\n                {\n                    fieldname: \"center_management\",\n                    fieldtype: \"Link\",\n                    label: __(\"Center Management\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        let sector = d.get_values().sector;\n                        if (sector) {\n                            return {\n                                filters: [\n                                    ['parent_authority', '=', sector],\n                                    ['custom_affiliate_party','=',0]\n                                ]\n                            };\n                        } else {\n                            frappe.msgprint(__(\"Please select an Authority & Sector first.\"));\n                            return;\n                        }\n                    }\n                }, {\n                    fieldname: \"branch_management\",\n                    fieldtype: \"Link\",\n                    label: __(\"Branch Management\"),\n                    options: \"Authority\",\n                    get_query: function() {\n                        let center_management = d.get_values().center_management;\n                        if (center_management) {\n                            return {\n                                filters: [\n                                    ['parent_authority', '=', center_management],\n                                    ['custom_affiliate_party','=',0]\n                                ]\n                            };\n                        } else {\n                            frappe.msgprint(__(\"Please select an Authority & Sector & Center Management first.\"));\n                            return;\n                        }\n                    }\n                }, {\n                    fieldtype: \"Table\",\n                    fieldname: 'contact_tab',\n                    label: __(\"Table Contact\"),\n                    fields: [{\n                            fieldtype: \"Check\",\n                            fieldname: \"select\",\n                            label: __(\"Select\"),\n                            in_list_view: 1\n                        },\n                        {\n                            label: \"Authority\",\n                            fieldtype: \"Data\",\n                            fieldname: \"authority\",\n                            // in_place_edit: false,\n                            in_list_view: 1\n                            \n                        },\n                        {\n                            label: 'Phone',\n                            fieldtype: \"Data\",\n                            fieldname: \"phone\",\n                            // in_place_edit: false,\n                            in_list_view: 1\n                        },\n                        {\n                            label: \"Email\",\n                            fieldtype: \"Data\",\n                            fieldname: \"email\",\n                            // in_place_edit: false,\n                            in_list_view: 1\n                        }\n                    ]\n                },\n\n            ],\n            primary_action_label: __('Search'),\n            primary_action: function() {\n                var val = d.get_values();\n                var fil = val.branch_management || val.center_management || val.sector || val.authority;\n                // Check if the current filter is the same as the last used filter\n                if (fil !== lastFilter) {\n                    // If not the same, update the last filter and perform the search\n                    lastFilter = fil;\n                    searchContact(fil);\n                }\n                \n                let filter = val.filter;\n                frappe.db.get_value(\"Authority\",{\"name\":filter},\"parent_authority\")\n                .then(respose=>{\n                    var filter_parent =respone.message.parent_authority\n                    if(filter_parent){\n                        frappe.db.get_value(\"Authority\",{\"name\":filter},\"parent_authority\")\n                        .then(response=>{\n                            var filter_granny =respone.message.parent_authority\n                            if(filter_granny){\n                                \n                            }else{\n                                d.set_value('parent_authority',filter)\n                            }\n                        })\n                        \n                    }else{\n                        d.set_value('authority',filter)\n                        console.log(\"filter dnot have filter parent\")\n                    }\n                })\n                \n                \n            },\n            secondary_action_label: __('Append to Table'),\n            secondary_action: function() {\n                console.log(d.get_values().contact_tab);\n                let contactTableData = d.get_values().contact_tab;\n                for (let row of contactTableData) {\n                    if (row.select) {\n                        let child = frm.add_child(\"custom_the_contact\");\n                        child.authority = row.authority;\n                        child.contact = row.phone;\n                        child.email = row.email;\n                        refresh_field(\"custom_the_contact\");\n                        console.log(row.__checked);\n                        console.log(row.email);\n                        console.log(row.phone);\n                        d.hide();\n                    }\n                }\n\n            },\n            size: 'large',\n\n        });\n\n        d.show();\n////////////////////////////////////////////////////////////////////////\n        // Trigger onchange event for the Contact Type field to show/hide fields based on its value\n        d.fields_dict.type.$input.trigger('change');\n///////////////////////////////////////////////////////////////////////\n        // d.$wrapper.find('.modal-dialog').css(\"width\",\"800px\");\n        // d.$wrapper.find('.form-control[data-fieldname=\"sector\"]').css(\"width\",\"200px\");\n\n        function searchContact(fil) {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Contact\",\n                    fields: ['*'],\n                    filters: { 'custom_authority': fil }\n                },\n                callback: function(response) {\n                    let msg = response.message;\n                    for (let row of msg) {\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Contact\",\n                                name: row.name,\n                            },\n                            callback: function(r) {\n\n                                let contact = r.message;\n                                let phoneNos = contact.phone_nos;\n                                let emails = contact.email_ids;\n                                let authority = contact.custom_authority;\n\n                                if (d.fields_dict.contact_tab.df) {\n                                    if (!d.fields_dict.contact_tab.df.data) {\n                                        d.fields_dict.contact_tab.df.data = [];\n                                    }\n\n                                }\n                                if (phoneNos.length >= emails.length) {\n                                    for (let pp of phoneNos) {\n                                        d.fields_dict.contact_tab.df.data.push({\n                                            name: contact.name,\n                                            authority: authority,\n                                            phone: pp.phone,\n                                            email: (pp.idx <= emails.length) ? emails[pp.idx - 1].email_id : '',\n                                        });\n                                    }\n                                } else if (emails.length >= phoneNos.length) {\n                                    for (let ee of emails) {\n                                        d.fields_dict.contact_tab.df.data.push({\n                                            name: contact.name,\n                                            authority: authority,\n                                            phone: (ee.idx <= phoneNos.length) ? phoneNos[ee.idx - 1].phone : '',\n                                            email: ee.email_id\n                                        });\n                                    }\n                                }\n                                d.fields_dict.contact_tab.grid.refresh();\n                            }\n                        });\n                    }\n                }\n            });\n        }\n        /////////////////the end of btn/////////////////\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 1,
  "modified": "2024-09-04 16:44:39.818787",
  "module": null,
  "name": "customer 1 call server script ui",
  "script": "// frappe.ui.form.on('Authorities Generalization 2', {\n//     refresh(frm) {\n//         frm.add_custom_button(__('Action'), function() {\n//             // let list = [];\n//             await  my_second_full(frm);\n//             for (let AC of frm.doc.authorities_committees) {\n//                 // list.push({\n//                 //      \"committe\": AC.committee,\n//                 //     \"status\":AC.status,\n//                 // })\n\n                \n//                 frappe.call({\n//                 method: \"send_to_newsletters\", // Update this path\n//                 args: {\n//                     committe: AC.committee,\n//                     status:AC.status,\n                    \n                    \n//                 },\n//                 callback: function(response) {\n//                     // Handle the response from the server-side method if needed\n//                     console.log(response.message);\n                    \n//                 }\n//             });\n            \n            \n            \n//             }\n            \n            \n            \n            \n//             // console.log(list.committe).\n           \n            \n            \n//         });\n//     }\n// });\n//  async function my_second_full(frm) {\n//                 console.log('my_second_full');\n//                 let emaills = [];\n//                 for (let ACM of cur_frm.doc.authorities_committees_members) {\n//                     let Active = ACM.member;\n//                     let filter3 = ACM.committee;\n//                     let response = await frappe.call({\n//                         method: \"frappe.client.get\",\n//                         args: {\n//                             doctype: \"Customer\",\n//                             name: Active,\n//                             custom_customer_status: 'Active'\n//                         }\n//                     });\n            \n//                     if (response && response.message) {\n//                         let customer = response.message;\n//                         if (customer.custom_email !== undefined && customer.custom_email !== \"\") {\n//                             let committees = customer.custom_committees_you_would_like_to_join || [];\n//                             for (let item of committees) {\n//                                 if (item.committees === filter3) {\n//                                     emaills.push(customer.custom_email);\n//                                     break;\n//                                 }\n//                             }\n//                         }\n//                     }\n//                 }\n            \n//                 console.log(\"EMAILS all email for (childtable 2 Authorities Committees Members)\", emaills);\n//                 // Return the emails fetched\n//                 return emaills;\n//             }\n\n\n\n// frappe.ui.form.on('Authorities Generalization 2', {\n//     refresh(frm) {\n//         frm.add_custom_button(__('Action'), async function() {\n//                 let emails1 = [];\n//                 let emails2 = await my_second_full(frm);\n//               for (let AC of frm.doc.authorities_committees) {\n            \n\n                \n//                 frappe.call({\n//                 method: \"send_to_newsletters\", // Update this path\n//                 args: {\n//                     committe: AC.committee,\n//                     status:AC.status,\n                    \n                    \n//                 },\n//                 callback: function(response) {\n//                     // Handle the response from the server-side method if needed\n//                     console.log(response.message);\n//                     // emails1.push(response.message);\n//                     let emails3 = [];\n//                     emails3.concat(emails2);\n//                     emails3.concat(response.message);\n//                      console.log('emails3',emails3);\n                    \n                    \n//                 }\n//             });\n            \n            \n            \n//             }\n            \n           \n//             //  console.log('emails1',emails1);\n//             // let emails3 = [];\n//             // emails3.concat(emails2);\n//             // emails3.concat(emails1);\n//             //  console.log('emails3',emails3);\n            \n//         });\n//     }\n// });\n\n// async function my_second_full(frm) {\n//     console.log('my_second_full');\n//     let emails = [];\n    \n//     for (let ACM of frm.doc.authorities_committees_members) {\n//         let Active = ACM.member;\n//         let filter3 = ACM.committee;\n\n//         let response = await frappe.call({\n//             method: \"frappe.client.get\",\n//             args: {\n//                 doctype: \"Customer\",\n//                 name: Active,\n//                 custom_customer_status: 'Active'\n//             }\n//         });\n\n//         if (response && response.message) {\n//             let customer = response.message;\n//             if (customer.custom_email && customer.custom_email !== \"\") {\n//                 let committees = customer.custom_committees_you_would_like_to_join || [];\n//                 for (let item of committees) {\n//                     if (item.committees === filter3) {\n//                         emails.push(customer.custom_email);\n//                         break;\n//                     }\n//                 }\n//             }\n//         }\n//     }\n\n//     console.log(\"EMAILS all email for (childtable 2 Authorities Committees Members)\", emails);\n//     // Return the emails fetched\n//     return emails;\n// }\n\n\n\n\n\n\n\nfrappe.ui.form.on('Authorities Generalization 2', {\n    refresh(frm) {\n        frm.add_custom_button(__('Action'), async function() {\n            // Collect all email promises\n            let emailPromises = frm.doc.authorities_committees.map(AC => {\n                return new Promise((resolve) => {\n                    frappe.call({\n                        method: \"send_to_newsletters\", // Update this path\n                        args: {\n                            committe: AC.committee,\n                            status: AC.status,\n                        },\n                        \n                        callback: function(response) {\n                            // Handle the response from the server-side method\n                            console.log(\"response\",response.message);\n                            resolve(response.message); // Resolve the promise with the response\n                        }\n                    });\n                });\n            });\n\n            // Wait for all promises to resolve\n            let emails1 = await Promise.all(emailPromises);\n            let flattenedEmails1 = emails1.flat();\n            // Fetch additional emails\n            let emails2 = await my_second_full(frm);\n\n            // Combine emails\n            let allEmails = [...flattenedEmails1, ...emails2];\n             let contacts = cur_frm.doc.custom_the_contact;\n                for (let contact of contacts) {\n                    let email = contact.email;\n                    allEmails.push(email);\n                }\n            console.log('flattenedEmails1:', flattenedEmails1);\n            console.log('emails2:', emails2);\n            console.log('allEmails:', allEmails);\n             frappe.new_doc(\"Customer Newsletter\",{\n                    \"custom_source\":cur_frm.doctype,\n                    \"custom_generealiztion_id\":cur_frm.doc.name\n                }).then(() => {\n                    for (let email of allEmails) {\n                        let child = cur_frm.add_child(\"customer_email\");\n                        child.email = email;\n                        // frappe.db.set_value(\"Customer Newsletter\",doc.name,\"sender_email\",\"Account\")\n                        cur_frm.refresh_fields(\"customer_email\");\n                    }\n                });\n        });\n    }\n});\n\nasync function my_second_full(frm) {\n    console.log('my_second_full');\n    let emails = [];\n\n    for (let ACM of frm.doc.authorities_committees_members) {\n        let Active = ACM.member;\n        let filter3 = ACM.committee;\n\n        let response = await frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Customer\",\n                name: Active,\n                custom_customer_status: 'Active'\n            }\n        });\n\n        if (response && response.message) {\n            let customer = response.message;\n            if (customer.custom_email && customer.custom_email !== \"\") {\n                let committees = customer.custom_committees_you_would_like_to_join || [];\n                for (let item of committees) {\n                    if (item.committees === filter3) {\n                        emails.push(customer.custom_email);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    console.log(\"EMAILS all email for (childtable 2 Authorities Committees Members)\", emails);\n    // Return the emails fetched\n    return emails;\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Authorities Generalization 2",
  "enabled": 1,
  "modified": "2024-09-04 15:05:13.015306",
  "module": null,
  "name": "get emails from ( Authorities Generalization 2)  to (newsletters )",
  "script": "frappe.ui.form.on('Authorities Generalization 2', {\n    refresh: function(frm) {\n        frm.add_custom_button(('Sent to NewsLetters'), async function() {\n            let totalCalls = 8;\n          frappe.show_progress(\"Getting Contacts..\", 20, 35, 55, 70, 80, 90, 100, \"Please wait\", \"red\"); \n            \n            \n try {\n                if (!frm.doc.authorities_committees) {\n                     console.log('try 1');\n                    await my_second_full(frm, totalCalls);\n                    await my_third(frm, totalCalls);\n                    //table one \n                   \n                } else if (!frm.doc.authorities_committees_members) {\n                    console.log('try 2');\n                    await my_full(frm,totalCalls);\n                    await my_third(frm, totalCalls);\n                     \n                } else if (!frm.doc.custom_the_contact) {\n                    console.log('try 3');\n                    await my_second_full(frm, totalCalls);\n                    await my_full(frm,totalCalls);\n                    \n                } else {\n                     console.log('try else');\n                        await getCustomers(frm);\n                        // await getActiveCustomer(frm,customerNames);\n                        await my_full(frm,totalCalls);\n                        await my_second_full(frm, totalCalls);\n                        await my_third(frm, totalCalls);\n                    \n                   \n                     \n                }\n            } catch (error) {\n                console.error(error);\n            } finally {\n                frappe.hide_progress();\n                console.log('finally hide progress bar ');\n            }\n        });\n    }\n});\n\nasync function my_full(frm,totalCalls) {\n     console.log(' start function my_full');\n    let customerNames = [];\n    let customers = await getCustomers();\n    console.log(typeof customers);\n    console.log(customers.length);\n    \n            for (const customer of customers) {\n                const name1 = customer.name;\n                customerNames.push(name1);\n\n            }\n    console.log('myfull');\n    let emailes = await getActiveCustomer(frm,customerNames);\n    return customerNames;\n    \n    \n}\nasync function getCustomers(frm) {\n    console.log(\"1-start the (get_list):\");\n\n    // Create a new Promise that will be resolved when the data is fetched\n    return new Promise((resolve, reject) => {\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Customer\",\n                limit_page_length: 5000,\n                fields: ['*'],\n                filters: { 'custom_customer_status': 'Active' }\n            },\n            callback: function(response) {\n                if (response && response.message) {\n                    // Resolve the Promise with the customers data\n                    resolve(response.message);\n                } else {\n                    reject(\"Error fetching active customers\");\n                }\n            },\n            error: function(error) {\n                reject(\"Error in frappe call: \" + error.message);\n            }\n        });\n    }).then(customers => {\n        console.log(\"1-finished the (get_list):\", customers);\n        return customers;\n    }).catch(error => {\n        console.error(\"Failed to retrieve customers:\", error);\n        throw error; // Re-throw the error to be handled by the caller\n    });\n}\n\n\n\nasync function getActiveCustomer(frm,customerNames) {\n     console.log(\" 2-start the (get):\");\n    let emailes = [];\n    let authorities_committees = cur_frm.doc.authorities_committees;\n    for (const name of customerNames) {\n        try {\n            const customer = await new Promise((resolve, reject) => {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Customer\",\n                        name: name\n                    },\n                    callback: function(response) {\n                        if (response && response.message) {\n                            resolve(response.message);\n                            let customer =response.message;\n                            //////////////////////////////////////////////////////////////////\n                            let committees = customer.custom_committees_you_would_like_to_join;\n                            let emails = customer.custom_email;\n                            let isPrinted = false; // Flag to track if the console log has been printed\n                                  for (let committee of committees) {\n                                    for (let AC of frm.doc.authorities_committees) {\n                                        let filter2 = AC.committee;\n                                        if (committee.committees === filter2 && emails !== undefined &&emails !== '' && emails !== null) {\n                                            emailes.push(customer.custom_email);\n                                            console.log('getActiveCustomer');\n                                            isPrinted = true; // Set the flag to true once the condition is met\n                                            break;\n                                        }\n                                    }    \n                                    }\n                                //////////////////////////////////////////////////////////////////\n                        } else {\n                            reject(`Error fetching customer with ID ${customerId}`);\n                        }\n                    }\n                });\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    console.log(\"EMAILS\",typeof emailes);\n    console.log(\"EMAILS all email for (childtable 1 Authorities Committees)\",emailes.length);\n    return emailes;\n}\n\nasync function my_second_full(frm) {\n    console.log('my_second_full');\n    let emaills = [];\n    for (let ACM of cur_frm.doc.authorities_committees_members) {\n        let Active = ACM.member;\n        let filter3 = ACM.committee;\n        let response = await frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Customer\",\n                name: Active,\n                custom_customer_status: 'Active'\n            }\n        });\n\n        if (response && response.message) {\n            let customer = response.message;\n            if (customer.custom_email !== undefined && customer.custom_email !== \"\") {\n                let committees = customer.custom_committees_you_would_like_to_join || [];\n                for (let item of committees) {\n                    if (item.committees === filter3) {\n                        emaills.push(customer.custom_email);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    console.log(\"EMAILS all email for (childtable 2 Authorities Committees Members)\", emaills);\n    // Return the emails fetched\n    return emaills;\n}\n\nasync function my_third(frm, totalCalls) {\n    console.log('my_third');\n    let emails3 = [];\n\n    // Call my_second_full to retrieve emails\n    let emaills = await my_second_full(frm);\n    let customerNames = await my_full(frm, totalCalls);\n    let emaills1 = await getActiveCustomer(frm, customerNames);\n    // Merge emaills with emails3\n    emails3 = emails3.concat(emaills);\n    emails3 = emails3.concat(emaills1);\n    // Get contacts' emails\n    let contacts = cur_frm.doc.custom_the_contact;\n    for (let contact of contacts) {\n        let email = contact.email;\n        emails3.push(email);\n    }\n    // Add emails to the customer newsletter\n    frappe.new_doc(\"Customer Newsletter\",{\n        \"source\":cur_frm.doctype,\n        \"generealiztion_id\":cur_frm.doc.name\n    }).then(() => {\n        for (let email of emails3) {\n            let child = cur_frm.add_child(\"customer_email\");\n            child.email = email;\n            // frappe.db.set_value(\"Customer Newsletter\",doc.name,\"sender_email\",\"Account\")\n            cur_frm.refresh_fields(\"customer_email\");\n        }\n    });\n    console.log(\"function3\");\n    console.log(\"emails3\", emails3);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Meeting",
  "enabled": 1,
  "modified": "2024-09-05 09:59:01.145754",
  "module": null,
  "name": "testy server script the file in barcode_aec",
  "script": "frappe.ui.form.on('Meeting', {\n\trefresh(frm) {\n\t\t// your code here\n        \tfrm.add_custom_button(__(\"Test Server Script\"), function() {\n        \t    \n            // Your code here\n            \n            frappe.call({\n                method:\"barcode_aec.test_server.test\"\n            })\n        });\n\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-09-05 11:40:33.300169",
  "module": null,
  "name": "issue button for (print issue letter)",
  "script": "frappe.ui.form.on('Issue', {\n\tbefore_save(frm) {\n\t\t// your code here\n\t\tlet print_format = 'issue  is letter';\n\t\t     frm.add_custom_button(__('Issue letter Print'), function() {\n                frappe.utils.print(\n                    frm.doctype,                \n                    frm.docname,            \n                    print_format,  \n                    frm.doc.letter_head,\n                    \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\"\n                    \n                );\n\t\t     });\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue Assignment",
  "enabled": 1,
  "modified": "2024-09-08 13:02:31.816246",
  "module": null,
  "name": "call and create task then fetch it in child table",
  "script": "\n\nfrappe.ui.form.on('Issue Assignment', {\n    on_submit(frm) {\n        let issue = frm.doc.issue;\n        let subject = frm.doc.custom_subject;\n        let name = frm.doc.name;\n        let table = frm.doc.custom_departments_assignment_;\n\n        if (table.length > 0) {\n            frappe.call({\n                method: \"barcode_aec.make_task.make_task\",\n                args: { issue: issue, subject: subject, name: name },\n                callback: function(response) {\n                    if (response.message) {\n                        console.log(\"response.message\", response.message);\n                        frappe.msgprint(__('Task successfully created.'));\n                    } else {\n                        // frappe.msgprint(__('An error occurred while creating the task.'));\n                    }\n\n                    // Refresh the fields and reload the document after the response is processed\n                    frm.refresh_fields(\"custom_departments_assignment_\");\n                    cur_frm.reload_doc();\n                }\n            });\n        } else {\n            // Optional: Handle the case where the table is empty, if needed\n            frappe.msgprint(__('No assignments found in the table.'));\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue Assignment",
  "enabled": 1,
  "modified": "2024-09-05 18:15:54.273010",
  "module": null,
  "name": "reflect status cancelled and hold on(issue task) doc",
  "script": "frappe.ui.form.on('Issue Assignment', {\n\tstatus(frm) {\n\t\t// your code here\n\t\tvar table = frm.doc.custom_departments_assignment_;\n\t\ttable.forEach(row=>{\n\t\t    console.log(\"ss\",row.custom_task_link);\n\t\t    if (frm.doc.status === 'Hold' || frm.doc.status === 'Cancelled' ){\n\t\t        frappe.call({\n\t\t        method:\"frappe.client.set_value\",\n\t\t        args:{\n\t\t            \"doctype\":\"Issue Tasks\",\n\t\t            \"name\":row.custom_task_link,\n\t\t            \"fieldname\":\"status\",\n\t\t            \"value\": frm.doc.status\n\t\t        },\n\t\t        callback:function(response){\n\t\t            console.log(\"Doc chaned to \",frm.doc.status);\n\t\t            \n\t\t        }\n\t\t    });\n\t\t    }\n\t\t});\n\t\tif(frm.doc.docstatus === 1 && frm.doc.status === 'Completed'){\n\t\t         console.log(\"frm.doc.issue \",frm.doc.issue);\n\t\t        \t        frappe.call({\n\t\t        method:\"frappe.client.set_value\",\n\t\t        args:{\n\t\t            \"doctype\":\"Issue\",\n\t\t            \"name\":frm.doc.issue,\n\t\t            \"fieldname\":\"status\",\n\t\t            \"value\": \"Replied\"\n\t\t        },\n\t\t        callback:function(response){\n\t\t            console.log(\"Doc chaned to \",r.message);\n\t\t            \n\t\t        }\n\t\t    });\n\t\t    }\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue Assignment",
  "enabled": 0,
  "modified": "2024-09-05 18:16:10.517193",
  "module": null,
  "name": "update status depend on child table Open ,In progrss ,Done",
  "script": "// frappe.ui.form.on('Issue Assignment', {\n//     refresh(frm) {\n//         // Initialize the counts for each status\n//         let list = {\n//             \"Open\": 0,\n//             \"In progress\": 0,\n//             \"Done\": 0,\n//             \"Hold\":0,\n//             \"Cancelled\":0\n//         };\n\n//         // Access the table from the form document\n//         var table = frm.doc.custom_departments_assignment_;\n\n//         // Iterate over each row in the table\n//         table.forEach(row => {\n//             console.log(\"Row status:\", row.custom_status);\n\n//             // Ensure that the status is valid before incrementing\n//             if (list.hasOwnProperty(row.custom_status)) {\n//                 list[row.custom_status]++;\n//             }\n//         });\n\n//         // Log the complete status counts\n//         console.log(\"Status counts:\", list);\n\n\n//             if(list[\"In progress\"]){\n//                 frappe.db.set_value(\"Issue Assignment\",frm.doc.name,\"status\", \"In progress\");\n//                 // frm.refresh(\"status\")\n//             }\n//             else if(list.Done>0){\n//                  if(list.Open === 0 && list[\"In progress\"] === 0 && list.Hold === 0 && list.Cancelled === 0) {\n//                      frappe.db.set_value(\"Issue Assignment\",frm.doc.name,\"status\", \"In Review\");\n//                     //  frm.refresh(\"status\")\n//                  }else if(list.Open >0 && list[\"In progress\"] === 0 && list.Hold === 0 && list.Cancelled === 0 ){\n//                       frappe.db.set_value(\"Issue Assignment\",frm.doc.name,\"status\", \"In progress\");\n//                     //  frm.refresh(\"status\")\n//                  }\n//             }\n     \n//     }\n// });\n\nfrappe.ui.form.on('Issue Assignment', {\n    refresh(frm) {\n        // Initialize the counts for each status\n        let list = {\n            \"Open\": 0,\n            \"In progress\": 0,\n            \"Done\": 0,\n            \"Hold\": 0,\n            \"Cancelled\": 0\n        };\n\n        // Access the table from the form document\n        var table = frm.doc.custom_departments_assignment_ || [];\n\n        // Iterate over each row in the table\n        table.forEach(row => {\n            console.log(\"Row status:\", row.custom_status);\n\n            // Ensure that the status is valid before incrementing\n            if (list.hasOwnProperty(row.custom_status)) {\n                list[row.custom_status]++;\n            }\n        });\n\n        // Log the complete status counts\n        console.log(\"Status counts:\", list);\n\n        // Determine the new status based on counts\n        let new_status;\n        if (list[\"In progress\"] > 0) {\n            new_status = \"In progress\";\n        } else if (list[\"Done\"] > 0) {\n            if (list[\"Open\"] === 0 && list[\"In progress\"] === 0 && list[\"Hold\"] === 0 && list[\"Cancelled\"] === 0) {\n                new_status = \"In Review\";\n            } else if (list[\"Open\"] > 0 && list[\"In progress\"] === 0 && list[\"Hold\"] === 0 && list[\"Cancelled\"] === 0) {\n                new_status = \"In progress\";\n            }\n        }\n\n        // Update the status if needed\n        if (new_status) {\n            frappe.db.set_value(\"Issue Assignment\", frm.doc.name, \"status\", new_status)\n                .then(() => {\n                    frm.refresh_field(\"status\");\n                })\n                .catch(err => {\n                    console.error(\"Error updating status:\", err);\n                });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-09-16 14:05:52.864288",
  "module": null,
  "name": "budget calculate on Purchase order",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t let today = new Date(frm.doc.transaction_date);\n        let startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n        let endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);\n        let fiscal_year = new Date(today.getFullYear());\n        console.log(\"fiscal_year\",startOfMonth.toISOString().split('T')[0])\n// \t\tfrappe.call({\n// \t\t    method:\"barcode_aec.budget_calculate.after_workflow_action\",\n// \t\t    args:{\n// \t\t        \"docname\":frm.doc.name,\n// \t\t        \"transaction_date\": today.toISOString().split('T')[0],\n\t\t        \n// \t\t       \"filters\": {\n//                         \"docstatus\": 1,\n//                         \"transaction_date\": [\"between\", [startOfMonth.toISOString().split('T')[0], endOfMonth.toISOString().split('T')[0]]]\n//                     }\n// \t\t    },\n// \t\t    callback:function(response){\n\t\t        \n// \t\t        console.log(\"Response\",response.message);\n\t\t        \n// \t\t    }\n// \t\t});\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-09-17 13:38:55.409723",
  "module": null,
  "name": "validate table calculate pudget for first Purchase order",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on('Purchase Order', {\n    async after_save(frm, cdt, cdn) {\n        // Your code here\n        // const fieldMissing = [];\n        // const d = locals[cdt][cdn];\n\n        // if (d.qty === undefined) fieldMissing.push('Quantity');\n        // if (d.item_code === undefined) fieldMissing.push('Item Code');\n        // if (d.expense_account === undefined) fieldMissing.push('Expense Account');\n        // if (d.cost_center === undefined) fieldMissing.push('Cost Center');\n\n        if (cur_frm.doc.items.length.length > 0) {\n            frappe.msgprint(`Please provide values in table`);\n            return;\n        }\n\n        try {\n            const budgetDetails = await get_budget(frm);\n            // console.log(\"Budget Details:\", budgetDetails);\n            const monthlyDistribution = get_monthly_distribution(frm).then(allocatedAmounts => {\n                              allocatedAmounts.forEach(row =>{\n                console.log(\"allllllxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\n                    console.log(\"allllll\",row.parent)\n                  let budget_doc = frappe.get_doc(\"Budget\",row.parent);\n                    frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Budget\",\n                                name: row.parent,\n                                fields: [\"*\"],\n                            },\n                            callback: function (r) {\n                                console.log(r.message);\n                            let items = frm.doc.items;  \n                            items.forEach(item=>{\n                                console.log(\"Solgan\",item.amount,item.expense_account,item.cost_center);\n                                let budget = r.message;\n                            let applicable =budget.applicable_on_purchase_order;\n                            let action = budget.custom_action_if__monthly_budget_exceeded_on_po;\n                                if(applicable === 1){\n                                    console.log(\"Action1\",action ==\"Warn\" )\n                                    console.log(\"Action2\",row,row.account == item.expense_account )\n                                    console.log(\"Action3\",row.cost_center == item.cost_center)\n                                     console.log(\"Action4\",row.budget_monthly<item.amount)\n                                     let tm = row.total_amount ? row.total_amount : 0\n                                if(action ==\"Warn\" && row.account == item.expense_account && row.cost_center == item.cost_center&& row.budget_monthly<item.amount){\n                                      frappe.msgprint(\n                                            __(` Account : ${row.account}\\n\\n\n                                            Monthly Budget :${parseInt(row.budget_monthly)}  \n                                            Total purchase order reservied Amount:${tm}    \n                                            it will exceed by ${parseInt(item.amount)} \n                                            \n                                            \n                                            `)\n                                            // () => { change_workflow_state(frm); },\n                                            // () => { frappe.msgprint(__('You pressed no and workflow state not changed'))\n                                            //         cur_frm.set_value(\"workflow_state\", \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u0645\u0627\u0644\u064a\");\n\n                                            // }\n                                        );  \n                                }else if(action ==\"Stop\" && row.total_amount > row.budget_monthly){\n                                    frappe.throw( __(` Account : ${row.account}\\n\\n\n                                            Monthly Budget :${parseInt(row.budget_monthly)}  \n                                            Total purchase order reservied Amount:${tm}    \n                                            it will exceed by ${parseInt(item.amount)} \n                                            \n                                            \n                                            `));\n                                }else if(action ==\"Ignore\"){\n                                    frappe.msgprint (__(`Account : ${row.account}\\n\\n\n                                            Monthly Budget :${parseInt(row.budget_monthly)}  \n                                            Total purchase order reservied Amount:${tm}    \n                                            it will exceed by ${parseInt(item.amount)} \n                                            \n                                            \n                                            `))\n                                }\n                                \n                            }\n                            })\n                            \n\n                            \n                            }\n                    });\n\n                }); \n                \n            });\n            console.log(\"monthlyDistribution:\", monthlyDistribution);\n        } catch (error) {\n            console.error(\"Error fetching budget details:\", error);\n        }\n    }\n});\n\nasync function get_budget(frm) {\n    const today = new Date(frm.doc.transaction_date);\n    const PO_year = today.getFullYear();\n\n    try {\n        const budgetResponse = await new Promise((resolve, reject) => {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Budget\",\n                    limit_page_length: 5000,\n                    fields: [\"name\", \"cost_center\"],\n                    filters: [\n                        [\"docstatus\", \"=\", 1],\n                        [\"fiscal_year\", \"=\", PO_year],\n                    ],\n                    limit: 1,\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        resolve(r.message);\n                    } else {\n                        reject(\"No budgets found\");\n                    }\n                },\n                error: function (err) {\n                    reject(err);\n                }\n            });\n        });\n\n        if (budgetResponse.length > 0) {\n            const budget = budgetResponse[0];\n            const budgetDocResponse = await new Promise((resolve, reject) => {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Budget\",\n                        name: budget.name,\n                        fields: [\"accounts\"],\n                    },\n                    callback: function (r) {\n                        if (r.message) {\n                            resolve(r.message.accounts);\n                        } else {\n                            reject(\"Failed to fetch budget document details\");\n                        }\n                    },\n                    error: function (err) {\n                        reject(err);\n                    }\n                });\n            });\n\n            return budgetDocResponse.map(item => ({\n                ...item,\n                cost_center: budget.cost_center\n            }));\n        } else {\n            console.log(\"No budgets found for the current year\");\n            return [];\n        }\n    } catch (error) {\n        console.error(\"Error in get_budget function\", error);\n        return [];\n    }\n}\nasync function get_monthly_distribution(frm) {\n    try {\n        let budgetDetails = await get_budget(frm);\n        // console.log(\"Budget Detailsaaaaaaaaaaaaaaaaaaaaaaaaaaa:\", budgetDetails);\n          if (!Array.isArray(budgetDetails)) {\n            throw new Error(\"Invalid data format returned from get_budget.\");\n        }\n        let monthList = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let po_month = new Date(frm.doc.transaction_date);\n        let currentMonthIndex = po_month.getMonth(); // Zero-based index\n\n        let allocatedAmounts = [];\n\n        for (let budget of budgetDetails) {\n            let budget_accounts_table = budget; // Access the accounts array from the budget item\n            // console.log(\"Accounts Table ACCCCCounts :\", budget);\n\n            let monthlyDistResponse = await new Promise((resolve, reject) => {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Monthly Distribution\",\n                        name: budget_accounts_table.monthly_distribution,\n                        fields: [\"percentages\"],\n                    },\n                    callback: function (r) {\n                        r.message ? resolve(r.message) : reject(\"Failed to fetch monthly distribution.\");\n                    }\n                });\n            });\n\n            let child = monthlyDistResponse.percentages;\n            child.forEach(row => {\n                if (row.month === monthList[currentMonthIndex]) {\n                    let allocatedAmount = (row.percentage_allocation * budget_accounts_table.budget_amount) / 100;\n                    // let totalAmount = poResults[budget_accounts_table.account] ? poResults[budget_accounts_table.account].total_amount : 0;\n                    // console.log(\"totalAmount\",poResults[budget_accounts_table.account].total_amount,\"buss\",budget_accounts_table.parent);\n                    allocatedAmounts.push({\n                        \"account\": budget_accounts_table.account,\n                        \"cost_center\": budget.cost_center,\n                        \"budget_monthly\": allocatedAmount,\n                        // \"total_amount\": totalAmount,// Add total amount for the account\n                        \"parent\": budget_accounts_table.parent,\n                    });\n                }\n            });\n        }\n\n        // Ensure allocatedAmounts is logged only once\n        // console.log(\"Final Allocated Amounts:\", allocatedAmounts);\n        return allocatedAmounts;\n\n    } catch (error) {\n        console.error(\"Error in get_monthly_distribution:\", error);\n        throw error; // Re-throw the error to be handled by the caller\n    }\n    //  console.log(\"Final Allocated Amount22s:\", allocatedAmounts);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-09-17 13:39:34.558007",
  "module": null,
  "name": "validate budget in purchase order",
  "script": "frappe.ui.form.on(\"Purchase Order\", {\n refresh(frm) {\n\n        if (frm.doc.workflow_state === '\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u0645\u0627\u0644\u064a') {\n            // if(frm.selected_workflow_action === \"Approve\"){\n             console.log(frm.selected_workflow_action ,frm.doc.workflow_state === \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u0645\u0627\u0644\u064a\");\n        get_po(frm).then(poResults => {\n            console.log(\"Purchase Order Totals:\", poResults);\n\n            get_monthly_distribution(frm, poResults).then(allocatedAmounts => {\n                // Ensure this is logged only once\n                console.log(\"Allocated Amountsggg:\", allocatedAmounts);\n                allocatedAmounts.forEach(row =>{\n                    \n                   let budget_doc = frappe.get_doc(\"Budget\",row.parent);\n                    frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Budget\",\n                                name: row.parent,\n                                fields: [\"*\"],\n                            },\n                            callback: function (r) {\n                                console.log(r.message);\n                            let items = frm.doc.items;  \n                            items.forEach(item=>{\n                                console.log(\"Solgan\",item.amount,item.expense_account,item.cost_center);\n                                let budget = r.message;\n                            let applicable =budget.applicable_on_purchase_order;\n                            let action = budget.custom_action_if__monthly_budget_exceeded_on_po;\n                                if(applicable === 1){\n                                    console.log(\"Action1\",action ==\"Warn\" )\n                                    console.log(\"Action2\",row,row.account == item.expense_account )\n                                    console.log(\"Action3\",row.cost_center == item.cost_center)\n                                     console.log(\"Action4\",item.amount+row.total_amount>row.budget_monthly)\n                                if(action ==\"Warn\" && row.account == item.expense_account && row.cost_center == item.cost_center&& item.amount+row.total_amount>row.budget_monthly){\n                                       frappe.msgprint(\n                                            __(` Account : ${row.account}\\n\\n\n                                            Monthly Budget :${parseInt(row.budget_monthly)}  \n                                            Total purchase order reservied Amount:${row.total_amount}    \n                                            it will exceed by ${parseInt(item.amount+row.total_amount- row.budget_monthly)} \n                                            \n                                            \n                                            `)\n                                            // () => { change_workflow_state(frm); },\n                                            // () => { frappe.msgprint(__('You pressed no and workflow state not changed'))\n                                            //         cur_frm.set_value(\"workflow_state\", \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u0645\u0627\u0644\u064a\");\n\n                                            // }\n                                        );  \n                                }else if(action ==\"Stop\" && row.total_amount > row.budget_monthly){\n                                    frappe.throw( __(` Account : ${row.account}\\n\\n\n                                            Monthly Budget :${parseInt(row.budget_monthly)}  \n                                            Total purchase order reservied Amount:${row.total_amount}    \n                                            it will exceed by ${parseInt(item.amount+row.total_amount- row.budget_monthly)} \n                                            \n                                            \n                                            `));\n                                }else if(action ==\"Ignore\"){\n                                    frappe.msgprint (__(` Account : ${row.account}\\n\\n\n                                            Monthly Budget :${parseInt(row.budget_monthly)}  \n                                            Total purchase order reservied Amount:${row.total_amount}    \n                                            it will exceed by ${parseInt(item.amount+row.total_amount- row.budget_monthly)} \n                                            \n                                            \n                                            `))\n                                }\n                                \n                            }\n                            })\n                            \n\n                            \n                            }\n                    });\n\n                });\n            }).catch(error => {\n                console.error(\"Error in get_monthly_distribution:\", error);\n            });\n        }).catch(error => {\n            console.error(\"Error in get_po:\", error);\n        });\n        }\n             \n        // }\n        // if(frm.)\n        \n    }\n});\nasync function get_po(frm) {\n    let results = {}; // Object to store totals by expense account\n    let today = new Date(frm.doc.transaction_date);\n    let startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    let endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);\n\n    try {\n        let purchaseOrders = await new Promise((resolve, reject) => {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Purchase Order\",\n                    limit_page_length: 5000,\n                    fields: [\"name\"],\n                    filters: [\n                        [\"docstatus\", \"=\", 1],\n                        [\"transaction_date\", \">=\", startOfMonth],\n                        [\"transaction_date\", \"<\", endOfMonth],\n                    ],\n                },\n                callback: function (r) {\n                    r.message ? resolve(r.message) : reject(\"Failed to fetch Purchase Orders.\");\n                }\n            });\n        });\n\n        if (purchaseOrders.length > 0) {\n            let responses = await Promise.all(purchaseOrders.map(order =>\n                new Promise((resolve, reject) => {\n                    frappe.call({\n                        method: \"frappe.client.get\",\n                        args: {\n                            doctype: \"Purchase Order\",\n                            name: order.name,\n                            fields: [\"items\"],\n                        },\n                        callback: function (r) {\n                            r.message ? resolve(r.message) : reject(\"Failed to fetch Purchase Order details.\");\n                        }\n                    });\n                })\n            ));\n\n            responses.forEach(response => {\n                let allPurchaseOrderItems = response.items || [];\n                allPurchaseOrderItems.forEach(item => {\n                    let amount = item.amount || 0;\n                    let expense_account = item.expense_account || '';\n\n                    if (expense_account) {\n                        if (!results[expense_account]) {\n                            results[expense_account] = { total_amount: 0 };\n                        }\n                        results[expense_account].total_amount += amount;\n                    }\n                });\n            });\n        } else {\n            console.error(\"No Purchase Orders found.\");\n        }\n\n    } catch (error) {\n        console.error(\"Error in get_po function\", error);\n    }\n\n    return results;\n}\n\n// async function get_budget(frm) {\n//     let today = new Date(frm.doc.transaction_date);\n//     let PO_year = today.getFullYear();\n\n//     try {\n//         let results = await get_po(frm);\n//         // console.log(\"Results\", results);\n\n//         let budgetDetails = {}; // Initialize budgetDetails as an object\n\n//         for (let expense_account in results) {\n//             if (results.hasOwnProperty(expense_account)) {\n//                 let result = results[expense_account];\n//                 // console.log(`Expense Account: ${expense_account}`);\n//                 // console.log(`Total Amount: ${result.total_amount}`);\n//                 // console.log('---');\n\n//                 let budgetResponse = await new Promise((resolve, reject) => {\n//                     frappe.call({\n//                         method: \"frappe.client.get_list\",\n//                         args: {\n//                             doctype: \"Budget\",\n//                             limit_page_length: 5000,\n//                             fields: [\"name\", \"cost_center\"],\n//                             filters: [\n//                                 [\"docstatus\", \"=\", 1],\n//                                 [\"fiscal_year\", \"=\", PO_year],\n//                             ],\n//                             limit: 1,\n//                         },\n//                         callback: function (r) {\n                            \n//                             r.message ? resolve(r.message) : reject(\"Failed to fetch budget details.\");\n//                         }\n//                     });\n//                 });\n\n//                 if (budgetResponse.length > 0) {\n//                     let budget = budgetResponse[0];\n//                     let budgetDetails =[]\n//                     let budgetDocResponse = await new Promise((resolve, reject) => {\n//                         frappe.call({\n//                             method: \"frappe.client.get\",\n//                             args: {\n//                                 doctype: \"Budget\",\n//                                 name: budget.name,\n//                                 fields: [\"accounts\"],\n//                             },\n//                             callback: function (r) {\n//                                 console.log(\"table ACCCCCOunts in buget\",r.message.accounts)\n//                                 r.message ? resolve(r.message) : reject(\"Failed to fetch budget document details.\");\n//                                 return r.message.accounts\n//                             }\n//                         });\n//                     });\n\n//                     if (budgetDocResponse) {\n//                         let table_budget_items = budgetDocResponse.accounts;\n//                         table_budget_items.forEach(item => {\n//                             budgetDetails.push = [{\n//                                 ...item, // Merge current item into budgetDetails\n//                                 cost_center: budgetDocResponse.cost_center // Ensure cost_center is added/updated\n//                             }];\n//                         });\n//                     } else {\n//                         console.error(\"Failed to fetch budget document details.\");\n//                     }\n//                 } else {\n//                     // console.log(\"No budgets found for the current year.\");\n//                 }\n//             }\n//         }\n\n\n\n//     } catch (error) {\n//         console.error(\"Error in get_budget function\", error);\n//         throw error; // Re-throw the error to be handled by the caller\n//     }\n//     console.log(\"boxxxxxxxxxxxxxxxx\",budgetDetails)\n// }\nasync function get_budget(frm) {\n    let today = new Date(frm.doc.transaction_date);\n    let PO_year = today.getFullYear();\n    let budgetDetails = []; // Use an array to accumulate budget details\n\n    try {\n        let results = await get_po(frm);\n        // console.log(\"Results\", results);\n\n        for (let expense_account in results) {\n            if (results.hasOwnProperty(expense_account)) {\n                let result = results[expense_account];\n                // console.log(`Expense Account: ${expense_account}`);\n                // console.log(`Total Amount: ${result.total_amount}`);\n                // console.log('---');\n\n                let budgetResponse = await new Promise((resolve, reject) => {\n                    frappe.call({\n                        method: \"frappe.client.get_list\",\n                        args: {\n                            doctype: \"Budget\",\n                            limit_page_length: 5000,\n                            fields: [\"name\", \"cost_center\"],\n                            filters: [\n                                [\"docstatus\", \"=\", 1],\n                                [\"fiscal_year\", \"=\", PO_year],\n                            ],\n                            limit: 1,\n                        },\n                        callback: function (r) {\n                            r.message ? resolve(r.message) : reject(\"Failed to fetch budget details.\");\n                        }\n                    });\n                });\n\n                if (budgetResponse.length > 0) {\n                    let budget = budgetResponse[0];\n\n                    let budgetDocResponse = await new Promise((resolve, reject) => {\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Budget\",\n                                name: budget.name,\n                                fields: [\"accounts\"],\n                            },\n                            callback: function (r) {\n                                // console.log(\"Table Accounts in Budget\", r.message.accounts);\n                                r.message ? resolve(r.message) : reject(\"Failed to fetch budget document details.\");\n                            }\n                        });\n                    });\n\n                    if (budgetDocResponse && budgetDocResponse.accounts) {\n                        let table_budget_items = budgetDocResponse.accounts;\n                        table_budget_items.forEach(item => {\n                            budgetDetails.push({\n                                ...item,\n                                cost_center: budget.cost_center // Ensure cost_center is added/updated\n                            });\n                        });\n                    } else {\n                        console.error(\"Failed to fetch budget document details.\");\n                    }\n                } else {\n                    // console.log(\"No budgets found for the current year.\");\n                }\n            }\n        }\n\n    } catch (error) {\n        console.error(\"Error in get_budget function\", error);\n        throw error; // Re-throw the error to be handled by the caller\n    }\n\n    console.log(\"Budget Details:\", budgetDetails);\n    return budgetDetails; // Return budgetDetails properly\n}\n\nasync function get_monthly_distribution(frm, poResults) {\n    try {\n        let budgetDetails = await get_budget(frm);\n        console.log(\"Budget Detailsaaaaaaaaaaaaaaaaaaaaaaaaaaa:\", budgetDetails);\n          if (!Array.isArray(budgetDetails)) {\n            throw new Error(\"Invalid data format returned from get_budget.\");\n        }\n        let monthList = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let po_month = new Date(frm.doc.transaction_date);\n        let currentMonthIndex = po_month.getMonth(); // Zero-based index\n\n        let allocatedAmounts = [];\n\n        for (let budget of budgetDetails) {\n            let budget_accounts_table = budget; // Access the accounts array from the budget item\n            console.log(\"Accounts Table ACCCCCounts :\", budget);\n\n            let monthlyDistResponse = await new Promise((resolve, reject) => {\n                frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Monthly Distribution\",\n                        name: budget_accounts_table.monthly_distribution,\n                        fields: [\"percentages\"],\n                    },\n                    callback: function (r) {\n                        r.message ? resolve(r.message) : reject(\"Failed to fetch monthly distribution.\");\n                    }\n                });\n            });\n\n            let child = monthlyDistResponse.percentages;\n            child.forEach(row => {\n                if (row.month === monthList[currentMonthIndex]) {\n                    let allocatedAmount = (row.percentage_allocation * budget_accounts_table.budget_amount) / 100;\n                    let totalAmount = poResults[budget_accounts_table.account] ? poResults[budget_accounts_table.account].total_amount : 0;\n                    // console.log(\"totalAmount\",poResults[budget_accounts_table.account].total_amount,\"buss\",budget_accounts_table.parent);\n                    allocatedAmounts.push({\n                        \"account\": budget_accounts_table.account,\n                        \"cost_center\": budget.cost_center,\n                        \"budget_monthly\": allocatedAmount,\n                        \"total_amount\": totalAmount,// Add total amount for the account\n                        \"parent\": budget_accounts_table.parent,\n                    });\n                }\n            });\n        }\n\n        // Ensure allocatedAmounts is logged only once\n        // console.log(\"Final Allocated Amounts:\", allocatedAmounts);\n        return allocatedAmounts;\n\n    } catch (error) {\n        console.error(\"Error in get_monthly_distribution:\", error);\n        throw error; // Re-throw the error to be handled by the caller\n    }\n    //  console.log(\"Final Allocated Amount22s:\", allocatedAmounts);\n}\n\nfunction change_workflow_state(frm) {\n    // Move to the next state in the workflow\n    cur_frm.set_value(\"workflow_state\", \"\u0645\u0631\u0627\u062c\u0639\u0629 \u0627\u0644\u0645\u062f\u064a\u0631 \u0627\u0644\u0645\u0627\u0644\u064a\");\n\n    frm.save().then(() => {\n        frappe.msgprint(__('Workflow state changed successfully.'));\n    }).catch((error) => {\n        frappe.msgprint(__('Failed to change workflow state.'));\n        console.error(error);\n    });\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Generalization",
  "enabled": 1,
  "modified": "2024-09-17 15:27:01.784068",
  "module": "News Article",
  "name": "Generalization Settings Validation",
  "script": "frappe.ui.form.on('Generalization', {\n\trefresh(frm) {\n\t\t        \n\t\t        \n\tvar sms;\n        frappe.db.get_single_value('Generalization Settings', 'generalizations_sms')\n    .then(value => {\n        console.log(value);\n        sms = value;\n        \n           if( value === 0){\n        // frappe.throw(\"Committee Generalizations SMS Setting Is Disabled\");\n        frm.set_df_property('sms', 'hidden', 1);\n\n    }\n        \n        \n    });\n    \n    \n    \n    // \tvar sms;\n        frappe.db.get_single_value('Generalization Settings', 'generalizations_whatsapp')\n    .then(value => {\n        console.log(value);\n        sms = value;\n        \n           if( value === 0){\n        // frappe.throw(\"Committee Generalizations SMS Setting Is Disabled\");\n        frm.set_df_property('whatsapp', 'hidden', 1);\n\n    }\n        \n        \n    });\n    \n    \n    \n    \n    // \tvar sms;\n        frappe.db.get_single_value('Generalization Settings', 'generalizations_push_notifications')\n    .then(value => {\n        console.log(value);\n        sms = value;\n        \n           if( value === 0){\n        // frappe.throw(\"Committee Generalizations SMS Setting Is Disabled\");\n        frm.set_df_property('push_notification', 'hidden', 1);\n\n    }\n        \n        \n    });\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Generalization",
  "enabled": 0,
  "modified": "2024-09-17 14:57:46.368853",
  "module": null,
  "name": "get committe Email to news letter",
  "script": "frappe.ui.form.on('Generalization', {\n  before_save(frm) {\n    frm.add_custom_button(__('Send to Newsletter'), function(){\n    //   if(frm.doc.__unsaved) frappe.throw(\"save doc first\")\n        frappe.show_progress(\"Getting Contacts..\", 90, 100, \"Please wait\");\n        let condition_of_members = [];\n        if(frm.doc.active ===1 ){\n        condition_of_members.push(\"Active\")\n        }if (frm.doc.in_active ===1){\n            condition_of_members.push(\"Inactive\")\n        }if (frm.doc.suspended ===1){\n            condition_of_members.push(\"Suspended\")\n        }\n            for (let i = 0; i < condition_of_members.length; i++) {\n                    let status = condition_of_members[i];\n                     console.log(status)\n                        frappe.call({\n                    \"method\": \"news_article.api.api.get_committee_mail\",\n                    \"args\": {\"gen\": frm.doc.name, \"customer_status\": status},\n                    \"callback\": function(r) {\n                      let emails = r.message\n                      let customer_emails = []\n                      \n                      frappe.new_doc(\"Customer Newsletter\", {\n                        \n                          \"date\":frm.doc.due_date,\n                          \"source\":frm.doctype,\n                          \"generealiztion_id\":frm.doc.name,\n                          \n                        \n                      }).then(() => {\n                          \n                        for(let email of emails) {\n                            console.log(\"Email\",email['email'])\n                          cur_frm.add_child(\"customer_email\",{\n                            \"email\": email['email']\n                          })\n                        }\n                        cur_frm.refresh_fields(\"customer_email\")\n                      })\n                    }\n                  })\n        }\n      \n    }, __(\"\"));\n\n  }\n})\n\n\n\n\n// frappe.ui.form.on('Generalization', {\n//   refresh(frm) {\n//     frm.add_custom_button(__('Action'), async function() {\n//       // Show progress bar\n//       frappe.show_progress(\"Getting Contacts..\", 0, 100, \"Please wait\");\n      \n//       // Collect conditions based on the form's fields\n//       let condition_of_members = [];\n//       if (frm.doc.active === 1) {\n//         condition_of_members.push(\"Active\");\n//       }\n//       if (frm.doc.in_active === 1) {\n//         condition_of_members.push(\"Inactive\");\n//       }\n//       if (frm.doc.suspended === 1) {\n//         condition_of_members.push(\"Suspended\");\n//       }\n\n//       // Process each status\n//       for (let i = 0; i < condition_of_members.length; i++) {\n//         let status = condition_of_members[i];\n        \n//         try {\n//           // Call the server-side method\n//           let r = await frappe.call({\n//             method: \"news_article.api.api.get_committee_mail\",\n//             args: {\n//               \"gen\": frm.doc.name,\n//               \"customer_status\": status\n//             }\n//           });\n\n//           // Create a new document\n//           let doc = frappe.model.get_new_doc(\"Customer Newsletter\");\n          \n//           // Add the emails to the document\n//           let emails = r.message || [];\n//           for (let email of emails) {\n//             let child = frappe.model.add_child(doc, \"customer_email\");\n//             child.email = email['email'];\n//           }\n\n//           // Save the document\n//           await frappe.db.insert(doc);\n          \n//           // Update progress\n//           frappe.show_progress(\"Getting Contacts..\", (i + 1) * (100 / condition_of_members.length), 100, \"Please wait\");\n\n//         } catch (error) {\n//           frappe.msgprint({\n//             title: __('Error'),\n//             indicator: 'red',\n//             message: __('Failed to retrieve contacts or create document')\n//           });\n//           console.error(error);\n//           break;\n//         }\n//       }\n\n//       // Close progress bar\n//       frappe.hide_progress();\n//     }, __(\"\"));\n//   }\n// });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Generalization",
  "enabled": 1,
  "modified": "2024-09-17 15:26:53.875221",
  "module": "News Article",
  "name": "Get All Committees",
  "script": "frappe.ui.form.on('Generalization', {\n    get_committees:function(frm){\n        frm.clear_table('committees');\n        let dept;\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                \"doctype\" : \"Committee\",\n                \"limit_page_length\": 500,\n                'fields': ['name']\n            },\n            callback: function(response) {\n                if (response.message) {\n                    \n                    // console.log(response.message);\n                    // dept = response.message;\n                    // dept.pop(0);\n                    let dept = response.message.filter(committee => committee.name !== \"All committee\");\n\n                    console.log(dept);\n                    \n                    dept.forEach(function(d) {\n                        let child = frm.add_child('committees');\n                        child.the_commission = d.name;\n                    });\n                    \n                    frm.refresh_field('committees');\n\n                    \n                    \n                }\n            }\n        });\n        \n        // for(let row of dept){\n            \n            \n            \n            \n        // }\n        \n        \n        \n        \n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Generalization",
  "enabled": 1,
  "modified": "2024-09-17 15:24:13.914948",
  "module": "News Article",
  "name": "get committe Email to news letter2",
  "script": "frappe.ui.form.on('Generalization', {\n  before_save(frm) {\n    frm.add_custom_button(__('Send to Newsletter'), function(){\n    //   if(frm.doc.__unsaved) frappe.throw(\"save doc first\")\n        frappe.show_progress(\"Getting Contacts..\", 90, 100, \"Please wait\");\n        let condition_of_members = [];\n        let cs = frm.doc.committees;\n        if(frm.doc.active ===1 ){\n        condition_of_members.push(\"Active\")\n        }if (frm.doc.in_active ===1){\n            condition_of_members.push(\"Inactive\")\n        }if (frm.doc.suspended ===1){\n            condition_of_members.push(\"Suspended\")\n        }\n            for (let i = 0; i < condition_of_members.length; i++) {\n                    let status = condition_of_members[i];\n                     console.log(status)\n                     for (let c =0; c < cs.length; c++){\n                         let committee = cs[c];\n                          console.log(committee.the_commission)\n                 \n                        frappe.call({\n                    \"method\": \"send_to_newsletters\",\n                    \"args\": {\"committe\": committee.the_commission, \"status\": status},\n                    \"callback\": function(r) {\n                      let emails = r.message\n                      let customer_emails = []\n                     \n\n                      frappe.new_doc(\"Customer Newsletter\", {\n                        \n                          \"date\":frm.doc.due_date,\n                          \"source\":frm.doctype,\n                          \"generealiztion_id\":frm.doc.name,\n                          \n                        \n                      }).then(() => {\n                          \n                        for(let email of emails) {\n                            console.log(\"Email\",String(email[0]))\n                          cur_frm.add_child(\"customer_email\",{\n                            \"email\": String(email[0])\n                          })\n                        }\n                        cur_frm.refresh_fields(\"customer_email\")\n                      })\n                    }\n                  })\n                     }\n        }\n      \n    }, __(\"\"));\n\n  }\n})\n\n\n\n\n// frappe.ui.form.on('Generalization', {\n//   refresh(frm) {\n//     frm.add_custom_button(__('Action'), async function() {\n//       // Show progress bar\n//       frappe.show_progress(\"Getting Contacts..\", 0, 100, \"Please wait\");\n      \n//       // Collect conditions based on the form's fields\n//       let condition_of_members = [];\n//       if (frm.doc.active === 1) {\n//         condition_of_members.push(\"Active\");\n//       }\n//       if (frm.doc.in_active === 1) {\n//         condition_of_members.push(\"Inactive\");\n//       }\n//       if (frm.doc.suspended === 1) {\n//         condition_of_members.push(\"Suspended\");\n//       }\n\n//       // Process each status\n//       for (let i = 0; i < condition_of_members.length; i++) {\n//         let status = condition_of_members[i];\n        \n//         try {\n//           // Call the server-side method\n//           let r = await frappe.call({\n//             method: \"news_article.api.api.get_committee_mail\",\n//             args: {\n//               \"gen\": frm.doc.name,\n//               \"customer_status\": status\n//             }\n//           });\n\n//           // Create a new document\n//           let doc = frappe.model.get_new_doc(\"Customer Newsletter\");\n          \n//           // Add the emails to the document\n//           let emails = r.message || [];\n//           for (let email of emails) {\n//             let child = frappe.model.add_child(doc, \"customer_email\");\n//             child.email = email['email'];\n//           }\n\n//           // Save the document\n//           await frappe.db.insert(doc);\n          \n//           // Update progress\n//           frappe.show_progress(\"Getting Contacts..\", (i + 1) * (100 / condition_of_members.length), 100, \"Please wait\");\n\n//         } catch (error) {\n//           frappe.msgprint({\n//             title: __('Error'),\n//             indicator: 'red',\n//             message: __('Failed to retrieve contacts or create document')\n//           });\n//           console.error(error);\n//           break;\n//         }\n//       }\n\n//       // Close progress bar\n//       frappe.hide_progress();\n//     }, __(\"\"));\n//   }\n// });\n",
  "view": "Form"
 }
]